cmdhistory=["(defmacro clj-marco-introduction\\r\\n     \\"Introdution with a macro\\"\\r\\n     [func-name company]\\n     (let [message (gensym 'message)\\n           dance-num (gensym 'dance-num)]\\r\\n     `(def ~ (symbol (str func-name  \\"-intro\\"))\\n        (fn [^String ~message]\\n          (println ~message ~company)))\\n     `(def ~ (symbol (str func-name \\"-dance\\"))\\r\\n         (fn [^String ~message ^Number ~dance-num]\\n           \\"Showing map - purposefully verbose\\"\\r\\n           (apply println\\r\\n                  (flatten \\r\\n                    (map \#(vector %1 \\" \\" %2 \\" \\" %3 \\"\\\\n\\")\\r\\n                         (take ~dance-num\\r\\n                               (repeat \\"Dancing\\"))\\r\\n                         (take ~dance-num\\r\\n                               (repeat ~message))\\r\\n                         (take ~dance-num\\r\\n                               (repeat ~company)))))))))" "(clj-marco-introduction shannon \\"Apple Inc.\\")" "(shannon-intro \\"Hello\\")" "(shannon-dance \\"for\\" 10)" "(defmacro clj-marco-introduction\\r\\n     \\"Introdution with a macro\\"\\r\\n     [func-name company]\\n     (let [message (gensym 'message)\\n           dance-num (gensym 'dance-num)]\\r\\n     `(def ~ (symbol (str func-name  \\"-intro\\"))\\n        (fn [^String ~message]\\n          (println ~message ~company)))\\n     `(def ~ (symbol (str func-name \\"-dance\\"))\\r\\n         (fn [^String ~message ^Number ~dance-num]\\n           \\"Showing map - purposefully verbose\\"\\r\\n           (apply println\\r\\n                  (flatten \\r\\n                    (map \#(vector (repeat (rand-int 10) \\" \\") %1 \\" \\" %2 \\" \\" %3 \\"\\\\n\\")\\r\\n                         (take ~dance-num\\r\\n                               (repeat \\"Dancing\\"))\\r\\n                         (take ~dance-num\\r\\n                               (repeat ~message))\\r\\n                         (take ~dance-num\\r\\n                               (repeat ~company)))))))))" "(clj-marco-introduction shannon \\"Apple Inc.\\")" "(shannon-intro \\"Hello\\")" "(shannon-dance \\"for\\" 10)" "(defmacro clj-marco-introduction\\r\\n     \\"Introdution with a macro\\"\\r\\n     [func-name company]\\n     (let [message (gensym 'message)\\n           dance-num (gensym 'dance-num)]\\r\\n     `(def ~ (symbol (str func-name  \\"-intro\\"))\\n        (fn [^String ~message]\\n          (println ~message ~company)))\\n     `(def ~ (symbol (str func-name \\"-dance\\"))\\r\\n         (fn [^String ~message ^Number ~dance-num]\\n           \\"Showing map - purposefully verbose\\"\\r\\n           (apply println\\r\\n                  (flatten \\r\\n                    (map \#(vector (repeat (rand-int 10) \\" \\") %1 \\" \\" %2 \\" \\" %3 \\"\\\\n\\")\\r\\n                         (take ~dance-num\\r\\n                               (repeat \\"Dancing\\"))\\r\\n                         (take ~dance-num\\r\\n                               (repeat ~message))\\r\\n                         (take ~dance-num\\r\\n                               (repeat ~company)))))))))" "(shannon-intro \\"Hello\\")" "(shannon-dance \\"for\\" 10)" "(defmacro clj-marco-introduction\\r\\n     {\:doc \\"Introdution with a macro\\"}\\r\\n     [func-name company]\\n     (let [message (gensym 'message)\\n           dance-num (gensym 'dance-num)]\\r\\n     `(def ~ (symbol (str func-name  \\"-intro\\"))\\n        (fn [^String ~message]\\n          (println ~message ~company)))\\n     `(def ~ (symbol (str func-name \\"-dance\\"))\\r\\n         (fn [^String ~message ^Number ~dance-num]\\n          {\:doc \\"Showing map - purposefully verbose\\"}\\r\\n           (apply println\\r\\n                  (flatten \\r\\n                    (map \#(vector (repeat (rand-int 10) \\" \\") %1 \\" \\" %2 \\" \\" %3 \\"\\\\n\\")\\r\\n                         (take ~dance-num\\r\\n                               (repeat \\"Dancing\\"))\\r\\n                         (take ~dance-num\\r\\n                               (repeat ~message))\\r\\n                         (take ~dance-num\\r\\n                               (repeat ~company)))))))))" "(defmacro clj-marco-introduction\\r\\n     {\:doc \\"Introdution with a macro\\"\\n      \:macro true}\\r\\n     [func-name company]\\n     (let [message (gensym 'message)\\n           dance-num (gensym 'dance-num)]\\r\\n     `(def ~ (symbol (str func-name  \\"-intro\\"))\\n        \\"Produces a greeting\\"\\n        {\:doc \\"Input [String]\\"}\\n        (fn [^String ~message]\\n          (println ~message ~company)))\\n     `(def ~ (symbol (str func-name \\"-dance\\"))\\r\\n         (fn [^String ~message ^Number ~dance-num]\\n           \\"Showing map - purposefully verbose\\"\\n          {\:doc \\"input [String number]  output\: side affect\\"}\\r\\n           (apply println\\r\\n                  (flatten \\r\\n                    (map \#(vector (repeat (rand-int 10) \\" \\") %1 \\" \\" %2 \\" \\" %3 \\"\\\\n\\")\\r\\n                         (take ~dance-num\\r\\n                               (repeat \\"Dancing\\"))\\r\\n                         (take ~dance-num\\r\\n                               (repeat ~message))\\r\\n                         (take ~dance-num\\r\\n                               (repeat ~company)))))))))" "(clj-marco-introduction shannon \\"Apple Inc.\\")" "(shannon-intro \\"Hello\\")" "(shannon-dance \\"for\\" 10)" "(defmacro clj-macro-introduction\\r\\n     {\:doc \\"Introduction with a macro\\"\\r\\n      \:macro true}\\r\\n     [func-name company]\\r\\n     (let [message (gensym 'message)\\r\\n           dance-num (gensym 'dance-num)]\\r\\n     `(def ~ (symbol (str func-name  \\"-intro\\"))\\r\\n        \\"Produces a greeting\\"\\r\\n        {\:doc \\"Input [String]\\"}\\r\\n        (fn [^String ~message]\\r\\n          (println ~message ~company)))\\r\\n     `(def ~ (symbol (str func-name \\"-dance\\"))\\r\\n         (fn [^String ~message ^Number ~dance-num]\\r\\n           \\"Showing map - purposefully verbose\\"\\r\\n          {\:doc \\"input [String number]  output\: side affect\\"}\\r\\n           (apply println\\r\\n                  (flatten \\r\\n                    (map \#(vector (repeat (rand-int 10) \\" \\") %1 \\" \\" %2 \\" \\" %3 \\"\\\\n\\")\\r\\n                         (take ~dance-num\\r\\n                               (repeat \\"Dancing\\"))\\r\\n                         (take ~dance-num\\r\\n                               (repeat ~message))\\r\\n                         (take ~dance-num\\r\\n                               (repeat ~company)))))))))" "(clj-macro-introduction shannon \\"Apple Inc.\\")" "(shannon-intro \\"Hello\\")\\r\\n\\r\\n(shannon-dance \\"for\\" 10)\\t\\r\\n\\r\\n(shannon-dance \\"with\\" 10)" "(process-image)" "(shared/init-trail-state)" "(phase/load-image)" "(shared/time-start)" "(phase/bootstrap)" "(tgaa.algo.ant-path/init-trail-paths)" "(apply max(tgaa.algo.trial/trial-max-local \\r\\n               (tgaa.algo.ant-path/proc-all-ants (tgaa.algo.ant-path/init-trail-paths))))" "(tgaa.algo.ant-path/init-trail-paths)" "(tgaa.algo.ant-path/proc-all-ants (tgaa.algo.ant-path/init-trail-paths))" "(map \#(tgaa.algo.ant-path/proc-ant %) (tgaa.algo.ant-path/init-trail-paths))" "(tgaa.algo.ant-path/proc-ant (first (tgaa.algo.ant-path/init-trail-paths)))" "(map \#(tgaa.algo.ant-path/proc-ant %) (tgaa.algo.ant-path/init-trail-paths))" "(map \#(do (println (\:id %)) (tgaa.algo.ant-path/proc-ant %)) (tgaa.algo.ant-path/init-trail-paths))" "(map \#(try (tgaa.algo.ant-path/proc-ant %) (catch e (print e))) (tgaa.algo.ant-path/init-trail-paths))" "(map \#(try (tgaa.algo.ant-path/proc-ant %) (catch Exception e (print e))) (tgaa.algo.ant-path/init-trail-paths))" "(map \#(try (do (tgaa.algo.ant-path/proc-ant %) nil) (catch Exception e (print e))) (tgaa.algo.ant-path/init-trail-paths))" "(map \#(try (do (tgaa.algo.ant-path/proc-ant %) nil) (catch Exception e (print %))) (tgaa.algo.ant-path/init-trail-paths))" "(map \#(tgaa.algo.ant-path/proc-ant %) (tgaa.algo.ant-path/init-trail-paths))" " (tgaa.algo.ant-path/init-trail-paths)" " (tgaa.algo.ant-path/random-point [4 4])" " (tgaa.algo.ant-path/random-point 1)" " (tgaa.algo.ant-path/random-point 2)" "(map \#(try (do (tgaa.algo.ant-path/proc-ant %) nil) (catch Exception e (print %))) (tgaa.algo.ant-path/init-trail-paths))" " (tgaa.algo.ant-path/rand-ant-dir [31 112])" " (tgaa.algo.ant-path/rand-ant-dir [0 112])" " (tgaa.algo.ant-path/rand-ant-dir [31 112])" "(tgaa.struct.shared/image-ref)" "(Throw Excpetion \\"test\\")" "(throw Excpetion \\"test\\")" "(throw)" "(throw \\"tet\\")" "(throw (Exception \\"test\\"))" "(throw (new Exception \\"test\\"))" "(-> (new Exception) setMessage throw)" "(-> (new Exception \\"fail\\") throw)" "(-> (Exception. \\"fail\\") throw)" " (tgaa.algo.ant-path/rand-ant-dir [31 112])" "(map \#(tgaa.algo.ant-path/proc-ant %) (tgaa.algo.ant-path/init-trail-paths))" "(shared/init-trail-state)" "(process-image)" "(tgaa.util.image/anim-trail-paths)" "(import 'java.awt.Color)" "(tgaa.util.image/anim-trail-paths)" "(process-image)" "(tgaa.util.image/anim-trail-paths)" "(process-image)" "(tgaa.util.image/anim-trail-paths)" "(tgaa.util.image/show-cann-path)" "(phase/analysis-hull)" "(tgaa.util.image/draw-final-boundary)" "(tgaa.util.image/show-cann-path)" "(mikera.image.core/show (tgaa.struct.shared/image-ref))" "(tgaa.util.image/show-cann-path)" "(shared/salient-results)" "(tgaa.util.image/show-cann-path)" "(shared/salient-ids)" "(shared/salient-results)" "(phase/evaluation)" "(shared/salient-results)" "(shared/salient-ids)" "(tgaa.struct.ant/ant-group 0)" "(keys (shared/trial-state))" "(keys @shared/trial-state)" "(count (\:cand-paths @shared/trial-state))" "(filter \#(\= % (shared/salient-ids)) (\:cand-paths @shared/trial-state))" "(filter \#(contains? % (shared/salient-ids)) (\:cand-paths @shared/trial-state))" "(filter (fn [x]\\n          (not-empty \\n            (filter \#(\= x %)\\n                    (shared/salient-ids)))) (\:cand-paths @shared/trial-state))" "(filter (fn [x]\\n          (not-empty \\n            (filter \#(\= x (\:id %))\\n                    (shared/salient-ids)))) (\:cand-paths @shared/trial-state))" "(filter (fn [x]\\n          (not-empty \\n            (filter \#(\= (\:id x) %)\\n                    (shared/salient-ids)))) (\:cand-paths @shared/trial-state))" "(count (filter (fn [x]\\n                 (not-empty \\n                   (filter \#(\= (\:id x) %)\\n                           (shared/salient-ids)))) (\:cand-paths @shared/trial-state)))" "(filter (fn [x]\\n          (not-empty \\n            (filter \#(\= (\:id x) %)\\n                    (shared/salient-ids)))) \\n        (\:cand-paths @shared/trial-state))" "(shared/salient-results)" "(shared/salient-ids)" "(count (shared/salient-results))" "(apply count (shared/salient-results))" "(shared/salient-results)" "(filter (fn [x]\\n          (not-empty \\n            (filter \#(\= (\:id x) %)\\n                    (shared/salient-ids)))) \\n        (\:cand-paths @shared/trial-state))" "(make-groups \\r\\n                 (filter \#(\= (ant/ant-trial-num %) (shared/get-num-trails)) \\r\\n                         (shared/canidates)))" "(defn make-groups [cann-path]\\r\\n  (loop [non-group cann-path groups [] meta-data {} group-id 0]\\r\\n    (if (empty? non-group)\\r\\n      {\:groups groups \:group-data meta-data}\\r\\n      (let [[group-res non-group-res ] (make-group non-group)]\\r\\n        (recur non-group-res  \\r\\n               (apply conj groups (map \#(assoc % \:group group-id) group-res))\\r\\n               (assoc meta-data (keyword (str group-id)) (count group-res))\\r\\n               (inc group-id))))))" "(tgaa.algo.core/make-groups \\r\\n                 (filter \#(\= (ant/ant-trial-num %) (shared/get-num-trails)) \\r\\n                         (shared/canidates)))" "(tgaa.algo.core/make-groups \\r\\n                 (filter \#(\= (tgaa.struct.ant/ant-trial-num %) (shared/get-num-trails)) \\r\\n                         (shared/canidates)))" "(shared/get-num-trails)" "(filter \#(\= (ant/ant-trial-num %) (shared/get-num-trails))" "(filter \#(\= (ant/ant-trial-num %) (shared/get-num-trails)" "(filter \#(\= (ant/ant-trial-num %) (shared/get-num-trails)))" "(filter \#(\= (tgaa.algo.ant/ant-trial-num %) (shared/get-num-trails)))" "(filter \#(\= (tgaa.struct.ant/ant-trial-num %) (shared/get-num-trails)))" "(filter \#(\= (tgaa.struct.ant/ant-trial-num %) (shared/get-num-trails)) (shared/canidates))" "(make-groups  (filter \#(\= (tgaa.struct.ant/ant-trial-num %) (shared/get-num-trails)) (shared/canidates)))" "(count (filter \#(\= (tgaa.struct.ant/ant-trial-num %) (shared/get-num-trails)) (shared/canidates))))" "(count (filter \#(\= (tgaa.struct.ant/ant-trial-num %) (shared/get-num-trails)) (shared/canidates)))" "(def t(filter \#(\= (tgaa.struct.ant/ant-trial-num %) (shared/get-num-trails)) (shared/canidates)))" "t" "(tgaa.algo.analysis/make-groups t)" "(shared/init-trail-state)" "(phase/load-image)" "(shared/time-start)" "(phase/bootstrap)" "(phase/trapping)" "(phase/evaluation)" "(shared/time-end)" "(shared/salient-results)" "(shared/salient-ids)" "(shared/salient-results)" "(shared/salient-ids)" "(count (shared/salient-ids))" "(import 'java.awt.Color)" "(tgaa.util.image/ animate-algo )" "(tgaa.util.image/animate-algo )" "(tgaa.util.image/show-cann-path)" "(process-image)" "(tgaa.util.image/anim-trail-paths)" "(process-image)" "(tgaa.util.image/anim-trail-paths)" "(process-image)" "(tgaa.util.image/anim-trail-paths)" "(shared/salient-results)" "(count (shared/salient-ids))" "(shared/salient-ids)" "(process-image)" "(shared/salient-ids)" "(shared/salient-results)" "(process-image)" "(shared/salient-results)" "(shared/salient-ids)" " (phase/bootstrap)" " (phase/trapping)" "(phase/evaluation)" "(shared/salient-ids)" "(shared/salient-results)" "(shared/init-trail-state)" "(phase/load-image)" " (phase/bootstrap)" " (phase/trapping)" " (phase/evaluation)" "(shared/salient-results)" "(map \#(tgaa.util.image/pix-value (\:local-max %) (shared/image-gry-ref)) (shared/salient-id))" "(shared/salient-id)" "(map \#(tgaa.util.image/pix-value (\:local-max %) (shared/image-gry-ref)) (shared/salient-ids))" "(map \#((\:local-max %)) (shared/salient-ids))" "(map \#(\:local-max %) (shared/salient-ids))" " (shared/salient-ids)" "(count (shared/salient-ids))" "(map count (shared/salient-ids))" "(phase/evaluation)" " (shared/salient-ids)" "(shared/init-trail-state)" "(phase/bootstrap)" "(phase/load-image)" "(phase/bootstrap)" " (phase/trapping)" " (phase/evaluation)" " (shared/salient-ids)" "(map \#(tgaa.util.image/pix-value (\:local-max %) (shared/image-gry-ref)) (shared/salient-ids))" "(shared/thresh)" "(map \#(tgaa.util.image/pix-value (\:local-min %) (shared/image-gry-ref)) (shared/salient-ids))" "(defn edge-stats-by-group[]\\n  (map \#(vector (tgaa.util.image/pix-value (\:local-min %) (shared/image-gry-ref)) (\:group %)) (shared/salient-ids)))" "(edge-stats-by-group)" "(shared/salient-results)" "(defn edge-stats-by-group[]\\n  (map \#(filter ) (\:(shared/s\\n    \\n  (filter \#(tgaa.util.image/pix-value (\:local-min %)) (shared/salient-ids)))" "(shared/salient-results)" "(map first (shared/salient-results))" "(map \#(string first) (shared/salient-results))" "(map \#(string (first %)) (shared/salient-results))" "(map \#(str (first %)) (shared/salient-results))" "(map \#(symbol (first %)) (shared/salient-results))" "(map \#(key (first %)) (shared/salient-results))" "(map \#(name (first %)) (shared/salient-results))" "(map \#(Integer (name (first %))) (shared/salient-results))" "(map \#(num (name (first %))) (shared/salient-results))" "(map \#(int (name (first %))) (shared/salient-results))" "(map \#(Integer. (name (first %))) (shared/salient-results))" "(map \#(filter (\= %) (shared/salient-ids)) (map \#(Integer. (name (first %))) (shared/salient-results)))" "(map \#(filter (\= (\:group %)) (shared/salient-ids)) (map \#(Integer. (name (first %))) (shared/salient-results)))" "(map \#(filter (fn [x] (\= (\:group x) %) (shared/salient-ids)) (map \#(Integer. (name (first %))) (shared/salient-results)))" "(map \#(filter (fn [x] (\= (\:group x) %) (shared/salient-ids)) \\n              (map \#(Integer. (name (first %))) (shared/salient-results))))" "(map \#(filter (fn [x] (\= (\:group x) %)) (shared/salient-ids)) \\n              (map \#(Integer. (name (first %))) (shared/salient-results)))" "(map \#(Math/max\\n        (filter (fn [x] (\= (\:group x) %)) (shared/salient-ids)) \\n              (map \#(Integer. (name (first %)))) (shared/salient-results)))" "(map \#(Math/max\\n        (filter (fn [x] (\= (\:group x) %)) (shared/salient-ids)))\\n              (map \#(Integer. (name (first %)))) (shared/salient-results))" "(map \#(+\\n        (filter (fn [x] (\= (\:group x) %)) (shared/salient-ids)))\\n              (map \#(Integer. (name (first %)))) (shared/salient-results))" "(map \#(filter (\= %) (shared/salient-ids)) (map \#(Integer. (name (first %))) (shared/salient-results)))" "(map \#(int (name (first %))) (shared/salient-results))" " (map \#(vector (tgaa.util.image/pix-value (\:local-min %) (shared/image-gry-ref)) (\:group %)) (shared/salient-ids)))" " (map \#(vector (tgaa.util.image/pix-value (\:local-min %) (shared/image-gry-ref)) (\:group %)) (shared/salient-ids))" " (map \#(vector (tgaa.util.image/pix-value (\:local-max %) (shared/image-gry-ref)) (\:group %)) (shared/salient-ids))" "ls" "(shared/thresh)" "(tgaa.util.image/show-segmentaton)" "(tgaa.util.image/show-segmentaton 1\\n                                  )" "(tgaa.util.image/show-segmentaton 2)" "(tgaa.util.image/show-segmentaton 150)" "(tgaa.util.image/show-segmentaton 180)" "(tgaa.util.image/show-segmentaton 110)" "(tgaa.util.image/show-segmentaton)" " (map \#(vector (tgaa.util.image/pix-value (\:local-max %) (shared/image-gry-ref)) (\:group %)) (shared/salient-ids))" "(tgaa.util.image/show-segmentaton 170)" " (map \#(vector (tgaa.util.image/pix-value (\:local-min %) (shared/image-gry-ref)) (\:group %)) (shared/salient-ids))" "(tgaa.util.image/show-segmentaton 126)" "(tgaa.util.image/show-segmentaton 131)" "(tgaa.util.image/show-segmentaton 111)" " (map \#(vector (tgaa.util.image/pix-value (\:local-min %) (shared/image-gry-ref)) (\:group %)) (shared/salient-ids))" "(tgaa.util.image/show-segmentaton 111)" "(tgaa.util.image/show-segmentaton 200)" "(tgaa.util.image/show-segmentaton 100)" "(tgaa.util.image/show-segmentaton 50)" "(tgaa.util.image/show-segmentaton 20)" "(tgaa.util.image/show-segmentaton 30)" "(phase/bootstrap)" "(shared/thresh)" "(tgaa.util.image/show-segmentaton 234)" "(case \\"L\\"\\n  \\"L\\" \\"est\\")" "(case \\"L\\"\\n  \\"L\\" \\"est\\"\\n  \\"g\\" \\"estt\\")" "(case \\"L\\"\\n  \\"L\\" +\\n  \\"g\\" \\"estt\\")" "((case \\"L\\"\\n   \\"L\\" +\\n   \\"g\\" \\"estt\\") 1 1)" "(phase/bootstrap)" "(shared/thresh)" "(def v (phase/bootstrap))" "v" "(phase/bootstrap)" "(shared/thresh)" "(shared/init-trail-state)" "(phase/load-image)" "(phase/bootstrap)" "(shared/thresh)" "(phase/trapping)" "(shared/thresh)" "(tgaa.util.image/show-segmentaton 78)" "(shared/init-trail-state)" "(phase/load-image)" "(phase/bootstrap)" "(phase/trapping)" "(shared/thresh)" "(tgaa.util.image/show-segmentaton 88)" "(import 'java.awt.Color)" "(tgaa.util.image/show-cann-path)" "(shared/thresh)" "(shared/init-trail-state)" "(phase/load-image)" "(phase/bootstrap)" "(shared/thresh)" "(phase/trapping)" "(shared/thresh)" "(shared/init-trail-state)" "(phase/load-image)" "(phase/bootstrap)" "(shared/thresh)" "(phase/trapping)" "(shared/thesh-oper)" "((shared/thesh-oper) 1 3)" "(shared/init-trail-state)" "(phase/load-image)" "(phase/bootstrap)" "(shared/thresh)" "(phase/trapping)" "(shared/init-trail-state)" "(phase/bootstrap)" "(phase/load-image)" "(phase/bootstrap)" "(shared/thresh)" "(phase/trapping)" "(shared/thresh)" "(tgaa.util.image/show-segmentaton 162)" "(shared/init-trail-state)" "(phase/trapping)" "(phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" "(phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" "(phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" "(phase/load-image)" "(phase/bootstrap)" "(shared/thresh)" "(shared/init-trail-state)" "(phase/bootstrap)" "(phase/load-image)" "(phase/bootstrap)" "(shared/thresh)" "(shared/init-trail-state)" "(phase/load-image)" "(phase/bootstrap)" "(shared/thresh)" "(phase/load-image)" "(phase/bootstrap)" "(shared/thresh)" "(phase/trapping)" "(tgaa.util.image/anim-trail-paths)" "(shared/init-trail-state)" "(phase/load-image)" "(phase/bootstrap)" "(shared/thresh)" "(shared/thresh 1)" "(shared/update-thresh 1)" "(shared/thresh)" "(shared/init-trail-state)" "(phase/load-image)" "(phase/bootstrap)" "(shared/thresh)" "(shared/init-trail-state)" "(phase/load-image)" "(phase/bootstrap)" "(shared/thresh)" "(phase/trapping)" "(shared/thresh)" "(tgaa.util.image/anim-trail-paths)" "(tgaa.util.image/show-segmentaton 16)" "(tgaa.util.image/show-segmentaton 165)" "(shared/init-trail-state)" "(phase/load-image)" "(phase/bootstrap)" "(shared/thresh)" "(phase/trapping)" "(shared/thresh)" "(tgaa.util.image/anim-trail-paths)" "(shared/init-trail-state)" "(phase/load-image)" "(phase/bootstrap)" "(shared/thresh)" "(phase/trapping)" "(tgaa.util.image/anim-trail-paths)" "(phase/trapping)" "(tgaa.util.image/anim-trail-paths)" "(shared/init-trail-state)" "(phase/load-image)" "(phase/bootstrap)" "(shared/thresh)" "(phase/trapping)" "(tgaa.util.image/anim-trail-paths)" "(shared/init-trail-state)" "(phase/load-image)" "(phase/bootstrap)" "(phase/trapping)" "(tgaa.util.image/anim-trail-paths)" "(shared/init-trail-state)" "(phase/load-image)" "(phase/bootstrap)" "(phase/trapping)" "(tgaa.util.image/anim-trail-paths)" "(tgaa.util.image/show-cann-path)" "(shared/num-eval-ants)" "(defn init-trail-paths []\\r\\n  \\"Gets ant paths for a trail based on trail-state and config\\"\\r\\n  (map \#(ant-path %)\\r\\n       (concat \\r\\n         (random-point \\r\\n           (num-of-random-starts))\\r\\n         (phero-points \\r\\n           (num-of-phero-starts)))))" "(defn eval-data-gen[]\\r\\n    (ap/proc-all-ants \\r\\n      (map \#(ap/ant-path %)\\r\\n         (ap/phero-points \\r\\n           (shared/num-eval-ants)))))" "(defn eval-data-gen[]\\r\\n    (tgaa.algo.ant-path/proc-all-ants \\r\\n      (map \#(tgaa.algo.ant-path/ant-path %)\\r\\n         (tgaa.algo.ant-path/phero-points \\r\\n           (shared/num-eval-ants)))))" "(shared/eval-paths (eval-data-gen))" "(shared/eval-paths)" "(shared/init-trail-state)" "(phase/load-image)" "(shared/update-thresh 1)" "(phase/trapping)" "(shared/eval-paths (eval-data-gen))" "(count (shared/eval-paths))" "(shared/eval-paths)" "(eval-data-gen)" "\\r\\n    (tgaa.algo.ant-path/proc-all-ants \\r\\n      (map \#(tgaa.algo.ant-path/ant-path %)\\r\\n         (tgaa.algo.ant-path/phero-points \\r\\n           (shared/num-eval-ants))))" "\\r\\n     \\r\\n      (map \#(tgaa.algo.ant-path/ant-path %)\\r\\n         (tgaa.algo.ant-path/phero-points \\r\\n           (shared/num-eval-ants)))" "(shared/num-eval-ants)" "\\r\\n     \\r\\n      \\r\\n         (tgaa.algo.ant-path/phero-points \\r\\n           (shared/num-eval-ants))" "(tgaa.util.image/anim-trail-paths)" "(import 'java.awt.Color)" "(tgaa.util.image/anim-trail-paths)" "(tgaa.util.image/show-cann-path)" "(shared/init-trail-state)" "(phase/load-image)" " (phase/bootstrap)" "(shared/thresh)" "(shared/update-thresh 1)" "(phase/trapping)" "(tgaa.util.image/show-cann-path)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(phase/trapping)" "(tgaa.util.image/show-cann-path)" "(phase/trapping)" "(tgaa.util.image/show-cann-path)" "(tgaa.util.image/show-cann-path 1\\n                                )" "(tgaa.util.image/show-cann-path 50\\n                                )" "(tgaa.util.image/show-cann-path 20\\n                                )" "(count (shared/canidates))" "(count (filter \#(< (shared/thresh) (tgaa.struct.ant/ant-local-min %))\\n         (count (shared/canidates))))" "(count (filter \#(< (shared/thresh) (tgaa.struct.ant/ant-local-min %))\\n          (shared/canidates)))" "(first (shared/canidates))" "(count (filter \#(< (shared/thresh) (tgaa.util.image/pix-value (tgaa.struct.ant/ant-local-min %)))\\n          (shared/canidates)))" "(count (filter \#(< (shared/thresh) (tgaa.util.image/pix-value (tgaa.struct.ant/ant-local-min %) (shared/image-gry-ref)))\\n          (shared/canidates)))" "(count (filter \#(> (shared/thresh) (tgaa.util.image/pix-value (tgaa.struct.ant/ant-local-min %) (shared/image-gry-ref)))\\n          (shared/canidates)))" "(count (filter \#(<\\n                  (shared/thresh) (tgaa.util.image/pix-value (tgaa.struct.ant/ant-local-min %) (shared/image-gry-ref)))\\n          (shared/canidates)))" "(def t\\n(map \\n  tgaa.algo.ant-path/proc-ant  \\n  (filter \#(<\\n             (shared/thresh) (tgaa.util.image/pix-value (tgaa.struct.ant/ant-local-min %) (shared/image-gry-ref)))\\n     (shared/canidates))))" "(first t)" "(defn reprocess-paths\\n  \\"evaluation phase\: prune paths that threshold omits and reprocess all paths with final threshold\\"\\n(map \\n  tgaa.algo.ant-path/proc-ant  \\n  (filter \#(<\\n             (shared/thresh) (tgaa.util.image/pix-value (tgaa.struct.ant/ant-local-min %) (shared/image-gry-ref)))\\n     (shared/canidates))))" "(defn testcoh [{\:keys a b} v]\\n  (print a b v))" "(defn testcoh [{\:keys [a b]} v]\\n  (print a b v))" "(testcoh {\:a \\"a\\" \:b \\"b\\"} \\"v\\")" "(tgaa.util.image/draw-paths (" "(defn reprocess-paths\\r\\n     \\"evaluation phase\: prune paths that threshold omits and reprocess all paths with final threshold\\"\\r\\n   (map \\r\\n     tgaa.algo.ant-path/proc-ant  \\r\\n     (filter \#(<\\r\\n                (shared/thresh) (tgaa.util.image/pix-value (tgaa.struct.ant/ant-local-min %) (shared/image-gry-ref)))\\r\\n        (shared/canidates))))" "(defn reprocess-paths []\\r\\n     \\"evaluation phase\: prune paths that threshold omits and reprocess all paths with final threshold\\"\\r\\n   (map \\r\\n     tgaa.algo.ant-path/proc-ant  \\r\\n     (filter \#(<\\r\\n                (shared/thresh) (tgaa.util.image/pix-value (tgaa.struct.ant/ant-local-min %) (shared/image-gry-ref)))\\r\\n        (shared/canidates))))" "(tgaa.util.image/draw-paths (reprocess-paths))" "(tgaa.util.image/draw-paths (reprocess-paths) \\"yellow\\" (shared/image-gry-ref) 2)" "(mikera.image.core/show (tgaa.util.image/draw-paths (reprocess-paths) \\"yellow\\" (shared/image-gry-ref) 2))" "(shared/eval-paths (reprocess-paths))" "(tgaa.util.image/show-eval-paths)" "(shared/eval-paths (reprocess-paths))" "(tgaa.util.image/show-eval-paths)" "(defn reprocess-paths []\\r\\n     \\"evaluation phase\: prune paths that threshold omits and reprocess all paths with final threshold\\"\\r\\n   (map \\r\\n     tgaa.algo.ant-path/proc-ant  \\r\\n     (filter \#(>\\r\\n                (shared/thresh) (tgaa.util.image/pix-value (tgaa.struct.ant/ant-local-min %) (shared/image-gry-ref)))\\r\\n        (shared/canidates))))" "(shared/eval-paths (reprocess-paths))" "(tgaa.util.image/show-eval-paths)" "(shared/init-trail-state)" "(phase/load-image)" " (phase/bootstrap)" "(phase/trapping)" "(phase/evaluation)" "(tgaa.util.image/show-eval-paths)" "(import 'java.awt.Color)" "(tgaa.util.image/show-eval-paths)" "(shared/init-trail-state)" "(phase/load-image)" " (phase/bootstrap)" "(phase/trapping)" "(phase/evaluation)" "(tgaa.util.image/show-eval-paths)" "(shared/init-trail-state)" "(phase/load-image)" " (phase/bootstrap)" "(phase/trapping)" "(tgaa.util.image/show-eval-paths)" "(phase/evaluation)" "(tgaa.util.image/show-eval-paths)" "(shared/init-trail-state)" "(phase/load-image)" " (phase/bootstrap)" "(phase/trapping)" "(phase/evaluation)" "(shared/init-trail-state)" "(phase/load-image)" "(phase/trapping)" "(phase/evaluation)" "(tgaa.util.image/anim-trail-paths)" "(shared/init-trail-state)" "(phase/load-image)" " (phase/bootstrap)" "(phase/trapping)" "(phase/evaluation)" "(tgaa.util.image/anim-trail-paths)" "(phase/evaluation)" "(tgaa.util.image/show-eval-paths)" " (shared/min-path-len)" "(filter \#(and \\r\\n                 (>\\r\\n                   (shared/thresh) (tgaa.util.image/pix-value (tgaa.struct.ant/ant-local-min %) (shared/image-gry-ref)))\\r\\n                 (> (tgaa.struct.ant/ant-path-length %) (shared/min-path-len)))\\r\\n              (shared/canidates))" "(shared/init-trail-state)" "(phase/load-image)" " (phase/bootstrap)" "(phase/trapping)" "(phase/evaluation)" "(tgaa.util.image/show-eval-paths)" "(tgaa.util.image/anim-trail-paths)" "(tgaa.util.image/show-cann-path)" "(shared/init-trail-state)" "(phase/load-image)" " (phase/bootstrap)" "(phase/trapping)" "(shared/init-trail-state)" "(phase/load-image)" " (phase/bootstrap)" "(phase/trapping)" "(phase/evaluation)" "(tgaa.util.image/show-eval-paths)" "(tgaa.util.image/show-cann-path)" "(tgaa.util.image/show-eval-paths)" "(phase/evaluation)" "(tgaa.util.image/show-eval-paths)" "(phase/evaluation)" "(tgaa.util.image/show-eval-paths)" "(tgaa.util.image/show-cann-path)" "(tgaa.util.image/show-eval-paths)" "(shared/init-trail-state)" "(phase/load-image)" " (phase/bootstrap)" "(phase/trapping)" "(phase/evaluation)" "(tgaa.util.image/show-eval-paths)" "(shared/init-trail-state)" "(phase/load-image)" "(phase/bootstrap)" "(phase/trapping)" "(phase/evaluation)" "(tgaa.util.image/show-eval-paths)" "(import 'java.awt.Color)" "(tgaa.util.image/show-eval-paths)" "(tgaa.util.image/draw-can-paths)" "(tgaa.util.image/show-cann-path)" "(shared/init-trail-state)" "(phase/load-image)" "(phase/bootstrap)" "(phase/trapping)" "(phase/evaluation)" "(tgaa.util.image/show-cann-path)" "(tgaa.util.image/show-eval-paths)" "(phase/evaluation)" "(tgaa.util.image/show-eval-paths)" "(phase/evaluation)" "(tgaa.util.image/show-eval-paths)" "tgaa.algo.ant-path" "(tgaa.util.image/show-val-end-pnts)" "(tgaa.util.image/show-eval-paths)" "(tgaa.util.image/show-val-end-pnts)" "(map \#(ant/ant-end-point %) (shared/eval-paths))" "(map \#(tgaa.struct.ant/ant-end-point %) (shared/eval-paths))" "(def t (map \#(tgaa.struct.ant/ant-end-point %) (shared/eval-paths)))" "(count t)" "(show-val-end-pnts)" "(tgaa.util.image/show-val-end-pnts)" "(count (shared/eval-paths))" "(tgaa.util.image/show-val-end-pnts)" "(mikera.image.core/show\\n(let [i (mikera.image.core/copy (shared/image-gry-ref))\\n      g (tgaa.util.image/build-graphic 1 \\"YELLOW\\" i)\\n      _ (tgaa.util.image/draw-ant-point [2 2] g)]\\n  i))" "(mikera.image.core/show\\n(let [i (mikera.image.core/copy (shared/image-gry-ref))\\n      _ (tgaa.util.image/draw-ant-end-pnts (shared/eval-paths) i)]\\n  i))" "(mikera.image.core/show\\n(let [i (mikera.image.core/copy (shared/image-gry-ref))\\n      g (tgaa.util.image/build-graphic 1 \\"YELLOW\\" i)\\n       _  (map \#(draw-ant-point % g) [[1 2][3 4][5 6]])]\\n  i))" "(mikera.image.core/show\\n(let [i (mikera.image.core/copy (shared/image-gry-ref))\\n      g (tgaa.util.image/build-graphic 1 \\"YELLOW\\" i)\\n       _  (map \#(tgaa.util.image/draw-ant-point % g) [[1 2][3 4][5 6]])]\\n  i))" "(mikera.image.core/show\\n(let [i (mikera.image.core/copy (shared/image-gry-ref))\\n      g (tgaa.util.image/build-graphic 1 \\"YELLOW\\" i)\\n       _  (tgaa.util.image/draw-ant-point [1 2] g) ]\\n  i))" "(mikera.image.core/show\\n(let [i (mikera.image.core/copy (shared/image-gry-ref))\\n      g (tgaa.util.image/build-graphic 1 \\"YELLOW\\" i)\\n        ]\\n  (tgaa.util.image/draw-ant-point [1 2] g)))" "(mikera.image.core/show\\n(let [i (mikera.image.core/copy (shared/image-gry-ref))\\n      g (tgaa.util.image/build-graphic 1 \\"YELLOW\\" i)\\n       _  (map \#(tgaa.util.image/draw-ant-point % g) [[1 2][3 4][5 6]])]\\n  i))" "(mikera.image.core/show\\n(let [i (mikera.image.core/copy (shared/image-gry-ref))\\n      g (tgaa.util.image/build-graphic 1 \\"YELLOW\\" i)\\n       _  (map \#(tgaa.util.image/draw-ant-point % (tgaa.util.image/build-graphic 1 \\"YELLOW\\" i)) [[1 2][3 4][5 6]])]\\n  i))" "(mikera.image.core/show\\n(let [i (mikera.image.core/copy (shared/image-gry-ref))\\n      g (doall (tgaa.util.image/build-graphic 1 \\"YELLOW\\" i))\\n       _  (map \#(tgaa.util.image/draw-ant-point % g) [[1 2][3 4][5 6]])]\\n  i))" "(mikera.image.core/show\\n(let [i (mikera.image.core/copy (shared/image-gry-ref))\\n      g (tgaa.util.image/build-graphic 1 \\"YELLOW\\" i)\\n       _  (map \#(tgaa.util.image/draw-ant-point % g) [[1 2][3 4][5 6]])]\\n  i))" "(tgaa.util.image/show-cann-path)" "(mikera.image.core/show\\n(let [i (mikera.image.core/copy (shared/image-gry-ref))\\n      g \#(tgaa.util.image/build-graphic 1 \\"YELLOW\\" i)\\n       _  (map \#(tgaa.util.image/draw-ant-point % g) [[1 2][3 4][5 6]])]\\n  i))" "(mikera.image.core/show\\n(let [i (mikera.image.core/copy (shared/image-gry-ref))\\n      g (tgaa.util.image/build-graphic 5 \\"YELLOW\\" i)\\n       _  (map \#(tgaa.util.image/draw-ant-point % g) [[1 2][3 4][5 6]])]\\n  i))" "(mikera.image.core/show\\n(let [i (mikera.image.core/copy (shared/image-gry-ref))\\n      g (tgaa.util.image/build-graphic 5 \\"YELLOW\\" i)\\n        ]\\n  (tgaa.util.image/draw-ant-point [1 2] g)))" "(mikera.image.core/show\\n(let [i (mikera.image.core/copy (shared/image-gry-ref))\\n      g (tgaa.util.image/build-graphic 5 \\"YELLOW\\" i)\\n       _  (tgaa.util.image/draw-ant-point [1 2] g) ]\\n  i))" "(mikera.image.core/show\\n(let [i (mikera.image.core/copy (shared/image-gry-ref))\\n      g (tgaa.util.image/build-graphic 5 \\"YELLOW\\" i)\\n       _  (tgaa.util.image/draw-ant-point [100 200] g) ]\\n  i))" "(mikera.image.core/show\\n(let [i (mikera.image.core/copy (shared/image-gry-ref))\\n      g (tgaa.util.image/build-graphic 5 \\"YELLOW\\" i)\\n       _  (tgaa.util.image/draw-ant-point % g) [100 200]]\\n  i))" "(mikera.image.core/show\\n(let [i (mikera.image.core/copy (shared/image-gry-ref))\\n      g (tgaa.util.image/build-graphic 5 \\"YELLOW\\" i)\\n       _  (tgaa.util.image/draw-ant-point % g) [[100 200]]]\\n  i))" "(mikera.image.core/show\\n(let [i (mikera.image.core/copy (shared/image-gry-ref))\\n      g (tgaa.util.image/build-graphic 5 \\"YELLOW\\" i)\\n       _  (map \#(tgaa.util.image/draw-ant-point % g) [[100 200]])]\\n  i))" "(mikera.image.core/show\\n(let [i (mikera.image.core/copy (shared/image-gry-ref))\\n      g (tgaa.util.image/build-graphic 5 \\"YELLOW\\" i)\\n       _  (map (fn [x] (tgaa.util.image/draw-ant-point x g)) [[100 200]])]\\n  i))" "(mikera.image.core/show\\n(let [i (mikera.image.core/copy (shared/image-gry-ref))\\n      g (tgaa.util.image/build-graphic 5 \\"YELLOW\\" i)\\n       g  (map (fn [x] (tgaa.util.image/draw-ant-point x g)) [100 200])]\\n  i))" "(mikera.image.core/show\\n(let [i (mikera.image.core/copy (shared/image-gry-ref))\\n      _ (let [g (tgaa.util.image/build-graphic 5 \\"YELLOW\\" i)]\\n          (map (fn [x] (tgaa.util.image/draw-ant-point x g)) [100 200]))]\\n  i))" "(mikera.image.core/show\\n(let [i (mikera.image.core/copy (shared/image-gry-ref))\\n      g (tgaa.util.image/build-graphic 5 \\"YELLOW\\" i)]\\n       (doall (map (fn [x] (tgaa.util.image/draw-ant-point x g)) [[100 200]])\\n  i)))" "(mikera.image.core/show\\n(let [i (mikera.image.core/copy (shared/image-gry-ref))\\n      g (tgaa.util.image/build-graphic 5 \\"YELLOW\\" i)]\\n       (doall (map (fn [x] (tgaa.util.image/draw-ant-point x g)) [[100 200]]))\\n  i))" "(tgaa.util.image/show-val-end-pnts)" "(tgaa.util.image/show-val-start-pnts)" "(show-val-boundry-pnt)" "(show-val-boundry-pnts)" "(show-val-boundry-pnts )" "(test)" "(testt)" "(shared/init-trail-state)" "(phase/load-image)" "(phase/bootstrap)" "(phase/trapping)" "(phase/evaluation)" "(tgaa.util.image/show-val-start-pnts)" "(import 'java.awt.Color)" "(tgaa.util.image/show-val-start-pnts)" "(tgaa.util.image/show-cann-path)" "(shared/init-trail-state)" "(phase/load-image)" "(phase/bootstrap)" "(phase/trapping)" "(tgaa.util.image/show-cann-path)" "(shared/thresh)" "(shared/init-trail-state)" "(phase/load-image)" "(phase/bootstrap)" "(phase/trapping)" "(tgaa.util.image/show-cann-path)" "(phase/evaluation)" "(tgaa.util.image/show-val-start-pnts)" "(tgaa.util.image/show-val-end-pnts)" "(tgaa.util.image/show-eval-paths)" "(tgaa.util.image/show-val-boundry-pnts)" "(shared/init-trail-state)" "(phase/load-image)" "(phase/bootstrap)" "(phase/trapping)" "(tgaa.util.image/show-cann-path)" "(phase/evaluation)" "(tgaa.util.image/show-val-boundry-pnts)" "(tgaa.util.image/show-cann-path)" "(tgaa.util.image/show-eval-paths)" "(tgaa.util.image/show-val-boundry-pnts)" "(tgaa.util.image/show-eval-paths)" "(shared/init-trail-state)" "(phase/load-image)" "(phase/bootstrap)" "(phase/trapping)" "(phase/evaluation)" "(tgaa.util.image/show-val-boundry-pnts)" "(tgaa.util.image/show-eval-paths)" "(shared/init-trail-state)" "(phase/load-image)" "(phase/bootstrap)" "(phase/trapping)" "(phase/evaluation)" "(tgaa.util.image/show-val-boundry-pnts)" "(tgaa.util.image/show-cann-path)" "(tgaa.util.image/show-eval-paths" "(tgaa.util.image/show-eval-paths)" "(tgaa.util.image/show-val-boundry-pnts)" "(shared/init-trail-state)" "(phase/load-image)" "(phase/bootstrap)" "(phase/trapping)" "(phase/evaluation)" "(tgaa.util.image/show-val-boundry-pnts)" "(tgaa.util.image/show-eval-paths)" "(tgaa.util.image/show-val-boundry-pnts)" "(tgaa.util.image/show-eval-paths)" "(shared/init-trail-state)" "(phase/load-image)" "(phase/bootstrap)" "(phase/trapping)" " (phase/evaluation)" "(vis/show-eval-paths)" "(import 'java.awt.Color)" "(vis/show-eval-paths)" "(viz/show-val-boundry-pnts)" "(vis/show-eval-paths)" "(viz/animate-algo)" "(vis/show-eval-paths)" "(viz/animate-algo)" "(vis/show-eval-paths)" "(viz/animate-algo)" "(vis/show-eval-paths)" "(viz/animate-algo)" "(vis/show-eval-paths)" "(viz/animate-algo)" "(vis/show-eval-paths)" "(process-image)" "(viz/animate-algo)" "(import 'java.awt.Color)" "(viz/animate-algo)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(phase/trapping)" "(phase/evaluation)" "(viz/animate-algo)" "(vis/show-eval-paths)" "(viz/show-eval-paths)" "(viz/draw-boundary)" "(viz/show-val-boundry-pnts)" "(viz/draw-boundary)" "(vis/show-eval-paths)" "(viz/show-eval-paths)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(phase/trapping)" "(phase/evaluation)" "(viz/animate-algo)" "(first (shared/canidates))" "(map \:dir (shared/canidates))" "(filter \#(and (\= (first %) -1) (\= (second %) -1)) (map \:dir (shared/canidates)))" "(count (filter \#(and (\= (first %) -1) (\= (second %) -1)) (map \:dir (shared/canidates))))" "(count (filter \#(and (\= (first %) 0) (\= (second %) -1)) (map \:dir (shared/canidates))))" "(count (filter \#(and (\= (first %) 1) (\= (second %) 1)) (map \:dir (shared/canidates))))" "(count (filter \#(and (\= (first %) 1) (\= (second %) 0)) (map \:dir (shared/canidates))))" "(count (filter \#(and (\= (first %) 0) (\= (second %) 1)) (map \:dir (shared/canidates))))" "(count (filter \#(and (\= (first %) -1) (\= (second %) 1)) (map \:dir (shared/canidates))))" "(count (filter \#(and (\= (first %) -1) (\= (second %) 0)) (map \:dir (shared/canidates))))" "(defn rand-ant-dir \\r\\n  \\"Creates safe random direction at 45 deg increments with starting point x y\\"\\r\\n  [point] \\r\\n  (let [dir (\:dir-opt (first \\r\\n                        (filter \#(let [lx (first (\:last %))\\r\\n                                       ly (second (\:last %))]\\r\\n                                   (and (>\= lx 0) \\r\\n                                        (>\= ly 0) \\r\\n                                        (< lx (image/image-width (shared/image-gry-ref))) \\r\\n                                        (< ly (image/image-height (shared/image-gry-ref)))))\\r\\n                                (map (fn [d] {\:last [(full-path-last-point (first point)(first d)) \\r\\n                                                     (full-path-last-point (second point) (second d))] \\r\\n                                              \:dir-opt d})  (shuffle ant/dir-opt)))))]\\r\\n    (if (nil? dir)\\r\\n      (-> (Exception. \\"No Direction is Possible. Please Check configuration\\") throw)\\r\\n      dir)))" "(tgaa.struct.ant/rand-ant-dir [1 1])" "(tgaa.algo.ant-path/rand-ant-dir [1 1])" "(tgaa.algo.ant-path/rand-ant-dir [200 200])" "(take-nth 100 (tgaa.algo.ant-path/rand-ant-dir [200 200]))" "(repeat 100 (tgaa.algo.ant-path/rand-ant-dir [200 200]))" "(repeatedly 100 (tgaa.algo.ant-path/rand-ant-dir [200 200]))" "(repeatedly 100 \#(tgaa.algo.ant-path/rand-ant-dir [200 200]))" "(count (filter \#(and (\= (first %) -1) (\= (second %) 0)) (repeatedly 100 \#(tgaa.algo.ant-path/rand-ant-dir [200 200]))))" "(count (filter \#(and (\= (first %) -1) (\= (second %) 0)) (repeatedly 1000 \#(tgaa.algo.ant-path/rand-ant-dir [200 200]))))" "(count (filter \#(and (\= (first %) -1) (\= (second %) 0)) (repeatedly 10000 \#(tgaa.algo.ant-path/rand-ant-dir [200 200]))))" "(/ 10000 8)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(shared/min-cont-thresh)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(phase/trapping)" "(phase/bootstrap)" "(viz/animate-algo)" "(shared/thresh)" "(viz/animate-algo)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(phase/trapping)" "(phase/bootstrap)" "(viz/animate-algo)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/trapping)" "(phase/evaluation)" "(viz/animate-algo)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(phase/trapping)" "(phase/evaluation)" "(viz/animate-algo)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(case 1 1 0 1)" "(case true 1 false 0)" "(case true 1 false 0 \:else 3)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" " (phase/load-image)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(phase/trapping)" "(phase/evaluation)" "(viz/animate-algo)" "(shared/init-trail-state)" " (phase/load-image)" "(shared/init-trail-state)" " (phase/load-image)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(when false (print \\"test\\"))" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(phase/trapping)" "(phase/evaluation)" "(viz/animate-algo)" "(import 'java.awt.Color)" "(viz/animate-algo)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(phase/trapping)" "(phase/evaluation)" "(viz/animate-algo)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(phase/trapping)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(shared/thresh)" "(phase/trapping)" "(count (shared/canidates))" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(phase/trapping)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(phase/trapping)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(phase/trapping)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(phase/trapping)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(> 1 nil)" "(shared/init-trail-state)" " (phase/load-image)" "(shared/thresh)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" " (phase/load-image)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(tgaa.struct.ant/status-dead)" "tgaa.struct.ant/status-dead" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(shared/thresh)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(shared/thresh)" "(phase/trapping)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(phase/trapping)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(phase/trapping)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(phase/trapping)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(phase/trapping)" "(phase/evaluation)" "(viz/animate-algo)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(phase/trapping)" "(phase/evaluation)" "(viz/animate-algo)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(phase/trapping)" "(phase/evaluation)" "(viz/animate-algo)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(phase/trapping)" "(phase/evaluation)" "(viz/animate-algo)"]
eclipse.preferences.version=1
