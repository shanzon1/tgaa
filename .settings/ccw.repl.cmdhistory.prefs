cmdhistory=["(tgaa.struct.shared/hull)" "(tgaa.algo.phases/analysis-hull)" "(shared/hull)" "(tgaa.util.image/draw-final-boundary)" "(tgaa.util.image/animate-algo)" "(process-image)" "(tgaa.util.image/animate-algo)" "(tgaa.util.image/draw-final-boundary)" "(tgaa.struct.shared/hull)" "(tgaa.struct.shared/get-num-trails)" "(count (tgaa.algo.analysis/convex-hull (tgaa.struct.shared/canidates 25)))" "(process-image)" "(tgaa.util.image/animate-algo)" "(tgaa.algo.phases/analysis-hull)" "(count (tgaa.algo.analysis/convex-hull (tgaa.struct.shared/canidates 25)))" "(tgaa.util.image/animate-algo)" "(process-image)" "(tgaa.util.image/animate-algo)" "(process-image)" "(tgaa.algo.analysis/convex-hull)" "(tgaa.struct.shared/canidates 25)" "(count \\n  (tgaa.struct.shared/canidates 25))" "(process-image)" "(tgaa.util.shared/hull (tgaa.algo.analysis/convex-hull (tgaa.util./canidates (tgaa.util./get-num-trails))))" "(tgaa.util.shared/hull (tgaa.algo.analysis/convex-hull (tgaa.util.shared/canidates (tgaa.util.shared/get-num-trails))))" "(tgaa.struct.shared/hull (tgaa.algo.analysis/convex-hull (tgaa.struct.shared/canidates (tgaa.struct.shared/get-num-trails))))" "(tgaa.util.image/animate-algo)" "(import 'java.awt.Color)" "(tgaa.util.image/animate-algo)" "(process-image)" "(tgaa.struct.shared/hull (tgaa.algo.analysis/convex-hull (tgaa.struct.shared/canidates (tgaa.struct.shared/get-num-trails))))" "(tgaa.util.image/animate-algo)" "(show-cann-path 1)" "(tgaa.util.image/show-cann-path i)" "(tgaa.util.image/show-cann-path 1)" "(tgaa.util.image/show-cann-path 2\\n                                )" "(tgaa.util.image/show-cann-path 3\\n                                \\n                                )" "(tgaa.util.image/show-cann-path 4\\n                                \\n                                )" "(tgaa.util.image/show-cann-path 5\\n                                \\n                                )" "(tgaa.util.image/show-cann-path 6\\n                                \\n                                )" "(tgaa.util.image/show-cann-path 7\\n                                \\n                                )" "(tgaa.util.image/show-cann-path 8\\n                                \\n                                )" "(tgaa.util.image/show-cann-path 9\\n                                \\n                                )" "(tgaa.util.image/show-cann-path 10\\n                                \\n                                \\n                                )" "(tgaa.util.image/show-cann-path 11)" "(tgaa.util.image/show-cann-path 12" "(tgaa.util.image/show-cann-path 12)" "(tgaa.util.image/show-cann-path 13)" "(tgaa.util.image/show-cann-path 14" "(tgaa.util.image/show-cann-path 14)" "(tgaa.util.image/show-cann-path 15)" "(tgaa.util.image/show-cann-path 16)" "(tgaa.util.image/show-cann-path 17\\n                                )" "(tgaa.struct.shared/config)" "(process-image)" "(tgaa.util.image/animate-algo)" "(import 'java.awt.Color)" "(tgaa.util.image/animate-algo)" "(process-image)" "(tgaa.util.image/animate-algo)" "(process-image)" "(tgaa.util.image/animate-algo)" "(process-image)" "(tgaa.util.image/animate-algo)" "(process-image)" "(tgaa.util.image/animate-algo)" "(process-image)" "(tgaa.util.image/animate-algo)" "(process-image)" "(tgaa.util.image/animate-algo)" "(process-image)" "(tgaa.util.image/animate-algo)" "(process-image)" "(tgaa.util.image/animate-algo)" "(tgaa.struct.shared/trial-logs)" "(process-image)" "(tgaa.struct.shared/trial-logs)" "(tgaa.util.image/animate-algo)" "(process-image)" "(tgaa.util.image/animate-algo)" "(process-image)" "(tgaa.util.image/animate-algo)" "(process-image)" "(tgaa.util.image/animate-algo)" "(process-image)" "(tgaa.util.image/animate-algo)" "(process-image)" "(tgaa.util.image/animate-algo)" "(tgaa.struct.shared/trial-logs)" "(process-image)" "(tgaa.util.image/animate-algo)" "(process-image)" "(tgaa.util.image/animate-algo)" "(tgaa.struct.shared/trial-logs)" "(process-image)" "(tgaa.struct.shared/trial-logs)" "(process-image)" "(tgaa.struct.shared/trial-logs)" "(tgaa.util.image/animate-algo)" "(process-image)" "(tgaa.util.image/animate-algo)" "(process-image)" "(tgaa.util.image/animate-algo)" "(process-image)" "(tgaa.util.image/animate-algo)" "(tgaa.struct.shared/trial-logs)" "(process-image)" "(tgaa.util.image/animate-algo)" "(process-image)" "(tgaa.util.image/animate-algo)" "(tgaa.struct.shared/trial-logs)" "(process-image)" "(tgaa.util.image/animate-algo)" "(process-image)" "(tgaa.util.image/animate-algo)" "(process-image)" "(tgaa.util.image/animate-algo)" "(phase/analysis-hull)" "(tgaa.util.image/draw-final-boundary)" "(tgaa.struct.shared/trial-logs)" "(process-image)" "(tgaa.util.image/animate-algo)" "(tgaa.struct.shared/trial-logs)" "(process-image)" "(tgaa.util.image/animate-algo)" "(process-image)" "(tgaa.util.image/animate-algo)" "(process-image)" "(tgaa.util.image/animate-algo)" "(process-image)" "(tgaa.util.image/animate-algo)" "(process-image)" "(tgaa.util.image/animate-algo)" "(process-image)" "(tgaa.util.image/animate-algo)" "(process-image)" "(tgaa.util.image/animate-algo)" "(process-image)" "(tgaa.util.image/animate-algo)" "(process-image)" "(tgaa.util.image/animate-algo)" "(process-image)" "(tgaa.util.image/animate-algo)" "(process-image)" "(tgaa.util.image/animate-algo)" "(process-image)" "(tgaa.util.image/animate-algo)" "(process-image)" "(tgaa.util.image/animate-algo)" "(process-image)" "(tgaa.util.image/animate-algo)" "(process-image)" "(tgaa.util.image/animate-algo)" "(process-image)" "(tgaa.util.image/animate-algo)" "(process-image)" "(tgaa.util.image/animate-algo)" "(process-image)" "(tgaa.util.image/animate-algo)" "(process-image)" "(tgaa.util.image/animate-algo)" "(process-image)" "(tgaa.util.image/animate-algo)" "(process-image)" "(tgaa.util.image/animate-algo)" "(tgaa.struct.shared/trial-logs)" "(process-image)" "(tgaa.util.image/animate-algo)" "(process-image)" "(tgaa.util.image/animate-algo)" "(process-image)" "(tgaa.util.image/animate-algo)" "(process-image)" "(tgaa.util.image/animate-algo)" "(tgaa.util.image/draw-can-paths)" "(tgaa.util.image/show-cann-path)" "(process-image)" "(tgaa.util.image/show-cann-path)" "(tgaa.util.image/animate-algo)" "(tgaa.util.image/show-cann-path)" "(process-image)" "(tgaa.util.image/show-cann-path)" "(process-image)" "(tgaa.util.image/show-cann-path)" "(process-image)" "(tgaa.util.image/show-cann-path)" "(process-image)" "(tgaa.util.image/show-cann-path)" "(let [info (tgaa.struct.shared/trial-info)] info)" "(let [info (tgaa.struct.shared/trial-logs)] info)" "(let [info (tgaa.struct.shared/trial-logs)]\\n      {\:total-paths (+ (map \:path-count info))\\n      \:total-cand-paths (+ (map \:cand-num  info))\\n      \:total-cand-paths (+ (map \:esc-num  info))})" "(let [info (tgaa.struct.shared/trial-logs)]\\n      {\:total-paths (+ (map \:path-count info))\\n      \:total-cand-paths (+ (map \:cand-num  info))\\n      \:total-esc-paths (+ (map \:esc-num  info))})" "(let [info (tgaa.struct.shared/trial-logs)]\\n      {\:total-paths (apply + (map \:path-count info))\\n      \:total-cand-paths (apply + (map \:cand-num  info))\\n      \:total-esc-paths (apply + (map \:esc-num  info))})" "(let [info (tgaa.struct.shared/trial-logs)]\\n      {\:total-paths (apply + (map \:path-count info))})" "(let [info (tgaa.struct.shared/trial-logs)]\\n      {\:total-paths (map \:path-count info)})" "(let [info (tgaa.struct.shared/trial-logs)]\\n      {\:total-paths (map \#(\:path-count (second %)) info)})" "(let [info (tgaa.struct.shared/trial-logs)]\\n      {\:total-paths (+ (map \#(\:path-count (second %)) info))\\n       })" "(let [info (tgaa.struct.shared/trial-logs)]\\n      {\:total-paths (apply + (map \#(\:path-count (second %)) info)) })" "(let [info (tgaa.struct.shared/trial-logs)]\\n      {\:total-paths (apply + (map \#(\:path-count (second %)) info))\\n       \:total-cand-paths (apply + (map \#(\:cand-num (second %)) info))\\n       \:total-esc-paths (apply + (map \#(\:esc-num (second %)) info))})" "(time)" "((.getTime (java.util.Date.))" "(.getTime (java.util.Date.))" "(let [info (tgaa.struct.shared/trial-logs)]\\n      {\:total-paths (apply + (map \#(\:path-count (second %)) info))\\n       \:total-cand-paths (apply + (map \#(\:cand-num (second %)) info))\\n       \:total-esc-paths (apply + (map \#(\:esc-num (second %)) info))\\n       \:run-time (tgaa.struct.shared/run-time)})" "(process-image)" "(let [info (tgaa.struct.shared/trial-logs)]\\n      {\:total-paths (apply + (map \#(\:path-count (second %)) info))\\n       \:total-cand-paths (apply + (map \#(\:cand-num (second %)) info))\\n       \:total-esc-paths (apply + (map \#(\:esc-num (second %)) info))\\n       \:run-time (tgaa.struct.shared/run-time)})" "(defn algo-metrics []\\n  (let [info (tgaa.struct.shared/trial-logs)]\\n        {\:total-paths (apply + (map \#(\:path-count (second %)) info))\\n         \:total-cand-paths (apply + (map \#(\:cand-num (second %)) info))\\n         \:total-esc-paths (apply + (map \#(\:esc-num (second %)) info))\\n         \:run-time (tgaa.struct.shared/run-time)}))" "(defn algo-metrics []\\n  (let [info (tgaa.struct.shared/trial-logs)]\\n        {\:trial-num (shared/trial-num)\\n         \:num-ant (shared/num-ants)\\n         \:min-path-len (shared/min-path-len)\\n         \:total-paths (apply + (map \#(\:path-count (second %)) info))\\n         \:total-cand-paths (apply + (map \#(\:cand-num (second %)) info))\\n         \:total-esc-paths (apply + (map \#(\:esc-num (second %)) info))\\n         \:run-time (tgaa.struct.shared/run-time)}))" "(algo-metrics)" "(defn algo-metrics []\\n  (let [info (tgaa.struct.shared/trial-logs)]\\n        {\:trial-num (shared/trial-num)\\n         \:num-ant (shared/num-ants)\\n         \:min-path-len (shared/min-path-len)\\n         \:num-trails (shared/get-num-trails)\\n         \:total-paths (apply + (map \#(\:path-count (second %)) info))\\n         \:total-cand-paths (apply + (map \#(\:cand-num (second %)) info))\\n         \:total-esc-paths (apply + (map \#(\:esc-num (second %)) info))\\n         \:run-time (tgaa.struct.shared/run-time)}))" "(algo-metrics)" "(defn algo-metrics []\\n  (let [info (tgaa.struct.shared/trial-logs)]\\n        {\:trial-num (shared/trial-num)\\n         \:num-ant (shared/num-ants)\\n         \:min-path-len (shared/min-path-len)\\n         \:num-trails (shared/get-num-trails)\\n         \:max-path-len (shared/max-path-length)\\n         \:total-paths (apply + (map \#(\:path-count (second %)) info))\\n         \:total-cand-paths (apply + (map \#(\:cand-num (second %)) info))\\n         \:total-esc-paths (apply + (map \#(\:esc-num (second %)) info))\\n         \:run-time (tgaa.struct.shared/run-time)}))" "(algo-metrics)" "(defn algo-metrics []\\n  (let [info (tgaa.struct.shared/trial-logs)]\\n        {\:trial-num (shared/trial-num)\\n         \:num-ant-trial (shared/num-ants)\\n         \:min-path-len (shared/min-path-len)\\n         \:num-trails (shared/get-num-trails)\\n         \:max-path-len (shared/max-path-length)\\n         \:total-paths (apply + (map \#(\:path-count (second %)) info))\\n         \:total-cand-paths (apply + (map \#(\:cand-num (second %)) info))\\n         \:total-esc-paths (apply + (map \#(\:esc-num (second %)) info))\\n         \:run-time (tgaa.struct.shared/run-time)}))" "(algo-metrics)" "(tgaa.struct.shared/trial-logs)" "(defn algo-metrics []\\n  (let [info (tgaa.struct.shared/trial-logs)]\\n        {\:trial-num (shared/trial-num)\\n         \:num-ant-trial (shared/num-ants)\\n         \:min-path-len (shared/min-path-len)\\n         \:num-trails (shared/get-num-trails)\\n         \:max-path-len (shared/max-path-length)\\n         \:total-paths (apply + (map \#(\:path-count (second %)) info))\\n         \:total-cand-paths (apply + (map \#(\:cand-num (second %)) info))\\n         \:total-esc-paths (apply + (map \#(\:esc-num (second %)) info))\\n         \:run-time (tgaa.struct.shared/run-time)\\n         \:final (\:thresh(last info))}))" "(algo-metrics)" "(defn algo-metrics []\\n  (let [info (tgaa.struct.shared/trial-logs)]\\n        {\:trial-num (shared/trial-num)\\n         \:num-ant-trial (shared/num-ants)\\n         \:min-path-len (shared/min-path-len)\\n         \:num-trails (shared/get-num-trails)\\n         \:max-path-len (shared/max-path-length)\\n         \:total-paths (apply + (map \#(\:path-count (second %)) info))\\n         \:total-cand-paths (apply + (map \#(\:cand-num (second %)) info))\\n         \:total-esc-paths (apply + (map \#(\:esc-num (second %)) info))\\n         \:run-time (tgaa.struct.shared/run-time)\\n         \:final-thes (\:thresh(last info))}))" "(tgaa.struct.shared/trial-logs)<type clojure code here>" "(tgaa.struct.shared/trial-logs)" "(defn algo-metrics []\\n  (let [info (tgaa.struct.shared/trial-logs)]\\n        {\:trial-num (shared/trial-num)\\n         \:num-ant-trial (shared/num-ants)\\n         \:min-path-len (shared/min-path-len)\\n         \:num-trails (shared/get-num-trails)\\n         \:max-path-len (shared/max-path-length)\\n         \:total-paths (apply + (map \#(\:path-count (second %)) info))\\n         \:total-cand-paths (apply + (map \#(\:cand-num (second %)) info))\\n         \:total-esc-paths (apply + (map \#(\:esc-num (second %)) info))\\n         \:run-time (tgaa.struct.shared/run-time)\\n         \:final-thresh (last info)}))" "(tgaa.struct.shared/trial-logs)" "(algo-metrics)" "(defn algo-metrics []\\n  (let [info (tgaa.struct.shared/trial-logs)]\\n        {\:trial-num (shared/trial-num)\\n         \:num-ant-trial (shared/num-ants)\\n         \:min-path-len (shared/min-path-len)\\n         \:num-trails (shared/get-num-trails)\\n         \:max-path-len (shared/max-path-length)\\n         \:total-paths (apply + (map \#(\:path-count (second %)) info))\\n         \:total-cand-paths (apply + (map \#(\:cand-num (second %)) info))\\n         \:total-esc-paths (apply + (map \#(\:esc-num (second %)) info))\\n         \:run-time (tgaa.struct.shared/run-time)\\n         \:final-thresh (\:thresh (second (last info)))}))" "(algo-metrics)" "(defn algo-metrics []\\n  (let [info (tgaa.struct.shared/trial-logs)]\\n        {\:trial-num (shared/trial-num)\\n         \:num-ant-trial (shared/num-ants)\\n         \:min-path-len (shared/min-path-len)\\n         \:max-path-len (shared/max-path-length)\\n         \:total-paths (apply + (map \#(\:path-count (second %)) info))\\n         \:total-cand-paths (apply + (map \#(\:cand-num (second %)) info))\\n         \:total-esc-paths (apply + (map \#(\:esc-num (second %)) info))\\n         \:run-time (tgaa.struct.shared/run-time)\\n         \:final-thresh (\:thresh (second (last info)))}))" "(algo-metrics)" "(process-image)" "(algo-metrics)" "(process-image)" "(algo-metrics)" "(process-image)" "(algo-metrics)" "(tgaa.util.image/show-cann-path)" "(process-image)" "(tgaa.util.image/show-cann-path)" "(process-image)" "(tgaa.util.image/show-cann-path)" "(process-image)" "(tgaa.util.image/show-cann-path)" "(process-image)" "(tgaa.util.image/show-cann-path)" "(process-image)" "(tgaa.util.image/show-cann-path)" "(def rt \\n  (. Runtime getRuntime))" "rt" "\\r\\n6\\r\\ndown vote\\r\\naccepted\\r\\n(import '(javax.swing JFileChooser)\\r\\n        '(javax.swing.filechooser FileNameExtensionFilter))\\r\\n(defn tlt-get-file [ ]\\r\\n       (let [ extFilter (FileNameExtensionFilter. \\"Text File\\" (into-array  [\\"txt\\"]))\\r\\n              filechooser (JFileChooser. \\"C\:/\\")\\r\\n              dummy (.setFileFilter filechooser extFilter)\\r\\n              retval (.showOpenDialog filechooser nil) ]\\r\\n          (if (\= retval JFileChooser/APPROVE_OPTION)\\r\\n             (do \\r\\n                (println (.getSelectedFile filechooser))\\r\\n                (.getSelectedFile filechooser))\\r\\n              \\"\\")))" "(tlt-get-file)" "(let [rt  (. Runtime getRuntime)\\n      quality 1\\n      size 1\\n      outpath \\"C\:\\\\\\\\Users\\\\\\\\erudi\\\\\\\\Desktop\\\\\\\\DevIDE\\\\\\\\counterclockwise-0.34.0.STABLE001\\\\\\\\workspace\\\\\\\\tgaa06172018\\"\\n      input \\"C\:\\\\\\\\Users\\\\\\\\erudi\\\\\\\\OneDrive\\\\\\\\Activity Organizer\\\\\\\\Projects\\\\\\\\Active\\\\\\\\TAA Research\\\\\\\\Thesis\\\\\\\\images\\\\\\\\unprocessed\\\\\\\\1\\\\\\\\1\\\\\\\\1_1_1.IMA\\"\\n      cmd (str \\"dcm2jpg \\" \\"-q \\"  quality  \\" -z \\" size outpath input)\\n      (. (. Runtime getRuntime) exec cmd)])" "(let [quality 1\\n      size 1\\n      outpath \\"C\:\\\\\\\\Users\\\\\\\\erudi\\\\\\\\Desktop\\\\\\\\DevIDE\\\\\\\\counterclockwise-0.34.0.STABLE001\\\\\\\\workspace\\\\\\\\tgaa06172018\\"\\n      input \\"C\:\\\\\\\\Users\\\\\\\\erudi\\\\\\\\OneDrive\\\\\\\\Activity Organizer\\\\\\\\Projects\\\\\\\\Active\\\\\\\\TAA Research\\\\\\\\Thesis\\\\\\\\images\\\\\\\\unprocessed\\\\\\\\1\\\\\\\\1\\\\\\\\1_1_1.IMA\\"\\n      cmd (str \\"dcm2jpg \\" \\"-q \\"  quality  \\" -z \\" size outpath input)\\n      _ (. (. Runtime getRuntime) exec cmd)])" "(let [quality 1\\n      size 1\\n      outpath \\"C\:\\\\\\\\Users\\\\\\\\erudi\\\\\\\\Desktop\\\\\\\\DevIDE\\\\\\\\counterclockwise-0.34.0.STABLE001\\\\\\\\workspace\\\\\\\\tgaa06172018\\"\\n      input \\"C\:\\\\\\\\Users\\\\\\\\erudi\\\\\\\\OneDrive\\\\\\\\Activity Organizer\\\\\\\\Projects\\\\\\\\Active\\\\\\\\TAA Research\\\\\\\\Thesis\\\\\\\\images\\\\\\\\unprocessed\\\\\\\\1\\\\\\\\1\\\\\\\\1_1_1.IMA\\"\\n      cmd (str \\"dcm2jpg \\" \\"-q \\"  quality  \\" -z \\" size outpath input)\\n      _ (print cmd)\\n      \#_ (. (. Runtime getRuntime) exec cmd)])" "(let [quality 1\\n      size 1\\n      outpath \\"C\:\\\\\\\\Users\\\\\\\\erudi\\\\\\\\Desktop\\\\\\\\DevIDE\\\\\\\\counterclockwise-0.34.0.STABLE001\\\\\\\\workspace\\\\\\\\tgaa06172018\\"\\n      input \\"C\:\\\\\\\\Users\\\\\\\\erudi\\\\\\\\OneDrive\\\\\\\\Activity Organizer\\\\\\\\Projects\\\\\\\\Active\\\\\\\\TAA Research\\\\\\\\Thesis\\\\\\\\images\\\\\\\\unprocessed\\\\\\\\1\\\\\\\\1\\\\\\\\1_1_1.IMA\\"\\n      cmd (str \\"dcm2jpg \\" \\"-q \\"  quality  \\" -z \\" size \\" \\" outpath \\" \\" input)\\n      \\n      _ (print cmd)\\n      \#_ (. (. Runtime getRuntime) exec cmd)])" "(let [quality 1\\n      size 1\\n      outpath \\"C\:\\\\\\\\Users\\\\\\\\erudi\\\\\\\\Desktop\\\\\\\\DevIDE\\\\\\\\counterclockwise-0.34.0.STABLE001\\\\\\\\workspace\\\\\\\\tgaa06172018\\"\\n      input \\"C\:\\\\\\\\Users\\\\\\\\erudi\\\\\\\\OneDrive\\\\\\\\Activity Organizer\\\\\\\\Projects\\\\\\\\Active\\\\\\\\TAA Research\\\\\\\\Thesis\\\\\\\\images\\\\\\\\unprocessed\\\\\\\\1\\\\\\\\1\\\\\\\\1_1_1.IMA\\"\\n      cmd (str \\"dcm2jpg \\" \\"-q \\"  quality  \\" -z \\" size \\" \\" outpath \\" \\" input)\\n      \\n      _ (print cmd)\\n      _ (. (. Runtime getRuntime) exec cmd)])" "(process-image)" "(shared/init-trail-state)" "(phase/load-image)" " (shared/time-start)" "(phase/bootstrap)" "(shared/image-ref\\n  )" "((tgaa.util.filters/grayscale)(shared/image-ref))" "(phase/load-image)" "mikera.image.core/show" "(mikera.image.core/show (tgaa.struct.shared/image-ref))" "(print \\"test\\")" "(defmacro hello-apple\\n  \\"\\"\\n  [x]\\n  `(print ~x))" "(hello-apple \\"test\\")" "(defmacro hello-apple\\n  \\"\\"\\n  [company]\\n  `(fn [comment](println ~company x)))" "((hello-apple \\"Apple inc.\\") \\"clojure\!\\")" "\\n(hello-apple \\"Apple inc.\\")" "(hello-apple)" "(hello-apple 1\\n             )" "(defmacro hello-apple2\\n  \\"\\"\\n  [company]\\n  `(fn [comment](println ~company x)))" "(hello-apple 2\\n             \\n             )" "(hello-apple '2)" "(hello-apple `2)" "(hello-apple '2)" "(defmacro hello-apple2\\r\\n     \\"\\"\\r\\n     [company]\\r\\n     `(fn [x](println ~company x)))" "(hello-apple2 \\"Apple inc\\")" "(defmacro hello-apple\\r\\n     \\"\\"\\r\\n     [company]\\r\\n     `(println ~company x))" "(hello-apple \\"hello\\")" "(defmacro hello-apple\\r\\n     \\"\\"\\r\\n     [company]\\r\\n     `(println ~company ))" "(hello-apple \\"hello\\")" "(defmacro hello-apple\\r\\n     \\"\\"\\r\\n     [company]\\r\\n     `(fn [] (println ~company )))" "(defmacro hello-apple\\r\\n     \\"\\"\\r\\n     [company]\\r\\n     `(fn [] \\n        (println ~company )))" "(hello-apple)" "(hello-apple \\"test\\")" "((hello-apple \\"test\\"))" "(defmacro hello-apple\\r\\n     \\"\\"\\r\\n     [company]\\r\\n     `(fn [x] \\n        (println ~company x)))" "((hello-apple \\"test\\") 1)" "(defmacro hello-apple\\r\\n     \\"\\"\\r\\n     [company]\\r\\n     `(fn [~x] \\n        (println ~company ~x)))" "(defmacro hello-apple\\r\\n     \\"\\"\\r\\n     [company]\\r\\n     `(fn [x] \\n        (println ~company ~x)))" "(defmacro hello-apple\\r\\n     \\"\\"\\r\\n     [func-name message]\\r\\n     `(~funct-name \\n        (println ~message)))" "(defmacro hello-apple\\r\\n     \\"\\"\\r\\n     [func-name message]\\r\\n     `(~func-name \\n        (println ~message)))" "(defmacro message-to-apple\\r\\n     \\"\\"\\r\\n     [func-name message]\\r\\n     `(~func-name \\n        (println ~message)))" "(message-to-apple apple \\"Hello\!\\")" "(message-to-apple 'apple \\"Hello\!\\")" "(defmacro message-to-apple\\r\\n     \\"\\"\\r\\n     [func-name message]\\r\\n     `(defn ~func-name []\\n        (println ~message)))" "(message-to-apple 'test-apple \\"yep\!\\")" "(macroexpand `message-to-apple)" "(macroexpand 'message-to-apple)" "(macroexpand-1 'message-to-apple)" "(macroexpand '(defmacro message-to-apple\\r\\n     \\"\\"\\r\\n     [func-name message]\\r\\n     `(defn ~func-name []\\n              (println ~message))))" "(defmacro message-to-apple\\r\\n     \\"\\"\\r\\n     [func-name message]\\r\\n     `(defn ~func-name []\\n        (println ~message)))" "(message-to-apple test-a \\"hello\\")" "(test-a)" "(defmacro hello-apple\\r\\n     \\"\\"\\r\\n     [func-name message]\\r\\n     `(defn ~func-name [x]\\n        (println ~message)))" "(hello-apple)" "(defmacro hello-apple\\r\\n     \\"\\"\\r\\n     [func-name message]\\r\\n     `(defn ~func-name [x]\\n        (println ~message)))" "(hello-apple test-a \\"hi\\"\\n             )" "(defmacro hello-apple\\r\\n     \\"\\"\\r\\n     [func-name message]\\r\\n     `(defn ~func-name ['x]\\n        (println ~message)))" "(hello-apple test-a \\"hi\\"\\n             )" "(defmacro hello-apple\\r\\n     \\"\\"\\r\\n     [func-name company]\\n     (let [x (gensym message)]\\r\\n     `(defn ~func-name [x]\\n       (println ~company x))))" "(defmacro hello-apple\\r\\n     \\"\\"\\r\\n     [func-name company]\\n     (let [x (gensym 'message)]\\r\\n     `(defn ~func-name [x]\\n       (println ~company x))))" "(hello-apple)" "(hello-apple hello\! \\"apple\\")" "(hello-apple hello \\"apple\\")" "(defmacro hello-apple\\r\\n     \\"\\"\\r\\n     [func-name company]\\n     (let [x (gensym 'message)]\\r\\n     `(defn ~func-name [~x]\\n       (println ~company ~x))))" "(hello-apple hello \\"apple\\")" "(hello \\"test\\")" "(defmacro clj-marco-introduction\\r\\n     \\"Introdution with a macro\\"\\r\\n     [func-name company]\\n     (let [x (gensym 'message)]\\r\\n     `\#(~func-name [~x]\\n       (println ~company ~x))))" "(defmacro clj-marco-introduction\\r\\n     \\"Introdution with a macro\\"\\r\\n     [func-name company]\\n     (let [x (gensym 'message)]\\r\\n     `\#(def ~func-name \\n         (fn [~x]\\n           (println ~company ~x)))))" "(clj-marco-introduction hello \\"Apple Inc.\\")" "((clj-marco-introduction hello \\"Apple Inc.\\") \\"Hello\\")" "(hello \\"apple\\")" "(defmacro clj-marco-introduction\\r\\n     \\"Introdution with a macro\\"\\r\\n     [func-name company]\\n     (let [x (gensym 'message)]\\r\\n     `\#(def ~ (str func-name  \\"-intro\\")\\n         (fn [~x]\\n           (println ~x ~company)))\\n     `\#(def ~(str func-name \\"-dance\\")\\r\\n         (fn [~x]\\r\\n           (println ~x ~company)))))" "(clj-marco-introduction ap \\"Apple inc\\")" "(defmacro clj-marco-introduction\\r\\n     \\"Introdution with a macro\\"\\r\\n     [func-name company]\\n     (let [x (gensym 'message)]\\r\\n     `\#(def ~(str func-name  \\"-intro\\")\\n         (fn [~x]\\n           (println ~x ~company)))\\n     `\#(def ~(str func-name \\"-dance\\")\\r\\n         (fn [~x]\\r\\n           (println ~x ~company)))))" "(clj-marco-introduction ap \\"Apple inc\\")" "(defmacro clj-marco-introduction\\r\\n     \\"Introdution with a macro\\"\\r\\n     [func-name company]\\n     (let [x (gensym 'message)]\\r\\n     `\#(def ~ (symbol(str func-name  \\"-intro\\"))\\n         (fn [~x]\\n           (println ~x ~company)))\\n     `\#(def ~(symbol (str func-name \\"-dance\\"))\\r\\n         (fn [~x]\\r\\n           (println ~x ~company)))))" "(clj-marco-introduction ap \\"Apple inc\\")" "(defmacro clj-marco-introduction\\r\\n     \\"Introdution with a macro\\"\\r\\n     [func-name company]\\n     (let [x (gensym 'message)]\\r\\n     `\#(def ~ (symbol (str func-name  \\"-intro\\"))\\n         (fn [~x]\\n           (println ~x ~company)))\\n     `\#(def ~ (symbol (str func-name \\"-dance\\"))\\r\\n         (fn [~x]\\r\\n           (map \#(print %1 \\" \\" %2) (take 10 ~x) (take 10 ~company))))))" "(defmacro clj-marco-introduction\\r\\n     \\"Introdution with a macro\\"\\r\\n     [func-name company]\\n     (let [x (gensym 'message)]\\r\\n     `(def ~ (symbol (str func-name  \\"-intro\\"))\\n        (fn [~x]\\n          (println ~x ~company)))\\n     `(def ~ (symbol (str func-name \\"-dance\\"))\\r\\n         (fn [~x]\\r\\n           (map (print %1 \\" \\" %2) (take 10 ~x) (take 10 ~company))))))" "(defmacro clj-marco-introduction\\r\\n     \\"Introdution with a macro\\"\\r\\n     [func-name company]\\n     (let [x (gensym 'message)]\\r\\n     `(def ~ (symbol (str func-name  \\"-intro\\"))\\n        (fn [~x]\\n          (println ~x ~company)))\\n     `(def ~ (symbol (str func-name \\"-dance\\"))\\r\\n         (fn [~x]\\r\\n           (map \#(print %1 \\" \\" %2) (take 10 ~x) (take 10 ~company))))))" "(defmacro clj-marco-introduction\\r\\n     \\"Introdution with a macro\\"\\r\\n     [func-name company]\\n     (let [x (gensym 'message)]\\r\\n     `(def ~ (symbol (str func-name  \\"-intro\\"))\\n        (fn [~x]\\n          (println ~x ~company)))\\n     `(def ~ (symbol (str func-name \\"-dance\\"))\\r\\n         (fn [~x]\\r\\n           (map \#(print %1 \\" \\" %2) (take 10 ~x) (take 10 ~company) (take 10 \\"dancing\\"))))))" "(take 10 \\"dancing\\")" "(take 10 [\\"dancing\\"])" "(take 10 (repeatedly [\\"dancing\\"]))" "(take 10 (repeatedly \\"dancing\\"))" "(take 10 (repeate \\"dancing\\"))" "(take 10 (repeat \\"dancing\\"))" "(defmacro clj-marco-introduction\\r\\n     \\"Introdution with a macro\\"\\r\\n     [func-name company]\\n     (let [x (gensym 'message)\\n           dance-num (gensym 'dance-num)]\\r\\n     `(def ~ (symbol (str func-name  \\"-intro\\"))\\n        (fn [~x]\\n          (println ~x ~company)))\\n     `(def ~ (symbol (str func-name \\"-dance\\"))\\r\\n         (fn [~x]\\r\\n           (map \#(print %1 \\" \\" %2) \\n                (take dance-num \\n                      (repeat ~x))\\n                ((take dance-num ) \\n                  (repeat ~company)) \\n                (take dance-num \\n                      (repeat \\"dancing\\")))))))" "(defmacro clj-marco-introduction\\r\\n     \\"Introdution with a macro\\"\\r\\n     [func-name company]\\n     (let [x (gensym 'message)\\n           dance-num (gensym 'dance-num)]\\r\\n     `(def ~ (symbol (str func-name  \\"-intro\\"))\\n        (fn [~x]\\n          (println ~x ~company)))\\n     `(def ~ (symbol (str func-name \\"-dance\\"))\\r\\n         (fn [~x]\\n           \\"Showing map - purposefully verbose\\"\\r\\n           (map \#(print %1 \\" \\" %2) \\n                (take dance-num \\n                      (repeat ~x))\\n                ((take dance-num ) \\n                  (repeat ~company)) \\n                (take dance-num \\n                      (repeat \\"dancing\\")))))))" "(clj-marco-introduction shannon \\"Apple Inc.\\")" "(defmacro clj-marco-introduction\\r\\n     \\"Introdution with a macro\\"\\r\\n     [func-name company]\\n     (let [x (gensym 'message)\\n           dance-num (gensym 'dance-num)]\\r\\n     `(def ~ (symbol (str func-name  \\"-intro\\"))\\n        (fn [~x]\\n          (println ~x ~company)))\\n     `(def ~ (symbol (str func-name \\"-dance\\"))\\r\\n         (fn [~dance-num]\\n           \\"Showing map - purposefully verbose\\"\\r\\n           (map \#(print %1 \\" \\" %2) \\n                (take ~dance-num \\n                      (repeat ~x))\\n                (take ~dance-num  \\n                      (repeat ~company)) \\n                (take ~dance-num \\n                      (repeat \\"dancing\\")))))))" "(clj-marco-introduction shannon \\"Apple Inc.\\")" "(defmacro clj-marco-introduction\\r\\n     \\"Introdution with a macro\\"\\r\\n     [func-name company]\\n     (let [message (gensym 'message)\\n           dance-num (gensym 'dance-num)]\\r\\n     `(def ~ (symbol (str func-name  \\"-intro\\"))\\n        (fn [~message]\\n          (println ~message ~company)))\\n     `(def ~ (symbol (str func-name \\"-dance\\"))\\r\\n         (fn [~dance-num]\\n           \\"Showing map - purposefully verbose\\"\\r\\n           (map \#(print %1 \\" \\" %2) \\n                (take ~dance-num \\n                      (repeat ~message))\\n                (take ~dance-num  \\n                      (repeat ~company)) \\n                (take ~dance-num \\n                      (repeat \\"dancing\\")))))))" "(clj-marco-introduction shannon \\"Apple Inc.\\")" "(defmacro clj-marco-introduction\\r\\n     \\"Introdution with a macro\\"\\r\\n     [func-name company]\\n     (let [message (gensym 'message)\\n           dance-num (gensym 'dance-num)]\\r\\n     `(def ~ (symbol (str func-name  \\"-intro\\"))\\n        (fn [~message]\\n          (println ~message ~company)))))" "(clj-marco-introduction shannon \\"Apple Inc.\\")" "(defmacro clj-marco-introduction\\r\\n     \\"Introdution with a macro\\"\\r\\n     [func-name company]\\n     (let [message (gensym 'message)\\n           dance-num (gensym 'dance-num)]\\r\\n     `(def ~ (symbol (str func-name  \\"-intro\\"))\\n        (fn [~message]\\n          (println ~message ~company)))\\n     `(def ~ (symbol (str func-name \\"-dance\\"))\\r\\n         (fn [~message ~dance-num]\\n           \\"Showing map - purposefully verbose\\"\\r\\n           (map \#(print %1 \\" \\" %2) \\n                (take ~dance-num \\n                      (repeat ~message))\\n                (take ~dance-num  \\n                      (repeat ~company)) \\n                (take ~dance-num \\n                      (repeat \\"dancing\\")))))))" "(clj-marco-introduction shannon \\"Apple Inc.\\")" "(shannon-intro \\"hi\\")" "(shannon-intro \\"Hello\\")" "(shannon-dance \\"Clojure is great\\" 10)" "shannon-dance" "(print shannon-dance)" "(defmacro clj-marco-introduction\\r\\n     \\"Introdution with a macro\\"\\r\\n     [func-name company]\\n     (let [message (gensym 'message)\\n           dance-num (gensym 'dance-num)]\\r\\n     `(def ~ (symbol (str func-name  \\"-intro\\"))\\n        (fn [~message]\\n          (println ~message ~company)))\\n     `(def ~ (symbol (str func-name \\"-dance\\"))\\r\\n         (fn [~message ~dance-num]\\n           \\"Showing map - purposefully verbose\\"\\r\\n           (map \#(print %1 \\" \\" %2) \\n                (take ~dance-num \\n                      (repeat ~message))\\n                (take ~dance-num  \\n                      (repeat ~company)) \\n                (take ~dance-num \\n                      (repeat \\"dancing\\")))))))" "(shannon-dance \\"Clojure is great\\" 10)" "(shannon-dance \\"Clojure is great\\" )" "(shannon-dance \\"Clojure is great\\" 1)" "(defmacro clj-marco-introduction\\r\\n     \\"Introdution with a macro\\"\\r\\n     [func-name company]\\n     (let [message (gensym 'message)\\n           dance-num (gensym 'dance-num)]\\r\\n     `(def ~ (symbol (str func-name  \\"-intro\\"))\\n        (fn [~message]\\n          (println ~message ~company)))\\n     `(def ~ (symbol (str func-name \\"-dance\\"))\\r\\n         (fn [~message ~dance-num]\\n           \\"Showing map - purposefully verbose\\"\\r\\n           (map \#(print %1 \\" \\" %2 \\" \\" %3) \\n                (take ~dance-num \\n                      (repeat ~message))\\n                (take ~dance-num  \\n                      (repeat ~company)) \\n                (take ~dance-num \\n                      (repeat \\"dancing\\")))))))" "(shannon-dance \\"Clojure is great\\" 10)" "(map \#(print %1 \\" \\" %2 \\" \\" %3) \\r\\n                (take 10\\r\\n                      (repeat \\"test\\"))\\r\\n                (take 10\\r\\n                      (repeat \\"test\\"))\\r\\n                (take 10\\r\\n                      (repeat \\"dancing\\")))" "(map \#(println \\" \\" %2 \\" \\" %3) \\r\\n                (take 10\\r\\n                      (repeat \\"test\\"))\\r\\n                (take 10\\r\\n                      (repeat \\"test\\"))\\r\\n                (take 10\\r\\n                      (repeat \\"dancing\\")))" "(map \#(println %1 \\" \\" %2 \\" \\" %3) \\r\\n                (take 10\\r\\n                      (repeat \\"test\\"))\\r\\n                (take 10\\r\\n                      (repeat \\"test\\"))\\r\\n                (take 10\\r\\n                      (repeat \\"dancing\\")))" "(map \#(println (str %1 \\" \\" %2 \\" \\" %3))\\r\\n                (take 10\\r\\n                      (repeat \\"test\\"))\\r\\n                (take 10\\r\\n                      (repeat \\"test\\"))\\r\\n                (take 10\\r\\n                      (repeat \\"dancing\\")))" "(map \#(println (str %1 \\" \\" %2 \\" \\" %3))\\r\\n                (take 10\\r\\n                      (repeat \\"test1\\"))\\r\\n                (take 10\\r\\n                      (repeat \\"test\\"))\\r\\n                (take 10\\r\\n                      (repeat \\"dancing\\")))" "(map \#(apply println (str %1 \\" \\" %2 \\" \\" %3))\\r\\n                (take 10\\r\\n                      (repeat \\"test1\\"))\\r\\n                (take 10\\r\\n                      (repeat \\"test\\"))\\r\\n                (take 10\\r\\n                      (repeat \\"dancing\\")))" "(map \#(apply println  %1 \\" \\" %2 \\" \\" %3)\\r\\n                (take 10\\r\\n                      (repeat \\"test1\\"))\\r\\n                (take 10\\r\\n                      (repeat \\"test\\"))\\r\\n                (take 10\\r\\n                      (repeat \\"dancing\\")))" "(map \#(println [ %1 \\" \\" %2 \\" \\" %3])\\r\\n                (take 10\\r\\n                      (repeat \\"test1\\"))\\r\\n                (take 10\\r\\n                      (repeat \\"test\\"))\\r\\n                (take 10\\r\\n                      (repeat \\"dancing\\")))" "(map \#(println %)\\r\\n                (take 10\\r\\n                      (repeat \\"test1\\"))\\r\\n                (take 10\\r\\n                      (repeat \\"test\\"))\\r\\n                (take 10\\r\\n                      (repeat \\"dancing\\")))" "(map \#(println [ %1 \\" \\" %2 \\" \\" %3])\\r\\n                (take 10\\r\\n                      (repeat \\"test1\\"))\\r\\n                (take 10\\r\\n                      (repeat \\"test\\"))\\r\\n                (take 10\\r\\n                      (repeat \\"dancing\\")))" "(println (map \#([ %1 \\" \\" %2 \\" \\" %3])\\r\\n                (take 10\\r\\n                      (repeat \\"test1\\"))\\r\\n                (take 10\\r\\n                      (repeat \\"test\\"))\\r\\n                (take 10\\r\\n                      (repeat \\"dancing\\"))))" "(println (map \#( %1 \\" \\" %2 \\" \\" %3)\\r\\n                (take 10\\r\\n                      (repeat \\"test1\\"))\\r\\n                (take 10\\r\\n                      (repeat \\"test\\"))\\r\\n                (take 10\\r\\n                      (repeat \\"dancing\\"))))" "(printlN (map \#(vector %1 \\" \\" %2 \\" \\" %3)\\r\\n                (take 10\\r\\n                      (repeat \\"test1\\"))\\r\\n                (take 10\\r\\n                      (repeat \\"test\\"))\\r\\n                (take 10\\r\\n                      (repeat \\"dancing\\"))))" "(println(map \#(vector %1 \\" \\" %2 \\" \\" %3)\\r\\n                (take 10\\r\\n                      (repeat \\"test1\\"))\\r\\n                (take 10\\r\\n                      (repeat \\"test\\"))\\r\\n                (take 10\\r\\n                      (repeat \\"dancing\\"))))" "(println\\n  (concat \\n    (map \#(vector %1 \\" \\" %2 \\" \\" %3 \\"\\\\n\\")\\r\\n                (take 10\\r\\n                      (repeat \\"test1\\"))\\r\\n                (take 10\\r\\n                      (repeat \\"test\\"))\\r\\n                (take 10\\r\\n                      (repeat \\"dancing\\")))))" "(println\\n  (flatten \\n    (map \#(vector %1 \\" \\" %2 \\" \\" %3 \\"\\\\n\\")\\r\\n                (take 10\\r\\n                      (repeat \\"test1\\"))\\r\\n                (take 10\\r\\n                      (repeat \\"test\\"))\\r\\n                (take 10\\r\\n                      (repeat \\"dancing\\")))))" "(apply println\\n  (flatten \\n    (map \#(vector %1 \\" \\" %2 \\" \\" %3 \\"\\\\n\\")\\r\\n                (take 10\\r\\n                      (repeat \\"test1\\"))\\r\\n                (take 10\\r\\n                      (repeat \\"test\\"))\\r\\n                (take 10\\r\\n                      (repeat \\"dancing\\")))))" "(defmacro clj-marco-introduction\\r\\n     \\"Introdution with a macro\\"\\r\\n     [func-name company]\\n     (let [message (gensym 'message)\\n           dance-num (gensym 'dance-num)]\\r\\n     `(def ~ (symbol (str func-name  \\"-intro\\"))\\n        (fn [~message]\\n          (println ~message ~company)))\\n     `(def ~ (symbol (str func-name \\"-dance\\"))\\r\\n         (fn [~message ~dance-num]\\n           \\"Showing map - purposefully verbose\\"\\r\\n           (apply println\\r\\n                  (flatten \\r\\n                    (map \#(vector %1 \\" \\" %2 \\" \\" %3 \\"\\\\n\\")\\r\\n                         (take 10\\r\\n                               (repeat \\"test1\\"))\\r\\n                         (take 10\\r\\n                               (repeat \\"test\\"))\\r\\n                         (take 10\\r\\n                               (repeat \\"dancing\\")))))" "(defmacro clj-marco-introduction\\r\\n     \\"Introdution with a macro\\"\\r\\n     [func-name company]\\n     (let [message (gensym 'message)\\n           dance-num (gensym 'dance-num)]\\r\\n     `(def ~ (symbol (str func-name  \\"-intro\\"))\\n        (fn [~message]\\n          (println ~message ~company)))\\n     `(def ~ (symbol (str func-name \\"-dance\\"))\\r\\n         (fn [~message ~dance-num]\\n           \\"Showing map - purposefully verbose\\"\\r\\n           (apply println\\r\\n                  (flatten \\r\\n                    (map \#(vector %1 \\" \\" %2 \\" \\" %3 \\"\\\\n\\")\\r\\n                         (take 10\\r\\n                               (repeat \\"test1\\"))\\r\\n                         (take 10\\r\\n                               (repeat \\"test\\"))\\r\\n                         (take 10\\r\\n                               (repeat \\"dancing\\")))))))))" "(clj-marco-introduction shannon2 \\"apple\\")" "(shannon2-dance test \\"test\\")" "(defmacro clj-marco-introduction\\r\\n     \\"Introdution with a macro\\"\\r\\n     [func-name company]\\n     (let [message (gensym 'message)\\n           dance-num (gensym 'dance-num)]\\r\\n     `(def ~ (symbol (str func-name  \\"-intro\\"))\\n        (fn [~message]\\n          (println ~message ~company)))\\n     `(def ~ (symbol (str func-name \\"-dance\\"))\\r\\n         (fn [~message ~dance-num]\\n           \\"Showing map - purposefully verbose\\"\\r\\n           (apply println\\r\\n                  (flatten \\r\\n                    (map \#(vector %1 \\" \\" %2 \\" \\" %3 \\"\\\\n\\")\\r\\n                         (take ~dance-num\\r\\n                               (repeat \\"test1\\"))\\r\\n                         (take ~dance-num\\r\\n                               (repeat \\"test\\"))\\r\\n                         (take ~dance-num\\r\\n                               (repeat \\"dancing\\")))))))))" "(clj-marco-introduction shannon2 \\"apple\\")" "(shannon2-dance test \\"test\\")" "(defmacro clj-marco-introduction\\r\\n     \\"Introdution with a macro\\"\\r\\n     [func-name company]\\n     (let [message (gensym 'message)\\n           ^Number dance-num (gensym 'dance-num)]\\r\\n     `(def ~ (symbol (str func-name  \\"-intro\\"))\\n        (fn [~message]\\n          (println ~message ~company)))\\n     `(def ~ (symbol (str func-name \\"-dance\\"))\\r\\n         (fn [~message ~dance-num]\\n           \\"Showing map - purposefully verbose\\"\\r\\n           (apply println\\r\\n                  (flatten \\r\\n                    (map \#(vector %1 \\" \\" %2 \\" \\" %3 \\"\\\\n\\")\\r\\n                         (take ~dance-num\\r\\n                               (repeat \\"test1\\"))\\r\\n                         (take ~dance-num\\r\\n                               (repeat \\"test\\"))\\r\\n                         (take ~dance-num\\r\\n                               (repeat \\"dancing\\")))))))))" "(clj-marco-introduction shannon2 \\"apple\\")" "(shannon2-dance test \\"test\\")" "(defmacro clj-marco-introduction\\r\\n     \\"Introdution with a macro\\"\\r\\n     [func-name company]\\n     (let [^String message (gensym 'message)\\n           ^Number dance-num (gensym 'dance-num)]\\r\\n     `(def ~ (symbol (str func-name  \\"-intro\\"))\\n        (fn [~message]\\n          (println ~message ~company)))\\n     `(def ~ (symbol (str func-name \\"-dance\\"))\\r\\n         (fn [~message ~dance-num]\\n           \\"Showing map - purposefully verbose\\"\\r\\n           (apply println\\r\\n                  (flatten \\r\\n                    (map \#(vector %1 \\" \\" %2 \\" \\" %3 \\"\\\\n\\")\\r\\n                         (take ~dance-num\\r\\n                               (repeat \\"test1\\"))\\r\\n                         (take ~dance-num\\r\\n                               (repeat \\"test\\"))\\r\\n                         (take ~dance-num\\r\\n                               (repeat \\"dancing\\")))))))))" "(shannon2-dance test \\"test\\")" "(defmacro clj-marco-introduction\\r\\n     \\"Introdution with a macro\\"\\r\\n     [func-name company]\\n     (let [^String message (gensym 'message)\\n           ^Number dance-num (gensym 'dance-num)]\\r\\n     `(def ~ (symbol (str func-name  \\"-intro\\"))\\n        (fn [~message]\\n          (println ~message ~company)))\\n     `(def ~ (symbol (str func-name \\"-dance\\"))\\r\\n         (fn [~message ~dance-num]\\n           \\"Showing map - purposefully verbose\\"\\r\\n           (apply println\\r\\n                  (flatten \\r\\n                    (map \#(vector %1 \\" \\" %2 \\" \\" %3 \\"\\\\n\\")\\r\\n                         (take ~dance-num\\r\\n                               (repeat \\"test1\\"))\\r\\n                         (take ~dance-num\\r\\n                               (repeat \\"test\\"))\\r\\n                         (take ~dance-num\\r\\n                               (repeat \\"dancing\\")))))))))" "(clj-marco-introduction shannon2 \\"apple\\")" "(shannon2-dance test \\"test\\")" "(defmacro clj-marco-introduction\\r\\n     \\"Introdution with a macro\\"\\r\\n     [func-name company]\\n     (let [^String message (gensym 'message)\\n           dance-num (gensym 'dance-num)]\\r\\n     `(def ~ (symbol (str func-name  \\"-intro\\"))\\n        (fn [~message]\\n          (println ~message ~company)))\\n     `(def ~ (symbol (str func-name \\"-dance\\"))\\r\\n         (fn [~message ^Number ~dance-num]\\n           \\"Showing map - purposefully verbose\\"\\r\\n           (apply println\\r\\n                  (flatten \\r\\n                    (map \#(vector %1 \\" \\" %2 \\" \\" %3 \\"\\\\n\\")\\r\\n                         (take ~dance-num\\r\\n                               (repeat \\"test1\\"))\\r\\n                         (take ~dance-num\\r\\n                               (repeat \\"test\\"))\\r\\n                         (take ~dance-num\\r\\n                               (repeat \\"dancing\\")))))))))" "(clj-marco-introduction shannon2 \\"apple\\")" "(shannon2-dance \\"test\\" 10)" "(defmacro clj-marco-introduction\\r\\n     \\"Introdution with a macro\\"\\r\\n     [func-name company]\\n     (let [message (gensym 'message)\\n           dance-num (gensym 'dance-num)]\\r\\n     `(def ~ (symbol (str func-name  \\"-intro\\"))\\n        (fn [^String ~message]\\n          (println ~message ~company)))\\n     `(def ~ (symbol (str func-name \\"-dance\\"))\\r\\n         (fn [^String ~message ^Number ~dance-num]\\n           \\"Showing map - purposefully verbose\\"\\r\\n           (apply println\\r\\n                  (flatten \\r\\n                    (map \#(vector %1 \\" \\" %2 \\" \\" %3 \\"\\\\n\\")\\r\\n                         (take ~dance-num\\r\\n                               (repeat \\"Dancing\\"))\\r\\n                         (take ~dance-num\\r\\n                               (repeat ~message))\\r\\n                         (take ~dance-num\\r\\n                               (repeat ~company)))))))))" "(clj-marco-introduction shannon2 \\"apple\\")" "(shannon2-dance \\"test\\" 10)" "(defmacro clj-marco-introduction\\r\\n     \\"Introdution with a macro\\"\\r\\n     [func-name company]\\n     (let [message (gensym 'message)\\n           dance-num (gensym 'dance-num)]\\r\\n     `(def ~ (symbol (str func-name  \\"-intro\\"))\\n        (fn [^String ~message]\\n          (println ~message ~company)))\\n     `(def ~ (symbol (str func-name \\"-dance\\"))\\r\\n         (fn [^String ~message ^Number ~dance-num]\\n           \\"Showing map - purposefully verbose\\"\\r\\n           (apply println\\r\\n                  (flatten \\r\\n                    (map \#(vector %1 \\" \\" %2 \\" \\" %3 \\"\\\\n\\")\\r\\n                         (take ~dance-num\\r\\n                               (repeat \\"Dancing\\"))\\r\\n                         (take ~dance-num\\r\\n                               (repeat ~message))\\r\\n                         (take ~dance-num\\r\\n                               (repeat ~company)))))))))" "(clj-marco-introduction shannon \\"Apple Inc.\\")" "(shannon-intro \\"Hello\\")" "(shannon-dance \\"for\\" 10)" "(defmacro clj-marco-introduction\\r\\n     \\"Introdution with a macro\\"\\r\\n     [func-name company]\\n     (let [message (gensym 'message)\\n           dance-num (gensym 'dance-num)]\\r\\n     `(def ~ (symbol (str func-name  \\"-intro\\"))\\n        (fn [^String ~message]\\n          (println ~message ~company)))\\n     `(def ~ (symbol (str func-name \\"-dance\\"))\\r\\n         (fn [^String ~message ^Number ~dance-num]\\n           \\"Showing map - purposefully verbose\\"\\r\\n           (apply println\\r\\n                  (flatten \\r\\n                    (map \#(vector (repeat (rand-int 10) \\" \\") %1 \\" \\" %2 \\" \\" %3 \\"\\\\n\\")\\r\\n                         (take ~dance-num\\r\\n                               (repeat \\"Dancing\\"))\\r\\n                         (take ~dance-num\\r\\n                               (repeat ~message))\\r\\n                         (take ~dance-num\\r\\n                               (repeat ~company)))))))))" "(clj-marco-introduction shannon \\"Apple Inc.\\")" "(shannon-intro \\"Hello\\")" "(shannon-dance \\"for\\" 10)" "(defmacro clj-marco-introduction\\r\\n     \\"Introdution with a macro\\"\\r\\n     [func-name company]\\n     (let [message (gensym 'message)\\n           dance-num (gensym 'dance-num)]\\r\\n     `(def ~ (symbol (str func-name  \\"-intro\\"))\\n        (fn [^String ~message]\\n          (println ~message ~company)))\\n     `(def ~ (symbol (str func-name \\"-dance\\"))\\r\\n         (fn [^String ~message ^Number ~dance-num]\\n           \\"Showing map - purposefully verbose\\"\\r\\n           (apply println\\r\\n                  (flatten \\r\\n                    (map \#(vector (repeat (rand-int 10) \\" \\") %1 \\" \\" %2 \\" \\" %3 \\"\\\\n\\")\\r\\n                         (take ~dance-num\\r\\n                               (repeat \\"Dancing\\"))\\r\\n                         (take ~dance-num\\r\\n                               (repeat ~message))\\r\\n                         (take ~dance-num\\r\\n                               (repeat ~company)))))))))" "(shannon-intro \\"Hello\\")" "(shannon-dance \\"for\\" 10)" "(defmacro clj-marco-introduction\\r\\n     {\:doc \\"Introdution with a macro\\"}\\r\\n     [func-name company]\\n     (let [message (gensym 'message)\\n           dance-num (gensym 'dance-num)]\\r\\n     `(def ~ (symbol (str func-name  \\"-intro\\"))\\n        (fn [^String ~message]\\n          (println ~message ~company)))\\n     `(def ~ (symbol (str func-name \\"-dance\\"))\\r\\n         (fn [^String ~message ^Number ~dance-num]\\n          {\:doc \\"Showing map - purposefully verbose\\"}\\r\\n           (apply println\\r\\n                  (flatten \\r\\n                    (map \#(vector (repeat (rand-int 10) \\" \\") %1 \\" \\" %2 \\" \\" %3 \\"\\\\n\\")\\r\\n                         (take ~dance-num\\r\\n                               (repeat \\"Dancing\\"))\\r\\n                         (take ~dance-num\\r\\n                               (repeat ~message))\\r\\n                         (take ~dance-num\\r\\n                               (repeat ~company)))))))))" "(defmacro clj-marco-introduction\\r\\n     {\:doc \\"Introdution with a macro\\"\\n      \:macro true}\\r\\n     [func-name company]\\n     (let [message (gensym 'message)\\n           dance-num (gensym 'dance-num)]\\r\\n     `(def ~ (symbol (str func-name  \\"-intro\\"))\\n        \\"Produces a greeting\\"\\n        {\:doc \\"Input [String]\\"}\\n        (fn [^String ~message]\\n          (println ~message ~company)))\\n     `(def ~ (symbol (str func-name \\"-dance\\"))\\r\\n         (fn [^String ~message ^Number ~dance-num]\\n           \\"Showing map - purposefully verbose\\"\\n          {\:doc \\"input [String number]  output\: side affect\\"}\\r\\n           (apply println\\r\\n                  (flatten \\r\\n                    (map \#(vector (repeat (rand-int 10) \\" \\") %1 \\" \\" %2 \\" \\" %3 \\"\\\\n\\")\\r\\n                         (take ~dance-num\\r\\n                               (repeat \\"Dancing\\"))\\r\\n                         (take ~dance-num\\r\\n                               (repeat ~message))\\r\\n                         (take ~dance-num\\r\\n                               (repeat ~company)))))))))" "(clj-marco-introduction shannon \\"Apple Inc.\\")" "(shannon-intro \\"Hello\\")" "(shannon-dance \\"for\\" 10)" "(defmacro clj-macro-introduction\\r\\n     {\:doc \\"Introduction with a macro\\"\\r\\n      \:macro true}\\r\\n     [func-name company]\\r\\n     (let [message (gensym 'message)\\r\\n           dance-num (gensym 'dance-num)]\\r\\n     `(def ~ (symbol (str func-name  \\"-intro\\"))\\r\\n        \\"Produces a greeting\\"\\r\\n        {\:doc \\"Input [String]\\"}\\r\\n        (fn [^String ~message]\\r\\n          (println ~message ~company)))\\r\\n     `(def ~ (symbol (str func-name \\"-dance\\"))\\r\\n         (fn [^String ~message ^Number ~dance-num]\\r\\n           \\"Showing map - purposefully verbose\\"\\r\\n          {\:doc \\"input [String number]  output\: side affect\\"}\\r\\n           (apply println\\r\\n                  (flatten \\r\\n                    (map \#(vector (repeat (rand-int 10) \\" \\") %1 \\" \\" %2 \\" \\" %3 \\"\\\\n\\")\\r\\n                         (take ~dance-num\\r\\n                               (repeat \\"Dancing\\"))\\r\\n                         (take ~dance-num\\r\\n                               (repeat ~message))\\r\\n                         (take ~dance-num\\r\\n                               (repeat ~company)))))))))" "(clj-macro-introduction shannon \\"Apple Inc.\\")" "(shannon-intro \\"Hello\\")\\r\\n\\r\\n(shannon-dance \\"for\\" 10)\\t\\r\\n\\r\\n(shannon-dance \\"with\\" 10)" "(process-image)" "(shared/init-trail-state)" "(phase/load-image)" "(shared/time-start)" "(phase/bootstrap)" "(tgaa.algo.ant-path/init-trail-paths)" "(apply max(tgaa.algo.trial/trial-max-local \\r\\n               (tgaa.algo.ant-path/proc-all-ants (tgaa.algo.ant-path/init-trail-paths))))" "(tgaa.algo.ant-path/init-trail-paths)" "(tgaa.algo.ant-path/proc-all-ants (tgaa.algo.ant-path/init-trail-paths))" "(map \#(tgaa.algo.ant-path/proc-ant %) (tgaa.algo.ant-path/init-trail-paths))" "(tgaa.algo.ant-path/proc-ant (first (tgaa.algo.ant-path/init-trail-paths)))" "(map \#(tgaa.algo.ant-path/proc-ant %) (tgaa.algo.ant-path/init-trail-paths))" "(map \#(do (println (\:id %)) (tgaa.algo.ant-path/proc-ant %)) (tgaa.algo.ant-path/init-trail-paths))" "(map \#(try (tgaa.algo.ant-path/proc-ant %) (catch e (print e))) (tgaa.algo.ant-path/init-trail-paths))" "(map \#(try (tgaa.algo.ant-path/proc-ant %) (catch Exception e (print e))) (tgaa.algo.ant-path/init-trail-paths))" "(map \#(try (do (tgaa.algo.ant-path/proc-ant %) nil) (catch Exception e (print e))) (tgaa.algo.ant-path/init-trail-paths))" "(map \#(try (do (tgaa.algo.ant-path/proc-ant %) nil) (catch Exception e (print %))) (tgaa.algo.ant-path/init-trail-paths))" "(map \#(tgaa.algo.ant-path/proc-ant %) (tgaa.algo.ant-path/init-trail-paths))" " (tgaa.algo.ant-path/init-trail-paths)" " (tgaa.algo.ant-path/random-point [4 4])" " (tgaa.algo.ant-path/random-point 1)" " (tgaa.algo.ant-path/random-point 2)" "(map \#(try (do (tgaa.algo.ant-path/proc-ant %) nil) (catch Exception e (print %))) (tgaa.algo.ant-path/init-trail-paths))" " (tgaa.algo.ant-path/rand-ant-dir [31 112])" " (tgaa.algo.ant-path/rand-ant-dir [0 112])" " (tgaa.algo.ant-path/rand-ant-dir [31 112])" "(tgaa.struct.shared/image-ref)" "(Throw Excpetion \\"test\\")" "(throw Excpetion \\"test\\")" "(throw)" "(throw \\"tet\\")" "(throw (Exception \\"test\\"))" "(throw (new Exception \\"test\\"))" "(-> (new Exception) setMessage throw)" "(-> (new Exception \\"fail\\") throw)" "(-> (Exception. \\"fail\\") throw)" " (tgaa.algo.ant-path/rand-ant-dir [31 112])" "(map \#(tgaa.algo.ant-path/proc-ant %) (tgaa.algo.ant-path/init-trail-paths))" "(shared/init-trail-state)" "(process-image)" "(tgaa.util.image/anim-trail-paths)" "(import 'java.awt.Color)" "(tgaa.util.image/anim-trail-paths)" "(process-image)" "(tgaa.util.image/anim-trail-paths)" "(process-image)" "(tgaa.util.image/anim-trail-paths)" "(tgaa.util.image/show-cann-path)" "(phase/analysis-hull)" "(tgaa.util.image/draw-final-boundary)" "(tgaa.util.image/show-cann-path)" "(mikera.image.core/show (tgaa.struct.shared/image-ref))" "(tgaa.util.image/show-cann-path)" "(shared/salient-results)" "(tgaa.util.image/show-cann-path)" "(shared/salient-ids)" "(shared/salient-results)" "(phase/evaluation)" "(shared/salient-results)" "(shared/salient-ids)" "(tgaa.struct.ant/ant-group 0)" "(keys (shared/trial-state))" "(keys @shared/trial-state)" "(count (\:cand-paths @shared/trial-state))" "(filter \#(\= % (shared/salient-ids)) (\:cand-paths @shared/trial-state))" "(filter \#(contains? % (shared/salient-ids)) (\:cand-paths @shared/trial-state))" "(filter (fn [x]\\n          (not-empty \\n            (filter \#(\= x %)\\n                    (shared/salient-ids)))) (\:cand-paths @shared/trial-state))" "(filter (fn [x]\\n          (not-empty \\n            (filter \#(\= x (\:id %))\\n                    (shared/salient-ids)))) (\:cand-paths @shared/trial-state))" "(filter (fn [x]\\n          (not-empty \\n            (filter \#(\= (\:id x) %)\\n                    (shared/salient-ids)))) (\:cand-paths @shared/trial-state))" "(count (filter (fn [x]\\n                 (not-empty \\n                   (filter \#(\= (\:id x) %)\\n                           (shared/salient-ids)))) (\:cand-paths @shared/trial-state)))" "(filter (fn [x]\\n          (not-empty \\n            (filter \#(\= (\:id x) %)\\n                    (shared/salient-ids)))) \\n        (\:cand-paths @shared/trial-state))" "(shared/salient-results)" "(shared/salient-ids)" "(count (shared/salient-results))" "(apply count (shared/salient-results))" "(shared/salient-results)" "(filter (fn [x]\\n          (not-empty \\n            (filter \#(\= (\:id x) %)\\n                    (shared/salient-ids)))) \\n        (\:cand-paths @shared/trial-state))" "(make-groups \\r\\n                 (filter \#(\= (ant/ant-trial-num %) (shared/get-num-trails)) \\r\\n                         (shared/canidates)))" "(defn make-groups [cann-path]\\r\\n  (loop [non-group cann-path groups [] meta-data {} group-id 0]\\r\\n    (if (empty? non-group)\\r\\n      {\:groups groups \:group-data meta-data}\\r\\n      (let [[group-res non-group-res ] (make-group non-group)]\\r\\n        (recur non-group-res  \\r\\n               (apply conj groups (map \#(assoc % \:group group-id) group-res))\\r\\n               (assoc meta-data (keyword (str group-id)) (count group-res))\\r\\n               (inc group-id))))))" "(tgaa.algo.core/make-groups \\r\\n                 (filter \#(\= (ant/ant-trial-num %) (shared/get-num-trails)) \\r\\n                         (shared/canidates)))" "(tgaa.algo.core/make-groups \\r\\n                 (filter \#(\= (tgaa.struct.ant/ant-trial-num %) (shared/get-num-trails)) \\r\\n                         (shared/canidates)))" "(shared/get-num-trails)" "(filter \#(\= (ant/ant-trial-num %) (shared/get-num-trails))" "(filter \#(\= (ant/ant-trial-num %) (shared/get-num-trails)" "(filter \#(\= (ant/ant-trial-num %) (shared/get-num-trails)))" "(filter \#(\= (tgaa.algo.ant/ant-trial-num %) (shared/get-num-trails)))" "(filter \#(\= (tgaa.struct.ant/ant-trial-num %) (shared/get-num-trails)))" "(filter \#(\= (tgaa.struct.ant/ant-trial-num %) (shared/get-num-trails)) (shared/canidates))" "(make-groups  (filter \#(\= (tgaa.struct.ant/ant-trial-num %) (shared/get-num-trails)) (shared/canidates)))" "(count (filter \#(\= (tgaa.struct.ant/ant-trial-num %) (shared/get-num-trails)) (shared/canidates))))" "(count (filter \#(\= (tgaa.struct.ant/ant-trial-num %) (shared/get-num-trails)) (shared/canidates)))" "(def t(filter \#(\= (tgaa.struct.ant/ant-trial-num %) (shared/get-num-trails)) (shared/canidates)))" "t" "(tgaa.algo.analysis/make-groups t)" "(shared/init-trail-state)" "(phase/load-image)" "(shared/time-start)" "(phase/bootstrap)" "(phase/trapping)" "(phase/evaluation)" "(shared/time-end)" "(shared/salient-results)" "(shared/salient-ids)" "(shared/salient-results)" "(shared/salient-ids)" "(count (shared/salient-ids))" "(import 'java.awt.Color)" "(tgaa.util.image/ animate-algo )" "(tgaa.util.image/animate-algo )" "(tgaa.util.image/show-cann-path)" "(process-image)" "(tgaa.util.image/anim-trail-paths)" "(process-image)" "(tgaa.util.image/anim-trail-paths)" "(process-image)" "(tgaa.util.image/anim-trail-paths)" "(shared/salient-results)" "(count (shared/salient-ids))" "(shared/salient-ids)" "(process-image)" "(shared/salient-ids)" "(shared/salient-results)" "(process-image)" "(shared/salient-results)" "(shared/salient-ids)" " (phase/bootstrap)" " (phase/trapping)" "(phase/evaluation)" "(shared/salient-ids)" "(shared/salient-results)" "(shared/init-trail-state)" "(phase/load-image)" " (phase/bootstrap)" " (phase/trapping)" " (phase/evaluation)" "(shared/salient-results)" "(map \#(tgaa.util.image/pix-value (\:local-max %) (shared/image-gry-ref)) (shared/salient-id))" "(shared/salient-id)" "(map \#(tgaa.util.image/pix-value (\:local-max %) (shared/image-gry-ref)) (shared/salient-ids))" "(map \#((\:local-max %)) (shared/salient-ids))" "(map \#(\:local-max %) (shared/salient-ids))" " (shared/salient-ids)" "(count (shared/salient-ids))" "(map count (shared/salient-ids))" "(phase/evaluation)" " (shared/salient-ids)" "(shared/init-trail-state)" "(phase/bootstrap)" "(phase/load-image)" "(phase/bootstrap)" " (phase/trapping)" " (phase/evaluation)" " (shared/salient-ids)" "(map \#(tgaa.util.image/pix-value (\:local-max %) (shared/image-gry-ref)) (shared/salient-ids))" "(shared/thresh)" "(map \#(tgaa.util.image/pix-value (\:local-min %) (shared/image-gry-ref)) (shared/salient-ids))" "(defn edge-stats-by-group[]\\n  (map \#(vector (tgaa.util.image/pix-value (\:local-min %) (shared/image-gry-ref)) (\:group %)) (shared/salient-ids)))" "(edge-stats-by-group)" "(shared/salient-results)" "(defn edge-stats-by-group[]\\n  (map \#(filter ) (\:(shared/s\\n    \\n  (filter \#(tgaa.util.image/pix-value (\:local-min %)) (shared/salient-ids)))" "(shared/salient-results)" "(map first (shared/salient-results))" "(map \#(string first) (shared/salient-results))" "(map \#(string (first %)) (shared/salient-results))" "(map \#(str (first %)) (shared/salient-results))" "(map \#(symbol (first %)) (shared/salient-results))" "(map \#(key (first %)) (shared/salient-results))" "(map \#(name (first %)) (shared/salient-results))" "(map \#(Integer (name (first %))) (shared/salient-results))" "(map \#(num (name (first %))) (shared/salient-results))" "(map \#(int (name (first %))) (shared/salient-results))" "(map \#(Integer. (name (first %))) (shared/salient-results))" "(map \#(filter (\= %) (shared/salient-ids)) (map \#(Integer. (name (first %))) (shared/salient-results)))" "(map \#(filter (\= (\:group %)) (shared/salient-ids)) (map \#(Integer. (name (first %))) (shared/salient-results)))" "(map \#(filter (fn [x] (\= (\:group x) %) (shared/salient-ids)) (map \#(Integer. (name (first %))) (shared/salient-results)))" "(map \#(filter (fn [x] (\= (\:group x) %) (shared/salient-ids)) \\n              (map \#(Integer. (name (first %))) (shared/salient-results))))" "(map \#(filter (fn [x] (\= (\:group x) %)) (shared/salient-ids)) \\n              (map \#(Integer. (name (first %))) (shared/salient-results)))" "(map \#(Math/max\\n        (filter (fn [x] (\= (\:group x) %)) (shared/salient-ids)) \\n              (map \#(Integer. (name (first %)))) (shared/salient-results)))" "(map \#(Math/max\\n        (filter (fn [x] (\= (\:group x) %)) (shared/salient-ids)))\\n              (map \#(Integer. (name (first %)))) (shared/salient-results))" "(map \#(+\\n        (filter (fn [x] (\= (\:group x) %)) (shared/salient-ids)))\\n              (map \#(Integer. (name (first %)))) (shared/salient-results))" "(map \#(filter (\= %) (shared/salient-ids)) (map \#(Integer. (name (first %))) (shared/salient-results)))" "(map \#(int (name (first %))) (shared/salient-results))" " (map \#(vector (tgaa.util.image/pix-value (\:local-min %) (shared/image-gry-ref)) (\:group %)) (shared/salient-ids)))" " (map \#(vector (tgaa.util.image/pix-value (\:local-min %) (shared/image-gry-ref)) (\:group %)) (shared/salient-ids))" " (map \#(vector (tgaa.util.image/pix-value (\:local-max %) (shared/image-gry-ref)) (\:group %)) (shared/salient-ids))" "ls" "(shared/thresh)" "(tgaa.util.image/show-segmentaton)" "(tgaa.util.image/show-segmentaton 1\\n                                  )" "(tgaa.util.image/show-segmentaton 2)" "(tgaa.util.image/show-segmentaton 150)" "(tgaa.util.image/show-segmentaton 180)" "(tgaa.util.image/show-segmentaton 110)" "(tgaa.util.image/show-segmentaton)" " (map \#(vector (tgaa.util.image/pix-value (\:local-max %) (shared/image-gry-ref)) (\:group %)) (shared/salient-ids))" "(tgaa.util.image/show-segmentaton 170)" " (map \#(vector (tgaa.util.image/pix-value (\:local-min %) (shared/image-gry-ref)) (\:group %)) (shared/salient-ids))" "(tgaa.util.image/show-segmentaton 126)" "(tgaa.util.image/show-segmentaton 131)" "(tgaa.util.image/show-segmentaton 111)" " (map \#(vector (tgaa.util.image/pix-value (\:local-min %) (shared/image-gry-ref)) (\:group %)) (shared/salient-ids))" "(tgaa.util.image/show-segmentaton 111)" "(tgaa.util.image/show-segmentaton 200)" "(tgaa.util.image/show-segmentaton 100)" "(tgaa.util.image/show-segmentaton 50)" "(tgaa.util.image/show-segmentaton 20)" "(tgaa.util.image/show-segmentaton 30)" "(phase/bootstrap)" "(shared/thresh)" "(tgaa.util.image/show-segmentaton 234)" "(case \\"L\\"\\n  \\"L\\" \\"est\\")" "(case \\"L\\"\\n  \\"L\\" \\"est\\"\\n  \\"g\\" \\"estt\\")" "(case \\"L\\"\\n  \\"L\\" +\\n  \\"g\\" \\"estt\\")" "((case \\"L\\"\\n   \\"L\\" +\\n   \\"g\\" \\"estt\\") 1 1)" "(phase/bootstrap)" "(shared/thresh)" "(def v (phase/bootstrap))" "v" "(phase/bootstrap)" "(shared/thresh)" "(shared/init-trail-state)" "(phase/load-image)" "(phase/bootstrap)" "(shared/thresh)" "(phase/trapping)" "(shared/thresh)" "(tgaa.util.image/show-segmentaton 78)" "(shared/init-trail-state)" "(phase/load-image)" "(phase/bootstrap)" "(phase/trapping)" "(shared/thresh)" "(tgaa.util.image/show-segmentaton 88)" "(import 'java.awt.Color)" "(tgaa.util.image/show-cann-path)" "(shared/thresh)" "(shared/init-trail-state)" "(phase/load-image)" "(phase/bootstrap)" "(shared/thresh)" "(phase/trapping)" "(shared/thresh)" "(shared/init-trail-state)" "(phase/load-image)" "(phase/bootstrap)" "(shared/thresh)" "(phase/trapping)" "(shared/thesh-oper)" "((shared/thesh-oper) 1 3)" "(shared/init-trail-state)" "(phase/load-image)" "(phase/bootstrap)" "(shared/thresh)" "(phase/trapping)" "(shared/init-trail-state)" "(phase/bootstrap)" "(phase/load-image)" "(phase/bootstrap)" "(shared/thresh)" "(phase/trapping)" "(shared/thresh)" "(tgaa.util.image/show-segmentaton 162)" "(shared/init-trail-state)" "(phase/trapping)" "(phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" "(phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" "(phase/load-image)" "(phase/bootstrap)" "(shared/init-trail-state)" "(phase/load-image)" "(phase/bootstrap)" "(shared/thresh)" "(shared/init-trail-state)" "(phase/bootstrap)" "(phase/load-image)" "(phase/bootstrap)" "(shared/thresh)" "(shared/init-trail-state)" "(phase/load-image)" "(phase/bootstrap)" "(shared/thresh)" "(phase/load-image)" "(phase/bootstrap)" "(shared/thresh)" "(phase/trapping)" "(tgaa.util.image/anim-trail-paths)" "(shared/init-trail-state)" "(phase/load-image)" "(phase/bootstrap)" "(shared/thresh)" "(shared/thresh 1)" "(shared/update-thresh 1)" "(shared/thresh)" "(shared/init-trail-state)" "(phase/load-image)" "(phase/bootstrap)" "(shared/thresh)" "(shared/init-trail-state)" "(phase/load-image)" "(phase/bootstrap)" "(shared/thresh)" "(phase/trapping)" "(shared/thresh)" "(tgaa.util.image/anim-trail-paths)" "(tgaa.util.image/show-segmentaton 16)" "(tgaa.util.image/show-segmentaton 165)" "(shared/init-trail-state)" "(phase/load-image)" "(phase/bootstrap)" "(shared/thresh)" "(phase/trapping)" "(shared/thresh)" "(tgaa.util.image/anim-trail-paths)" "(shared/init-trail-state)" "(phase/load-image)" "(phase/bootstrap)" "(shared/thresh)" "(phase/trapping)" "(tgaa.util.image/anim-trail-paths)" "(phase/trapping)" "(tgaa.util.image/anim-trail-paths)" "(shared/init-trail-state)" "(phase/load-image)" "(phase/bootstrap)" "(shared/thresh)" "(phase/trapping)" "(tgaa.util.image/anim-trail-paths)" "(shared/init-trail-state)" "(phase/load-image)" "(phase/bootstrap)" "(phase/trapping)" "(tgaa.util.image/anim-trail-paths)" "(shared/init-trail-state)" "(phase/load-image)" "(phase/bootstrap)" "(phase/trapping)" "(tgaa.util.image/anim-trail-paths)" "(tgaa.util.image/show-cann-path)" "(shared/num-eval-ants)" "(defn init-trail-paths []\\r\\n  \\"Gets ant paths for a trail based on trail-state and config\\"\\r\\n  (map \#(ant-path %)\\r\\n       (concat \\r\\n         (random-point \\r\\n           (num-of-random-starts))\\r\\n         (phero-points \\r\\n           (num-of-phero-starts)))))" "(defn eval-data-gen[]\\r\\n    (ap/proc-all-ants \\r\\n      (map \#(ap/ant-path %)\\r\\n         (ap/phero-points \\r\\n           (shared/num-eval-ants)))))" "(defn eval-data-gen[]\\r\\n    (tgaa.algo.ant-path/proc-all-ants \\r\\n      (map \#(tgaa.algo.ant-path/ant-path %)\\r\\n         (tgaa.algo.ant-path/phero-points \\r\\n           (shared/num-eval-ants)))))" "(shared/eval-paths (eval-data-gen))" "(shared/eval-paths)" "(shared/init-trail-state)" "(phase/load-image)" "(shared/update-thresh 1)" "(phase/trapping)" "(shared/eval-paths (eval-data-gen))" "(count (shared/eval-paths))" "(shared/eval-paths)" "(eval-data-gen)" "\\r\\n    (tgaa.algo.ant-path/proc-all-ants \\r\\n      (map \#(tgaa.algo.ant-path/ant-path %)\\r\\n         (tgaa.algo.ant-path/phero-points \\r\\n           (shared/num-eval-ants))))" "\\r\\n     \\r\\n      (map \#(tgaa.algo.ant-path/ant-path %)\\r\\n         (tgaa.algo.ant-path/phero-points \\r\\n           (shared/num-eval-ants)))" "(shared/num-eval-ants)" "\\r\\n     \\r\\n      \\r\\n         (tgaa.algo.ant-path/phero-points \\r\\n           (shared/num-eval-ants))" "(tgaa.util.image/anim-trail-paths)" "(import 'java.awt.Color)" "(tgaa.util.image/anim-trail-paths)" "(tgaa.util.image/show-cann-path)" "(shared/init-trail-state)" "(phase/load-image)" " (phase/bootstrap)" "(shared/thresh)" "(shared/update-thresh 1)" "(phase/trapping)" "(tgaa.util.image/show-cann-path)" "(shared/init-trail-state)" " (phase/load-image)" "(phase/bootstrap)" "(phase/trapping)" "(tgaa.util.image/show-cann-path)" "(phase/trapping)" "(tgaa.util.image/show-cann-path)" "(tgaa.util.image/show-cann-path 1\\n                                )" "(tgaa.util.image/show-cann-path 50\\n                                )" "(tgaa.util.image/show-cann-path 20\\n                                )" "(count (shared/canidates))" "(count (filter \#(< (shared/thresh) (tgaa.struct.ant/ant-local-min %))\\n         (count (shared/canidates))))" "(count (filter \#(< (shared/thresh) (tgaa.struct.ant/ant-local-min %))\\n          (shared/canidates)))" "(first (shared/canidates))" "(count (filter \#(< (shared/thresh) (tgaa.util.image/pix-value (tgaa.struct.ant/ant-local-min %)))\\n          (shared/canidates)))" "(count (filter \#(< (shared/thresh) (tgaa.util.image/pix-value (tgaa.struct.ant/ant-local-min %) (shared/image-gry-ref)))\\n          (shared/canidates)))" "(count (filter \#(> (shared/thresh) (tgaa.util.image/pix-value (tgaa.struct.ant/ant-local-min %) (shared/image-gry-ref)))\\n          (shared/canidates)))" "(count (filter \#(<\\n                  (shared/thresh) (tgaa.util.image/pix-value (tgaa.struct.ant/ant-local-min %) (shared/image-gry-ref)))\\n          (shared/canidates)))" "(def t\\n(map \\n  tgaa.algo.ant-path/proc-ant  \\n  (filter \#(<\\n             (shared/thresh) (tgaa.util.image/pix-value (tgaa.struct.ant/ant-local-min %) (shared/image-gry-ref)))\\n     (shared/canidates))))" "(first t)" "(defn reprocess-paths\\n  \\"evaluation phase\: prune paths that threshold omits and reprocess all paths with final threshold\\"\\n(map \\n  tgaa.algo.ant-path/proc-ant  \\n  (filter \#(<\\n             (shared/thresh) (tgaa.util.image/pix-value (tgaa.struct.ant/ant-local-min %) (shared/image-gry-ref)))\\n     (shared/canidates))))" "(defn testcoh [{\:keys a b} v]\\n  (print a b v))" "(defn testcoh [{\:keys [a b]} v]\\n  (print a b v))" "(testcoh {\:a \\"a\\" \:b \\"b\\"} \\"v\\")" "(tgaa.util.image/draw-paths (" "(defn reprocess-paths\\r\\n     \\"evaluation phase\: prune paths that threshold omits and reprocess all paths with final threshold\\"\\r\\n   (map \\r\\n     tgaa.algo.ant-path/proc-ant  \\r\\n     (filter \#(<\\r\\n                (shared/thresh) (tgaa.util.image/pix-value (tgaa.struct.ant/ant-local-min %) (shared/image-gry-ref)))\\r\\n        (shared/canidates))))" "(defn reprocess-paths []\\r\\n     \\"evaluation phase\: prune paths that threshold omits and reprocess all paths with final threshold\\"\\r\\n   (map \\r\\n     tgaa.algo.ant-path/proc-ant  \\r\\n     (filter \#(<\\r\\n                (shared/thresh) (tgaa.util.image/pix-value (tgaa.struct.ant/ant-local-min %) (shared/image-gry-ref)))\\r\\n        (shared/canidates))))" "(tgaa.util.image/draw-paths (reprocess-paths))" "(tgaa.util.image/draw-paths (reprocess-paths) \\"yellow\\" (shared/image-gry-ref) 2)" "(mikera.image.core/show (tgaa.util.image/draw-paths (reprocess-paths) \\"yellow\\" (shared/image-gry-ref) 2))" "(shared/eval-paths (reprocess-paths))" "(tgaa.util.image/show-eval-paths)" "(shared/eval-paths (reprocess-paths))" "(tgaa.util.image/show-eval-paths)" "(defn reprocess-paths []\\r\\n     \\"evaluation phase\: prune paths that threshold omits and reprocess all paths with final threshold\\"\\r\\n   (map \\r\\n     tgaa.algo.ant-path/proc-ant  \\r\\n     (filter \#(>\\r\\n                (shared/thresh) (tgaa.util.image/pix-value (tgaa.struct.ant/ant-local-min %) (shared/image-gry-ref)))\\r\\n        (shared/canidates))))" "(shared/eval-paths (reprocess-paths))" "(tgaa.util.image/show-eval-paths)" "(shared/init-trail-state)" "(phase/load-image)" " (phase/bootstrap)" "(phase/trapping)" "(phase/evaluation)" "(tgaa.util.image/show-eval-paths)" "(import 'java.awt.Color)" "(tgaa.util.image/show-eval-paths)" "(shared/init-trail-state)" "(phase/load-image)" " (phase/bootstrap)" "(phase/trapping)" "(phase/evaluation)" "(tgaa.util.image/show-eval-paths)" "(shared/init-trail-state)" "(phase/load-image)" " (phase/bootstrap)" "(phase/trapping)" "(tgaa.util.image/show-eval-paths)" "(phase/evaluation)" "(tgaa.util.image/show-eval-paths)" "(shared/init-trail-state)" "(phase/load-image)" " (phase/bootstrap)" "(phase/trapping)" "(phase/evaluation)" "(shared/init-trail-state)" "(phase/load-image)" "(phase/trapping)" "(phase/evaluation)" "(tgaa.util.image/anim-trail-paths)" "(shared/init-trail-state)" "(phase/load-image)" " (phase/bootstrap)" "(phase/trapping)" "(phase/evaluation)" "(tgaa.util.image/anim-trail-paths)" "(phase/evaluation)" "(tgaa.util.image/show-eval-paths)" " (shared/min-path-len)" "(filter \#(and \\r\\n                 (>\\r\\n                   (shared/thresh) (tgaa.util.image/pix-value (tgaa.struct.ant/ant-local-min %) (shared/image-gry-ref)))\\r\\n                 (> (tgaa.struct.ant/ant-path-length %) (shared/min-path-len)))\\r\\n              (shared/canidates))" "(shared/init-trail-state)" "(phase/load-image)" " (phase/bootstrap)" "(phase/trapping)" "(phase/evaluation)" "(tgaa.util.image/show-eval-paths)" "(tgaa.util.image/anim-trail-paths)" "(tgaa.util.image/show-cann-path)" "(shared/init-trail-state)" "(phase/load-image)" " (phase/bootstrap)" "(phase/trapping)" "(shared/init-trail-state)" "(phase/load-image)" " (phase/bootstrap)" "(phase/trapping)" "(phase/evaluation)" "(tgaa.util.image/show-eval-paths)" "(tgaa.util.image/show-cann-path)" "(tgaa.util.image/show-eval-paths)" "(phase/evaluation)" "(tgaa.util.image/show-eval-paths)" "(phase/evaluation)" "(tgaa.util.image/show-eval-paths)" "(tgaa.util.image/show-cann-path)" "(tgaa.util.image/show-eval-paths)" "(shared/init-trail-state)" "(phase/load-image)" " (phase/bootstrap)" "(phase/trapping)" "(phase/evaluation)" "(tgaa.util.image/show-eval-paths)" "(shared/init-trail-state)" "(phase/load-image)" "(phase/bootstrap)" "(phase/trapping)" "(phase/evaluation)" "(tgaa.util.image/show-eval-paths)" "(import 'java.awt.Color)" "(tgaa.util.image/show-eval-paths)" "(tgaa.util.image/draw-can-paths)" "(tgaa.util.image/show-cann-path)" "(shared/init-trail-state)" "(phase/load-image)" "(phase/bootstrap)" "(phase/trapping)" "(phase/evaluation)" "(tgaa.util.image/show-cann-path)" "(tgaa.util.image/show-eval-paths)" "(phase/evaluation)" "(tgaa.util.image/show-eval-paths)" "(phase/evaluation)" "(tgaa.util.image/show-eval-paths)" "tgaa.algo.ant-path" "(tgaa.util.image/show-val-end-pnts)" "(tgaa.util.image/show-eval-paths)" "(tgaa.util.image/show-val-end-pnts)" "(map \#(ant/ant-end-point %) (shared/eval-paths))" "(map \#(tgaa.struct.ant/ant-end-point %) (shared/eval-paths))" "(def t (map \#(tgaa.struct.ant/ant-end-point %) (shared/eval-paths)))" "(count t)" "(show-val-end-pnts)" "(tgaa.util.image/show-val-end-pnts)" "(count (shared/eval-paths))" "(tgaa.util.image/show-val-end-pnts)" "(mikera.image.core/show\\n(let [i (mikera.image.core/copy (shared/image-gry-ref))\\n      g (tgaa.util.image/build-graphic 1 \\"YELLOW\\" i)\\n      _ (tgaa.util.image/draw-ant-point [2 2] g)]\\n  i))" "(mikera.image.core/show\\n(let [i (mikera.image.core/copy (shared/image-gry-ref))\\n      _ (tgaa.util.image/draw-ant-end-pnts (shared/eval-paths) i)]\\n  i))" "(mikera.image.core/show\\n(let [i (mikera.image.core/copy (shared/image-gry-ref))\\n      g (tgaa.util.image/build-graphic 1 \\"YELLOW\\" i)\\n       _  (map \#(draw-ant-point % g) [[1 2][3 4][5 6]])]\\n  i))" "(mikera.image.core/show\\n(let [i (mikera.image.core/copy (shared/image-gry-ref))\\n      g (tgaa.util.image/build-graphic 1 \\"YELLOW\\" i)\\n       _  (map \#(tgaa.util.image/draw-ant-point % g) [[1 2][3 4][5 6]])]\\n  i))" "(mikera.image.core/show\\n(let [i (mikera.image.core/copy (shared/image-gry-ref))\\n      g (tgaa.util.image/build-graphic 1 \\"YELLOW\\" i)\\n       _  (tgaa.util.image/draw-ant-point [1 2] g) ]\\n  i))" "(mikera.image.core/show\\n(let [i (mikera.image.core/copy (shared/image-gry-ref))\\n      g (tgaa.util.image/build-graphic 1 \\"YELLOW\\" i)\\n        ]\\n  (tgaa.util.image/draw-ant-point [1 2] g)))" "(mikera.image.core/show\\n(let [i (mikera.image.core/copy (shared/image-gry-ref))\\n      g (tgaa.util.image/build-graphic 1 \\"YELLOW\\" i)\\n       _  (map \#(tgaa.util.image/draw-ant-point % g) [[1 2][3 4][5 6]])]\\n  i))" "(mikera.image.core/show\\n(let [i (mikera.image.core/copy (shared/image-gry-ref))\\n      g (tgaa.util.image/build-graphic 1 \\"YELLOW\\" i)\\n       _  (map \#(tgaa.util.image/draw-ant-point % (tgaa.util.image/build-graphic 1 \\"YELLOW\\" i)) [[1 2][3 4][5 6]])]\\n  i))" "(mikera.image.core/show\\n(let [i (mikera.image.core/copy (shared/image-gry-ref))\\n      g (doall (tgaa.util.image/build-graphic 1 \\"YELLOW\\" i))\\n       _  (map \#(tgaa.util.image/draw-ant-point % g) [[1 2][3 4][5 6]])]\\n  i))" "(mikera.image.core/show\\n(let [i (mikera.image.core/copy (shared/image-gry-ref))\\n      g (tgaa.util.image/build-graphic 1 \\"YELLOW\\" i)\\n       _  (map \#(tgaa.util.image/draw-ant-point % g) [[1 2][3 4][5 6]])]\\n  i))" "(tgaa.util.image/show-cann-path)" "(mikera.image.core/show\\n(let [i (mikera.image.core/copy (shared/image-gry-ref))\\n      g \#(tgaa.util.image/build-graphic 1 \\"YELLOW\\" i)\\n       _  (map \#(tgaa.util.image/draw-ant-point % g) [[1 2][3 4][5 6]])]\\n  i))" "(mikera.image.core/show\\n(let [i (mikera.image.core/copy (shared/image-gry-ref))\\n      g (tgaa.util.image/build-graphic 5 \\"YELLOW\\" i)\\n       _  (map \#(tgaa.util.image/draw-ant-point % g) [[1 2][3 4][5 6]])]\\n  i))" "(mikera.image.core/show\\n(let [i (mikera.image.core/copy (shared/image-gry-ref))\\n      g (tgaa.util.image/build-graphic 5 \\"YELLOW\\" i)\\n        ]\\n  (tgaa.util.image/draw-ant-point [1 2] g)))" "(mikera.image.core/show\\n(let [i (mikera.image.core/copy (shared/image-gry-ref))\\n      g (tgaa.util.image/build-graphic 5 \\"YELLOW\\" i)\\n       _  (tgaa.util.image/draw-ant-point [1 2] g) ]\\n  i))" "(mikera.image.core/show\\n(let [i (mikera.image.core/copy (shared/image-gry-ref))\\n      g (tgaa.util.image/build-graphic 5 \\"YELLOW\\" i)\\n       _  (tgaa.util.image/draw-ant-point [100 200] g) ]\\n  i))" "(mikera.image.core/show\\n(let [i (mikera.image.core/copy (shared/image-gry-ref))\\n      g (tgaa.util.image/build-graphic 5 \\"YELLOW\\" i)\\n       _  (tgaa.util.image/draw-ant-point % g) [100 200]]\\n  i))" "(mikera.image.core/show\\n(let [i (mikera.image.core/copy (shared/image-gry-ref))\\n      g (tgaa.util.image/build-graphic 5 \\"YELLOW\\" i)\\n       _  (tgaa.util.image/draw-ant-point % g) [[100 200]]]\\n  i))" "(mikera.image.core/show\\n(let [i (mikera.image.core/copy (shared/image-gry-ref))\\n      g (tgaa.util.image/build-graphic 5 \\"YELLOW\\" i)\\n       _  (map \#(tgaa.util.image/draw-ant-point % g) [[100 200]])]\\n  i))" "(mikera.image.core/show\\n(let [i (mikera.image.core/copy (shared/image-gry-ref))\\n      g (tgaa.util.image/build-graphic 5 \\"YELLOW\\" i)\\n       _  (map (fn [x] (tgaa.util.image/draw-ant-point x g)) [[100 200]])]\\n  i))" "(mikera.image.core/show\\n(let [i (mikera.image.core/copy (shared/image-gry-ref))\\n      g (tgaa.util.image/build-graphic 5 \\"YELLOW\\" i)\\n       g  (map (fn [x] (tgaa.util.image/draw-ant-point x g)) [100 200])]\\n  i))" "(mikera.image.core/show\\n(let [i (mikera.image.core/copy (shared/image-gry-ref))\\n      _ (let [g (tgaa.util.image/build-graphic 5 \\"YELLOW\\" i)]\\n          (map (fn [x] (tgaa.util.image/draw-ant-point x g)) [100 200]))]\\n  i))" "(mikera.image.core/show\\n(let [i (mikera.image.core/copy (shared/image-gry-ref))\\n      g (tgaa.util.image/build-graphic 5 \\"YELLOW\\" i)]\\n       (doall (map (fn [x] (tgaa.util.image/draw-ant-point x g)) [[100 200]])\\n  i)))" "(mikera.image.core/show\\n(let [i (mikera.image.core/copy (shared/image-gry-ref))\\n      g (tgaa.util.image/build-graphic 5 \\"YELLOW\\" i)]\\n       (doall (map (fn [x] (tgaa.util.image/draw-ant-point x g)) [[100 200]]))\\n  i))" "(tgaa.util.image/show-val-end-pnts)" "(tgaa.util.image/show-val-start-pnts)" "(show-val-boundry-pnt)" "(show-val-boundry-pnts)" "(show-val-boundry-pnts )" "(test)" "(testt)" "(shared/init-trail-state)" "(phase/load-image)" "(phase/bootstrap)" "(phase/trapping)" "(phase/evaluation)" "(tgaa.util.image/show-val-start-pnts)" "(import 'java.awt.Color)" "(tgaa.util.image/show-val-start-pnts)" "(tgaa.util.image/show-cann-path)" "(shared/init-trail-state)" "(phase/load-image)" "(phase/bootstrap)" "(phase/trapping)" "(tgaa.util.image/show-cann-path)" "(shared/thresh)" "(shared/init-trail-state)" "(phase/load-image)" "(phase/bootstrap)" "(phase/trapping)" "(tgaa.util.image/show-cann-path)" "(phase/evaluation)" "(tgaa.util.image/show-val-start-pnts)" "(tgaa.util.image/show-val-end-pnts)" "(tgaa.util.image/show-eval-paths)" "(tgaa.util.image/show-val-boundry-pnts)" "(shared/init-trail-state)" "(phase/load-image)" "(phase/bootstrap)" "(phase/trapping)" "(tgaa.util.image/show-cann-path)" "(phase/evaluation)" "(tgaa.util.image/show-val-boundry-pnts)" "(tgaa.util.image/show-cann-path)" "(tgaa.util.image/show-eval-paths)" "(tgaa.util.image/show-val-boundry-pnts)" "(tgaa.util.image/show-eval-paths)"]
eclipse.preferences.version=1
