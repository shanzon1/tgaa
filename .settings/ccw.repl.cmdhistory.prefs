cmdhistory=["(defn get-image [configuration]\\r\\n  \\"Takes a map with \:imageLocation and returns assocated BufferedImage\\"\\r\\n  (. ImageIO read (File.  \\r\\n     (\:imageLocation (get-config)))))" "(get-image (get-config))" "(defn get-image [configuration]\\r\\n  \\"Takes a map with \:imageLocation and returns assocated BufferedImage\\"\\r\\n  (. ImageIO read (File.  \\r\\n     (get \:imageLocation (get-config)))))" "(get-image (get-config))" "(defn get-image [configuration]\\r\\n  \\"Takes a map with \:imageLocation and returns assocated BufferedImage\\"\\r\\n  (. ImageIO read (File.  \\r\\n     ((get-config) \:imageLocation ))))" "(get-image (get-config))" "(defn get-image [configuration]\\r\\n  \\"Takes a map with \:imageLocation and returns assocated BufferedImage\\"\\r\\n  (. ImageIO read (File.  \\r\\n     (configuration \:imageLocation ))))" "(get-image (get-config))" "(defn get-image [configuration]\\r\\n  \\"Takes a map with \:imageLocation and returns assocated BufferedImage\\"\\r\\n  (try\\r\\n  (. ImageIO read (File.  \\r\\n     ((configuration) \:imageLocation)))\\r\\n  (catch Exception e \\r\\n    (do (println \\"Image not found. Check location is correct\\")\\r\\n      (throw (Exception.  e))))))" "(get-image (get-config))" "(defn get-image [configuration]\\r\\n  \\"Takes a map with \:imageLocation and returns assocated BufferedImage\\"\\r\\n  (. ImageIO read (File.  \\r\\n     (configuration \:imageLocation ))))" "(get-image (get-config))" "(defn get-image [configuration]\\r\\n  \\"Takes a map with \:imageLocation and returns assocated BufferedImage\\"\\r\\n  (try\\r\\n  (. ImageIO read (File.  \\r\\n     (\:imageLocation configuration)))\\r\\n  (catch Exception e \\r\\n    (do (println \\"Image not found. Check location is correct\\")\\r\\n      (throw (Exception.  e))))))" "(get-image (get-config))" "(defn get-image [configuration]\\r\\n  \\"Takes a map with \:imageLocation and returns assocated BufferedImage\\"\\r\\n  (try\\r\\n  (. ImageIO read (File.  \\r\\n     (\:imageLocation configuration)))\\r\\n  (catch Exception e \\r\\n    (do (println \\"Image not found. Check location is correct\\")\\r\\n      (throw (Exception.  e))))))" "(get-image (get-config))" "(defn process-image [configuration] \\r\\n  (let [image ^BufferedImage (get-image configuration)\\r\\n        workingImage (BufferedImage. image.getWidth image.getHeight image.getType )]))" "(defn process-image [configuration] \\r\\n  (let [image ^BufferedImage (get-image configuration)\\r\\n        workingImage (BufferedImage. (. image getWidth) (. image getHeight) (. image getType) )]))" "(process-image (get-config))" "(defn process-image [configuration] \\r\\n  (let [image ^BufferedImage (get-image configuration)\\r\\n        workingImage ^BufferedImage (BufferedImage. (. image getWidth) (. image getHeight) (. image getType) )\\n       ; bootStrapThresh (bootStrap image configuration)\\n        ]\\n    ))" "(defn bootstrap-value [image configuration]\\n  (let [x-cords (rand-int (. image getWidth))]))" "(def i (process-image (get-config)))" "(getWidth. i)" "(. i getWidth)" "(class i)" "(def i ((get-image(get-config))))" "(def i (get-image(get-config)))" "(. i getWidth)" "(repeat 4 (. i getWidth))" "(repeatedly 4 (. i getWidth))" "(repeat 4 \#(. i getWidth))" "(do (repeat 4 \#(. i getWidth)))" "(repeatedly 4 \#(. i getWidth))" "(repeatedly 4 (fn (. i getWidth)))" "(repeatedly 4 (fn [](. i getWidth)))" "(take\\n  (repeatedly 4 \#(rand-n (. i getWidth))))" "(take\\n  (repeatedly 4 \#(rand(. i getWidth))))" "(take\\n  (repeatedly 4 \#(rand-int 0\\n                           (. i getWidth))))" "(take 4\\n  (repeatedly \#(rand-int 0\\n                         (. i getWidth))))" "(take 4\\n  (repeatedly \#(rand-int \\n                         (. i getWidth))))" "(repeatedly 3 \#(rand-int \\r\\n                         (. i getWidth)))" "(repeatedly 10 \#(rand-int \\r\\n                         (. i getWidth)))" "(defn bootstrap-value [image configuration]\\n  (let [x-coords (repeatedly (\:numAnts configuration) \#(rand-int (. i getWidth)))\\n        y-coords (repeatedly (\:numAnts configuration) \#(rand-int (. i getHeight)))]))" "(interleave [1 2 3] [4 5 6])" "(defn bootstrap-value [image configuration]\\n  (let [x-coords (repeatedly (\:numAnts configuration) \#(rand-int (. i getWidth)))\\n        y-coords (repeatedly (\:numAnts configuration) \#(rand-int (. i getHeight)))]))" "(defn random-staring-coords [image configuration]\\n  (partition 2\\n    (interleave ((repeatedly (\:numAnts configuration) \#(rand-int (. image getWidth)))\\n            (repeatedly (\:numAnts configuration) \#(rand-int (. image getHeight)))))))" "(random-staring-coords  (process-image (get-config)) (get-config))" "(process-image (get-config))" "(random-staring-coords  (get-image\\n                          (get-config)) (get-config))" "(get-image (get-config))" "(random-staring-coords  (get-image\\n                          (get-config)) (get-config))" "(defn random-staring-coords [image configuration]\\n  \\n    (interleave ((repeatedly (\:numAnts configuration) \#(rand-int (. image getWidth)))\\n            (repeatedly (\:numAnts configuration) \#(rand-int (. image getHeight))))))" "(random-staring-coords  (get-image\\n                          (get-config)) (get-config))" "(defn random-staring-coords [image configuration]\\n  (partition 2\\n    (interleave \\n      (repeatedly (\:numAnts configuration) \#(rand-int (. image getWidth)))\\n            (repeatedly (\:numAnts configuration) \#(rand-int (. image getHeight))))))" "(random-staring-coords  (get-image\\n                          (get-config)) (get-config))" "i" "(. i getRGB 10 10)" "(. i getType)" "(defn image-RGB-gray [^BufferedImage image]\\n   (let [ out-image (BufferedImage. (. image getWidth) (. image getHeight) (. image setType (. BufferedImage TYPE_BYTE_GRAY)))\\n          _ (. (. (. out-image getGraphics) drawImage image 0 0 nil) dispose)]\\n     out-image))" "(image-RGB-gray i)" "(defn image-RGB-gray [^BufferedImage image]\\n   (let [ out-image (BufferedImage. (. image getWidth) (. image getHeight) (. BufferedImage TYPE_BYTE_GRAY))\\n          _ (. (. (. out-image getGraphics) drawImage image 0 0 nil) dispose)]\\n     out-image))" "(image-RGB-gray i)" "(defn image-RGB-gray [^BufferedImage image]\\n   (let [ out-image (BufferedImage. (. image getWidth) (. image getHeight) (. BufferedImage TYPE_BYTE_GRAY))\\n          _ (. (. out-image getGraphics) drawImage image 0 0 nil)]\\n     out-image))" "(image-RGB-gray i)" "(. i getRGB 10 10)" "(def o (image-RGB-gray i))" "(. o getRGB 10 10)" "(defn get-image-values [image coords]\\r\\n  (map \#(. image getRGB %1 %2) coords))" "(get-image-values i (random-staring-coords i (get-config)))" "(random-staring-coords i (get-config))" "(get-image-values i (random-staring-coords i (get-config)))" "(defn get-image-values [image coords]\\r\\n  (map \#(. image getRGB (nth % 1) (nth 2 %)) coords))" "(get-image-values i (random-staring-coords i (get-config)))" "(defn get-image-values [image coords]\\r\\n  (map (fn [coord] (. image getRGB (nth coord 1) (nth coord 2))) coords))" "(get-image-values i (random-staring-coords i (get-config)))" "(defn get-image-values [image coords]\\r\\n  (map (fn [coord] (. image getRGB (nth coord 0) (nth coord 1))) coords))" "(get-image-values i (random-staring-coords i (get-config)))" "(defn process-image [configuration] \\r\\n  (let [image ^BufferedImage (image-RGB-gray (get-image configuration))\\r\\n        workingImage ^BufferedImage (BufferedImage. (. image getWidth) (. image getHeight) (. image getType) )\\r\\n       ; bootStrapThresh (bootStrap image configuration)\\r\\n        ]\\r\\n    ))" "(defn bootstrap-value [image coords]\\n  (" "(get-image-values i (random-staring-coords i (get-config)))" "(defn bootstrap-value [image coords] \\n  (Math/max(get-image-values image coords)))" "(defn bootstrap-value [image configuration] \\n  (Math/max(get-image-values image configuration)))" "(defn bootstrap-value [image configuration] \\n  (get-image-values image  (random-staring-coords image configuration)))" "(defn bootstrap-value [image configuration] \\n  (max\\n  (get-image-values image  (random-staring-coords image configuration))))" "(bootstrap-value i (get-config))" "(defn bootstrap-value [image configuration] \\n  (max\\n  (get-image-values image  (random-staring-coords image configuration))))" "(bootstrap-value i (get-config))" "(defn bootstrap-value [image configuration] \\n  (apply max\\n  (get-image-values image  (random-staring-coords image configuration))))" "(bootstrap-value i (get-config))" "(defn bootstrap-value [image configuration] \\n  (if \\n  (apply max\\n  (get-image-values image  (random-staring-coords image configuration))))" "(map-indexed inc [1 2 3])" "(map-indexed 'inc [1 2 3])" "(map-indexed 'inc [1 2 3 5])" "(def v (map-indexed 'inc [1 2 3 5]))" "v" "(class v)" "(doseq [[i animal] (map-indexed vector [\\"dog\\" \\"cat\\" \\"bird\\"])]\\r\\n  (println i animal))" "(ns tgaa.algo.core\\r\\n  \:require [tgaa.util.image\\r\\n            tgaa.algo.bootstrap])" "(import 'javax.imageio.ImageIO)" "ImageIO" "\\r\\n(defn get-image [configuration]\\r\\n  \\"Takes a map with \:imageLocation and returns assocated BufferedImage\\"\\r\\n  (try\\r\\n    (ImageIO. read (File.  \\r\\n       (\:imageLocation configuration)))\\r\\n    (catch Exception e \\r\\n      (do (println \\"Image not found. Check location is correct\\")\\r\\n        (throw (Exception.  e))))))" " (\\n   import [javax.imageio.ImageIO]\\r\\n           [java.io.File]\\r\\n           [java.awt.image.BufferedImage])" "\\r\\n(defn get-image [configuration]\\r\\n  \\"Takes a map with \:imageLocation and returns assocated BufferedImage\\"\\r\\n  (try\\r\\n    (ImageIO. read (File.  \\r\\n       (\:imageLocation configuration)))\\r\\n    (catch Exception e \\r\\n      (do (println \\"Image not found. Check location is correct\\")\\r\\n        (throw (Exception.  e))))))" " (\\n   import [javax.imageio.ImageIO]\\r\\n           [java.io.File]\\r\\n           [java.awt.image.BufferedImage])" "\\r\\n(defn get-image [configuration]\\r\\n  \\"Takes a map with \:imageLocation and returns assocated BufferedImage\\"\\r\\n  (try\\r\\n    (ImageIO. read (File.  \\r\\n       (\:imageLocation configuration)))\\r\\n    (catch Exception e \\r\\n      (do (println \\"Image not found. Check location is correct\\")\\r\\n        (throw (Exception.  e))))))" " (\\n   import '([javax.imageio.ImageIO]\\r\\n           [java.io.File]\\r\\n           [java.awt.image.BufferedImage]))" " (\\n   import [javax.imageio.ImageIO]\\r\\n           [java.io.File]\\r\\n           [java.awt.image.BufferedImage])" "\\r\\n(defn get-image [configuration]\\r\\n  \\"Takes a map with \:imageLocation and returns assocated BufferedImage\\"\\r\\n  (try\\r\\n    (ImageIO. read (File.  \\r\\n       (\:imageLocation configuration)))\\r\\n    (catch Exception e \\r\\n      (do (println \\"Image not found. Check location is correct\\")\\r\\n        (throw (Exception.  e))))))" " (\\n import \\r\\n           [java.io.File])" "\\r\\n(defn get-image [configuration]\\r\\n  \\"Takes a map with \:imageLocation and returns assocated BufferedImage\\"\\r\\n  (try\\r\\n    (ImageIO. read (File.  \\r\\n       (\:imageLocation configuration)))\\r\\n    (catch Exception e \\r\\n      (do (println \\"Image not found. Check location is correct\\")\\r\\n        (throw (Exception.  e))))))" " (\\n import \\r\\n           [java.io.File \:all])" " (\\n import \\r\\n           [java.io File ])" "(require 'tgaa.util.image)" "(defn bootstrap-value [image configuration] \\r\\n  (apply max\\r\\n         (image-values image  \\r\\n                       (random-staring-coords image configuration))))" "(process-image (get-config))" "(defn process-image [configuration] \\r\\n  (let [image ^BufferedImage (image-RGB-gray (get-image configuration))\\r\\n        workingImage ^BufferedImage (BufferedImage. (. image getWidth) (. image getHeight) (. image getType) )\\r\\n        bootstrapThresh (bootstrap-value image configuration)\\r\\n        \\r\\n        ]\\r\\n    bootstrapThresh))" "(process-image (get-config))" "(range 1 10)" "(+ 3 (range 1 10))" "(apply + 3 (range 1 10))" "(+ (repeat 10 3)\\n   (range 1 10))" "(repeat 10 3)" "(+ (repeat 10 3)\\n   (range 0 10))" "(apply + (repeat 10 3)\\n   (range 0 10))" "(map  \#(+ %1 %2) (repeat 10 3)\\n   (range 0 10))" "(map  \#(+ %1 %2) \\n      (repeat 10 3)\\n      (range 0 10))" "(map \#(%1 %2)\\n  (map  \#(+ %1 %2) \\n        (repeat 10 3)\\n        (range 0 10))\\n(map  \#(+ %1 %2) \\r\\n      (repeat 10 3)\\r\\n      (range 0 10)))" "(apply map \#(%1 %2)\\n  (map  \#(+ %1 %2) \\n        (repeat 10 3)\\n        (range 0 10))\\n  (map  \#(+ %1 %2) \\r\\n      (repeat 10 3)\\r\\n      (range 0 10)))" "  (map  \#(+ %1 %2) \\r\\n      (repeat 10 3)\\r\\n      (range 0 10))" "(apply map \#(%1 %2)\\n  (map  \#({ %1 %2}) \\n        (repeat 10 3)\\n        (range 0 10))\\n  (map  \#(+ %1 %2) \\r\\n      (repeat 10 3)\\r\\n      (range 0 10)))" "(apply map \#(%1 %2)\\n  (map  \#([ %1 %2]) \\n        (repeat 10 3)\\n        (range 0 10))\\n  (map  \#(+ %1 %2) \\r\\n      (repeat 10 3)\\r\\n      (range 0 10)))" "(apply map \#(%1 %2)\\n  (map  (fn [x y] (vector %1 %2)) \\n        (repeat 10 3)\\n        (range 0 10))\\n  (map  \#(+ %1 %2) \\r\\n      (repeat 10 3)\\r\\n      (range 0 10)))" "(apply map \#(%1 %2)\\n  (map  (fn [x y] (vector x y)) \\n        (repeat 10 3)\\n        (range 0 10))\\n  (map  \#(+ %1 %2) \\r\\n      (repeat 10 3)\\r\\n      (range 0 10)))" "(map \#(%1 %2)\\n  (map  (fn [x y] (vector x y)) \\n        (repeat 10 3)\\n        (range 0 10))\\n  (map  \#(+ %1 %2) \\r\\n      (repeat 10 3)\\r\\n      (range 0 10)))" "(map \#(%1 %2)\\n  (map  (fn [x y] (vector x y)) \\n        (repeat 10 3)\\n        (range 0 10))\\n  (map  \#(+ %1 %2) \\r\\n      (repeat 10 3)\\r\\n      (range 0 9)))" "(map \#(%1 %2)\\n  (map  (fn [x y] (vector x y)) \\n        (repeat 10 3)\\n        (range 0 9))\\n  (map  \#(+ %1 %2) \\r\\n      (repeat 10 3)\\r\\n      (range 0 9)))" "(map (fn [x y] (vector x y)) \\n  (map  \#(+ %1 %2) \\n        (repeat 10 3)\\n        (range 0 9))\\n  (map  \#(+ %1 %2) \\r\\n      (repeat 10 3)\\r\\n      (range 0 9)))" "(map \#(vector %1 %2) \\n  (map  \#(+ %1 %2) \\n        (repeat 10 3)\\n        (range 0 9))\\n  (map  \#(+ %1 %2) \\r\\n      (repeat 10 3)\\r\\n      (range 0 9)))" "(rand-int -1 1)" "(rand-2)" "(rand-int 2)" "(- 1 (rand-int 3))" "(map \#(vector %1 %2) \\n  (map  \#(+ %1 %2) \\n        (repeat 10 3)\\n        (range 0 9))\\n  (map  \#(+ %1 %2) \\r\\n      (repeat 10 3)\\r\\n      (range 0 9)))" "(map \#(vector %1 %2) \\n  (map  \#(+ %1 %2) \\n        (repeat 10 3)\\n        (rand-int (range 0 9) )\\n  (map  \#(+ %1 %2) \\r\\n      (repeat 10 3)\\r\\n      (range 0 9)))" "(rand-nth (range 0 9) (repeat 10 0) (range 0 -1))" "(rand-nth (range 0 9) (repeat 10 0))" "(rand-nth [(range 0 9) (repeat 10 0)])" "(map \#(vector %1 %2) \\n  (map  \#(+ %1 %2) \\n        (repeat 10 3)\\n        (rand-int (range 0 9))\\n  (map  \#(+ %1 %2) \\r\\n      (repeat 10 3)\\r\\n      (range 0 9))))" "(let [map-proc (rand-nth (fn [] (repeat 10 3)) \\n                         (fn [] (map \#(+ %1 %2) \\n                                     (range 0 9)\\n                                     (repeat 10 3)))\\n                         (fn [] (map \#(+ %1 %2) \\r\\n                                     (apply * -1  (range 0 9))\\r\\n                                     (repeat 10 3))))]\\n  map-proc)" "(let [map-proc (rand-nth [(fn [] (repeat 10 3)) \\n                         (fn [] (map \#(+ %1 %2) \\n                                     (range 0 9)\\n                                     (repeat 10 3)))\\n                         (fn [] (map \#(+ %1 %2) \\r\\n                                     (apply * -1  (range 0 9))\\r\\n                                     (repeat 10 3)))])]\\n  map-proc)" "(let [map-proc (take 2\\n                 (rand-nth [(fn [] (repeat 10 3)) \\n                           (fn [] (map \#(+ %1 %2) \\n                                       (range 0 9)\\n                                       (repeat 10 3)))\\n                           (fn [] (map \#(+ %1 %2) \\r\\n                                     (apply * -1  (range 0 9))\\r\\n                                     (repeat 10 3)))]))]\\n  map-proc)" "(let [map-proc (repeat 2\\n                 (rand-nth [(fn [] (repeat 10 3)) \\n                           (fn [] (map \#(+ %1 %2) \\n                                       (range 0 9)\\n                                       (repeat 10 3)))\\n                           (fn [] (map \#(+ %1 %2) \\r\\n                                     (apply * -1  (range 0 9))\\r\\n                                     (repeat 10 3)))]))]\\n  map-proc)" "(let [map-proc (repeat 2\\n                 (rand-nth [(fn [] (repeat 10 3)) \\n                           (fn [] (map \#(+ %1 %2) \\n                                       (range 0 9)\\n                                       (repeat 10 3)))\\n                           (fn [] (map \#(+ %1 %2) \\r\\n                                     (apply * -1  (range 0 9))\\r\\n                                     (repeat 10 3)))]))]\\n  (map \#(vector %1 %2) (nth map-proc 0) (nth map-proc 1)))" "(let [map-proc (repeat 2\\n                 (rand-nth [(fn [] (repeat 10 3)) \\n                           (fn [] (map \#(+ %1 %2) \\n                                       (range 0 9)\\n                                       (repeat 10 3)))\\n                           (fn [] (map \#(+ %1 %2) \\r\\n                                     (apply * -1  (range 0 9))\\r\\n                                     (repeat 10 3)))]))]\\n   (nth map-proc 0) )" "(let [map-proc (repeat 2\\n                 (rand-nth [(fn [] (repeat 10 3)) \\n                           (fn [] (map \#(+ %1 %2) \\n                                       (range 0 9)\\n                                       (repeat 10 3)))\\n                           (fn [] (map \#(+ %1 %2) \\r\\n                                     (apply * -1  (range 0 9))\\r\\n                                     (repeat 10 3)))]))]\\n  (map \#(vector %1 %2) (nth map-proc 0) (nth map-proc 1)))" "(let [map-proc (repeat 2\\n                 (rand-nth [(fn [] (repeat 10 3)) \\n                           (fn [] (map \#(+ %1 %2) \\n                                       (range 0 9)\\n                                       (repeat 10 3)))\\n                           (fn [] (map \#(+ %1 %2) \\r\\n                                     (apply * -1  (range 0 9))\\r\\n                                     (repeat 10 3)))]))]\\n  (apply map \#(vector %1 %2) (nth map-proc 0) (nth map-proc 1)))" "(def tt(let [map-proc (rand-nth [(fn [] (repeat 10 3)) \\n                                (fn [] (map \#(+ %1 %2) \\n                                            (range 0 9)\\n                                            (repeat 10 3)))\\n                                (fn [] (map \#(+ %1 %2) \\r\\n                                     (apply * -1  (range 0 9))\\r\\n                                     (repeat 10 3)))])]\\n         map-proc))" "(tt)" "tt" "(tt)" "(repeat 10 3)" "(map \#(+ %1 %2) \\r\\n                                            (range 0 9)\\r\\n                                            (repeat 10 3))" "(map \#(+ %1 %2) \\r\\n                                     (apply * -1  (range 0 9))\\r\\n                                     (repeat 10 3))" "(map \#(+ %1 %2) \\r\\n                                     ( * -1  (range 0 9))\\r\\n                                     (repeat 10 3))" "(apply * -1  (range 0 9))" "(\\n  * -1  (range 0 9))" "(* -1  (range 0 9))" "(* (range 0 9) -1)" "(def tt(let [map-proc (rand-nth [(fn [] (repeat 10 3)) \\n                                (fn [] (map \#(+ %1 %2) \\n                                            (range 0 9)\\n                                            (repeat 10 3)))\\n                                (fn [] (map \#(+ %1 %2) \\r\\n                                     (map \#(* -1 %1)  (range 0 9))\\r\\n                                     (repeat 10 3)))])]\\n         map-proc))" "(tt)" "(def tt(let [map-proc (rand-nth [(fn [] (repeat 10 3)) \\n                                (fn [] (map \#(+ %1 %2) \\n                                            (range 0 9)\\n                                            (repeat 10 3)))\\n                                (fn [] (map \#(+ %1 %2) \\r\\n                                     (map \#(* -1 %1)  (range 0 9))\\r\\n                                     (repeat 10 3)))])]\\n         map-proc))" "(tt)" "(def tt(let [map-proc (rand-nth [(fn [] (repeat 10 3)) \\n                                (fn [] (map \#(+ %1 %2) \\n                                            (range 0 9)\\n                                            (repeat 10 3)))\\n                                (fn [] (map \#(+ %1 %2) \\r\\n                                     (map \#(* -1 %1)  (range 0 9))\\r\\n                                     (repeat 10 3)))])]\\n         (interleave (nth map-proc 0) (nth map-proc 1) )))" "(def tt(let [map-proc (repeat 2 (rand-nth [(fn [] (repeat 10 3)) \\n                                       (fn [] (map \#(+ %1 %2) \\n                                                   (range 0 9)\\n                                                   (repeat 10 3)))\\n                                       (fn [] (map \#(+ %1 %2) \\r\\n                                     (map \#(* -1 %1)  (range 0 9))\\r\\n                                     (repeat 10 3)))]))]\\n         (interleave (nth map-proc 0) (nth map-proc 1) )))" "tt" "(tt)" "(def tt (let [map-proc (repeat 2 (rand-nth [(fn [] (repeat 10 3)) \\n                                        (fn [] (map \#(+ %1 %2) \\n                                                    (range 0 9)\\n                                                    (repeat 10 3)))\\n                                        (fn [] (map \#(+ %1 %2) \\r\\n                                     (map \#(* -1 %1)  (range 0 9))\\r\\n                                     (repeat 10 3)))]))]\\n          [(nth map-proc 0) (nth map-proc 1) ]))" "(tt)" "tt" "(nth tt 1)" "\#\\n (nth tt 1)" "\#(nth tt 1)" "(apply (nth tt 1))" "(apply (nth tt 0))" "(apply (nth tt 2\\n            ))" "(apply (nth tt 1))" "(nth tt 1)" "(nth tt 0)" "(def tt (let [map-proc (repeatedly 2 (rand-nth [(fn [] (repeat 10 3)) \\n                                        (fn [] (map \#(+ %1 %2) \\n                                                    (range 0 9)\\n                                                    (repeat 10 3)))\\n                                        (fn [] (map \#(+ %1 %2) \\r\\n                                     (map \#(* -1 %1)  (range 0 9))\\r\\n                                     (repeat 10 3)))]))]\\n          [(nth map-proc 0) (nth map-proc 1) ]))" "(nth tt 1)" "(nth tt 0)" "(def tt (let [map-proc (repeatedly 2 (rand-nth [(fn [] (repeat 10 3)) \\n                                        (fn [] (map \#(+ %1 %2) \\n                                                    (range 0 9)\\n                                                    (repeat 10 3)))\\n                                        (fn [] (map \#(+ %1 %2) \\r\\n                                     (map \#(* -1 %1)  (range 0 9))\\r\\n                                     (repeat 10 3)))]))]\\n          [(nth map-proc 0) (nth map-proc 1) ]))" "(nth tt 0)" "(nth tt 1)" "(def tt (let [map-proc (repeatedly 2 \#(rand-nth [(fn [] (repeat 10 3)) \\n                                        (fn [] (map \#(+ %1 %2) \\n                                                    (range 0 9)\\n                                                    (repeat 10 3)))\\n                                        (fn [] (map \#(+ %1 %2) \\r\\n                                     (map \#(* -1 %1)  (range 0 9))\\r\\n                                     (repeat 10 3)))]))]\\n          [(nth map-proc 0) (nth map-proc 1) ]))" "(def tt \\n  (let [map-proc (repeatedly 2 (fn [] (rand-nth [(fn [] (repeat 10 3)) \\n                                 (fn [] (map \#(+ %1 %2) \\n                                             (range 0 9)\\n                                             (repeat 10 3)))\\n                                 (fn [] (map \#(+ %1 %2) \\r\\n                                     (map \#(* -1 %1)  (range 0 9))\\r\\n                                     (repeat 10 3)))])))]\\n    [(nth map-proc 0) (nth map-proc 1) ]))" "(nth tt 1)" "(nth tt 0)" "(def tt \\n  (let [map-proc (repeatedly 2 (fn [] (rand-nth [(repeat 10 3) \\n                                 (map \#(+ %1 %2) \\n                                      (range 0 9)\\n                                      (repeat 10 3))\\n                                 (map \#(+ %1 %2) \\r\\n                                     (map \#(* -1 %1)  (range 0 9))\\r\\n                                     (repeat 10 3))])))]\\n    [(nth map-proc 0) (nth map-proc 1) ]))" "(nth tt 0)" "(nth tt 1)" "\\n  (let [map-proc (repeatedly 2 (fn [] (rand-nth [(repeat 10 3) \\n                                 (map \#(+ %1 %2) \\n                                      (range 0 9)\\n                                      (repeat 10 3))\\n                                 (map \#(+ %1 %2) \\r\\n                                     (map \#(* -1 %1)  (range 0 9))\\r\\n                                     (repeat 10 3))])))]\\n    (partition 2 (interleave (nth map-proc 0) (nth map-proc 1))))" "\\n(let [map-proc (repeatedly 2 (fn [] (rand-nth [(repeat 10 3) \\n                                               (map \#(+ %1 %2) \\n                                                    (range 0 9)\\n                                                    (repeat 10 3))\\n                                               (map \#(+ %1 %2) \\r\\n                                                    (map \#(* -1 %1)  (range 0 9))\\r\\n                                                    (repeat 10 3))])))]\\n  (partition 2 (interleave (nth map-proc 0) (nth map-proc 1))))" "\\n(let [map-proc (repeatedly 2 (fn [] (rand-nth [(repeat 10 100) \\n                                               (map \#(+ %1 %2) \\n                                                    (range 0 9)\\n                                                    (repeat 10 50))\\n                                               (map \#(+ %1 %2) \\r\\n                                                    (map \#(* -1 %1)  (range 0 9))\\r\\n                                                    (repeat 10 3))])))]\\n  (partition 2 (interleave (nth map-proc 0) (nth map-proc 1))))" "(def tt \\n  (let [map-proc (repeatedly 2 (fn [] (rand-nth [(repeat 10 50) \\n                                 (map \#(+ %1 %2) \\n                                      (range 0 9)\\n                                      (repeat 10 100))\\n                                 (map \#(+ %1 %2) \\r\\n                                     (map \#(* -1 %1)  (range 0 9))\\r\\n                                     (repeat 10 3))])))]\\n    [(nth map-proc 0) (nth map-proc 1) ]))" "\\n  (let [map-proc (repeatedly 2 (fn [] (rand-nth [(repeat 10 50) \\n                                 (map \#(+ %1 %2) \\n                                      (range 0 9)\\n                                      (repeat 10 100))\\n                                 (map \#(+ %1 %2) \\r\\n                                     (map \#(* -1 %1)  (range 0 9))\\r\\n                                     (repeat 10 3))])))]\\n    (partition 2 (interleave (nth map-proc 0) (nth map-proc 1))))" "\\n  (let [map-proc (repeatedly 2 (fn [] (rand-nth [(repeat 10 50) \\n                                 (map \#(+ %1 %2) \\n                                      (range 0 9)\\n                                      (repeat 10 50))\\n                                 (map \#(+ %1 %2) \\r\\n                                     (map \#(* -1 %1)  (range 0 9))\\r\\n                                     (repeat 10 100))])))]\\n    (partition 2 (interleave (nth map-proc 0) (nth map-proc 1))))" "\\n  (let [map-proc (repeatedly 2 (fn [] (rand-nth [(repeat 10 50) \\n                                 (map \#(+ %1 %2) \\n                                      (range 0 9)\\n                                      (repeat 10 50))\\n                                 (map \#(+ %1 %2) \\r\\n                                     (map \#(* -1 %1)  (range 0 9))\\r\\n                                     (repeat 10 50))])))]\\n    (partition 2 (interleave (nth map-proc 0) (nth map-proc 1))))" "\\n  (let [map-proc (repeatedly 2 (fn [] (rand-nth [(repeat 10 50) \\n                                 (map \#(+ %1 %2) \\n                                      (range 0 9)\\n                                      (repeat 10 50))\\n                                 (map \#(+ %1 %2) \\r\\n                                     (map \#(* -1 %1)  (range 0 9))\\r\\n                                     (repeat 10 100))])))]\\n    (partition 2 (interleave (nth map-proc 0) (nth map-proc 1))))" "\\n  (let [map-proc (repeatedly 2 (fn [] (rand-nth [(repeat 10 50) \\n                                 (map \#(+ %1 %2) \\n                                      (range 0 9)\\n                                      (repeat 10 50))\\n                                 (map \#(+ %1 %2) \\r\\n                                     (map \#(* -1 %1)  (range 0 9))\\r\\n                                     (repeat 10 50))])))]\\n    (partition 2 (interleave (nth map-proc 0) (nth map-proc 1))))" "\\n  (let [path-gen-list [(repeat 10 50) \\r\\n                                 (map \#(+ %1 %2) \\r\\n                                      (range 0 9)\\r\\n                                      (repeat 10 50))\\r\\n                                 (map \#(+ %1 %2) \\r\\n                                     (map \#(* -1 %1)  (range 0 9))\\r\\n                                     (repeat 10 50))]\\n         valid-comb [[0 1][0 2][1 0][2 0][1 1][2 2][1 2][2 1]]\\n         dir-sel (rand-nth valid-comb)\\n        ]\\n    (partition 2 (interleave (nth path-gen-list (first dir-sel)) (nth path-gen-list (second dir-sel)))))" "\\n  (let [path-gen-list (fn [length start] [(repeat length start) \\r\\n                                 (map \#(+ %1 %2) \\r\\n                                      (range 0 length)\\r\\n                                      (repeat length start))\\r\\n                                 (map \#(+ %1 %2) \\r\\n                                     (map \#(* -1 %1)  (range 0 length))\\r\\n                                     (repeat length start))])\\n         valid-comb [[0 1][0 2][1 0][2 0][1 1][2 2][1 2][2 1]]\\n         dir-sel (rand-nth valid-comb)\\n        ]\\n    (partition 2 (interleave (nth (path-gen-list 10 40) (first dir-sel)) (nth (path-gen-list 10 60) (second dir-sel)))))" "\\n(defn [x y length]  \\n(let [path-gen-list (fn [length start] [(repeat length start) \\r\\n                                 (map \#(+ %1 %2) \\r\\n                                      (range 0 length)\\r\\n                                      (repeat length start))\\r\\n                                 (map \#(+ %1 %2) \\r\\n                                     (map \#(* -1 %1)  (range 0 length))\\r\\n                                     (repeat length start))])\\n       valid-comb [[0 1][0 2][1 0][2 0][1 1][2 2][1 2][2 1]]\\n       dir-sel (rand-nth valid-comb)\\n      ]\\n  (partition 2 (interleave (nth (path-gen-list length x) (first dir-sel)) (nth (path-gen-list length y) (second dir-sel))))))" "\\n(defn get-path [x y length]  \\n(let [path-gen-list (fn [length start] [(repeat length start) \\r\\n                                 (map \#(+ %1 %2) \\r\\n                                      (range 0 length)\\r\\n                                      (repeat length start))\\r\\n                                 (map \#(+ %1 %2) \\r\\n                                     (map \#(* -1 %1)  (range 0 length))\\r\\n                                     (repeat length start))])\\n       valid-comb [[0 1][0 2][1 0][2 0][1 1][2 2][1 2][2 1]]\\n       dir-sel (rand-nth valid-comb)\\n      ]\\n  (partition 2 (interleave (nth (path-gen-list length x) (first dir-sel)) (nth (path-gen-list length y) (second dir-sel))))))" "(get-path 200 100)" "(get-path 200 100 20\\n          )" "\\r\\n(defn get-path \\r\\n  \\"Creates a random path 45 deg increments with starting point x y and length\\"\\r\\n  [x y length]  \\r\\n  (let [path-gen-list (fn [length start] [(repeat length start) \\r\\n                                          (map \#(+ %1 %2) \\r\\n                                               (range 0 length)\\r\\n                                               (repeat length start))\\r\\n                                          (map \#(+ %1 %2) \\r\\n                                               (map \#(* -1 %1)  (range 0 length))\\r\\n                                               (repeat length start))])\\r\\n        valid-comb [[0 1][0 2][1 0][2 0][1 1][2 2][1 2][2 1]]\\r\\n        dir-sel (rand-nth valid-comb)\\r\\n        ]\\r\\n    (partition 2 (interleave (nth (path-gen-list length x) (first dir-sel)) (nth (path-gen-list length y) (second dir-sel))))))" "(get-path 100 200 40)" "(def session (atom {}))" "(defn get-tail-paths [image config]\\n  (let [numPlacedBiased (int (* (\:trailNum session) (\:placementHeuristic config) (\:numAnts config)))]\\n    \\r\\n  numPlacedBiased))" "(reset\! session (assoc @session \:tailNum 2))" "(defn inc-trail[]\\n(reset\! session (assoc @session \:trialNum (\:trialNum @session))))" "(reset\! session (assoc @session \:trialNum 2))" "(defn inc-trail[]\\n(reset\! session (assoc @session \:trialNum (\:trialNum @session))))" "(inc-trail)" "(defn inc-trail[]\\n(reset\! session \\n        (assoc @session \:trialNum \\n               (inc \\n                 (\:trialNum @session)))))" "(inc-trail)" "(defn get-tail-paths [image config]\\n  (let [numPlacedBiased (int (* (\:trailNum session) (\:placementHeuristic config) (\:numAnts config)))]\\r\\n  numPlacedBiased))" "(def session (atom {\:trialNum 0}))\\r\\n\\r\\n(def config (get-config))" "(defn get-tail-paths [image config]\\n  (let [numPlacedBiased (int (* (\:trailNum session) (\:placementHeuristic config) (\:numAnts config)))]\\r\\n  numPlacedBiased))" "(get-tail-paths)" "(defn get-tail-paths [image]\\n  (let [numPlacedBiased (int (* (\:trailNum session) (\:placementHeuristic config) (\:numAnts config)))]\\r\\n  numPlacedBiased))" "(get-tail-paths nil)" "(\:placementHeuristic config)" "(def config (get-config))" "(\:placementHeuristic config)" "(def config (get-config))" "(\:placementHeuristic config)" "(get-tail-paths nil)" "(defn get-tail-paths [image]\\n  (let [numPlacedBiased (int (* (\:trailNum session) (\:placementHeuristic config) (\:numAnts config)))]\\r\\n  numPlacedBiased))" "(\:trailNum session)" "(defn get-tail-paths [image]\\n  (let [numPlacedBiased (int (* (\:trialNum session) (\:placementHeuristic config) (\:numAnts config)))]\\r\\n  numPlacedBiased))" "(\:trailNum session)" "session" "(inc-trail)" "session" "(defn get-tail-paths [image]\\n  (let [numPlacedBiased (int (* (\:trialNum session) (\:placementHeuristic config) (\:numAnts config)))]\\r\\n  numPlacedBiased))" "(\:trialNum session)" "session" "(defn get-tail-paths [image]\\n  (let [numPlacedBiased (int (* (\:trialNum @session) (\:placementHeuristic config) (\:numAnts config)))]\\r\\n  numPlacedBiased))" "(\:trialNum session)" "(\:trialNum @session)" "(defn get-tail-paths [image]\\n  (let [numPlacedBiased (int (* (\:trialNum @session) (\:placementHeuristic config) (\:numAnts config)))]\\r\\n  numPlacedBiased))" "(get-tail-paths nil)" "(defn get-tail-paths [image]\\r\\n  (let [numPlacedBiased (int (* (\:trialNum @session) (\:placementHeuristic config) (\:numAnts config))) \\n        randPaths (map (get-path %1 %2 (\:maxPathLength config)) (random-staring-coords image))]\\r\\n  randPaths))" "(get-method)" "(get-image)" "(get-tail-paths (get-image))" "(int (* (\:trialNum @session) (\:placementHeuristic config) (\:numAnts config)))" "(\:trialNum @session)" "(in-ns trailUtil)" "(in-ns tgaa.util.trailUtil)" "(in-ns 'tgaa.util.trailUtil)" "(get-path 10 10 10)" "config" "session" "(inc-trail)" "(get-trail-paths (tgaa.util.image/get-image))" "(tgaa.util.image/get-image)" "(get-trail-paths (tgaa.util.image/get-image))" "(int (* (\:trialNum @session) (\:placementHeuristic config) (\:numAnts config)))" "(map \#(get-path %1 %2 (\:maxPathLength config)) (random-staring-coords (tgaa.util.image/get-image)))" "(map \#(get-path (nth % 0) (nth % 1) (\:maxPathLength config)) (random-staring-coords (tgaa.util.image/get-image)))" "\\r\\n(defn get-trail-paths [image]\\r\\n     (let [numPlacedBiased (int \\n                             (* \\n                               (\:trialNum @session) \\n                               (\:placementHeuristic config) \\n                               (\:numAnts config))) \\r\\n           randPaths (map \#(get-path (nth % 0) \\n                                     (nth % 1)\\n                                     (\:maxPathLength config)) \\n                          (random-staring-coords \\n                            (tgaa.util.image/get-image)))]\\r\\n     randPaths))" "(get-trail-paths (tgaa.util.image/get-image))" "(tgaa.util.trailUtil/get-trail-paths (get-image))" "(\:canPaths session)" "session" "(reset\! session (assoc @session \:canPaths [[1 1][2 2]]))" "(\:canPaths session)" "(\:canPaths @session)" "\\r\\n(defn get-path \\r\\n  \\"Creates a random path 45 deg increments with starting point x y and length\\"\\r\\n  [x y length]  \\r\\n  (let [path-gen-list (fn [length start] [(repeat length start) \\r\\n                                          (map \#(+ %1 %2) \\r\\n                                               (range 0 length)\\r\\n                                               (repeat length start))\\r\\n                                          (map \#(+ %1 %2) \\r\\n                                               (map \#(* -1 %1)  (range 0 length))\\r\\n                                               (repeat length start))])\\r\\n        valid-comb [[0 1][0 2][1 0][2 0][1 1][2 2][1 2][2 1]]\\r\\n        dir-sel (rand-nth valid-comb)\\r\\n        ]\\r\\n    \\r\\n    (partition 2 (interleave (nth (path-gen-list length x) (first dir-sel)) (nth (path-gen-list length y) (second dir-sel))))))" "(+ 1 1)" "\\r\\n(defn get-path \\r\\n  \\"Creates a random path 45 deg increments with starting point x y and length\\"\\r\\n  [x y length]  \\r\\n  (let [path-gen-list (fn [length start] [(repeat length start) \\r\\n                                          (map \#(+ %1 %2) \\r\\n                                               (range 0 length)\\r\\n                                               (repeat length start))\\r\\n                                          (map \#(+ %1 %2) \\r\\n                                               (map \#(* -1 %1)  (range 0 length))\\r\\n                                               (repeat length start))])\\r\\n        valid-comb [[0 1][0 2][1 0][2 0][1 1][2 2][1 2][2 1]]\\r\\n        dir-sel (rand-nth valid-comb)\\r\\n        ]\\r\\n    \\r\\n    (partition 2 (interleave (nth (path-gen-list length x) (first dir-sel)) (nth (path-gen-list length y) (second dir-sel))))))" "(defn get-path \\r\\n  \\"Creates a random path 45 deg increments with starting point x y and length\\"\\r\\n  [x y length]  \\r\\n  (let [path-gen-list (fn [length start] [(repeat length start) \\r\\n                                          (map \#(+ %1 %2) \\r\\n                                               (range 0 length)\\r\\n                                               (repeat length start))\\r\\n                                          (map \#(+ %1 %2) \\r\\n                                               (map \#(* -1 %1)  (range 0 length))\\r\\n                                               (repeat length start))])\\r\\n        valid-comb [[0 1][0 2][1 0][2 0][1 1][2 2][1 2][2 1]]\\r\\n        dir-sel (rand-nth valid-comb)\\r\\n        ]\\r\\n    \\r\\n    (partition 2 (interleave (nth (path-gen-list length x) (first dir-sel)) (nth (path-gen-list length y) (second dir-sel))))))" "(defn get-path \\r\\n  \\"Creates a random path 45 deg increments with starting point x y and length\\"\\r\\n  [x y length image]  \\r\\n  (let [path-gen-list (fn [length start] [(repeat length start) \\r\\n                                          (map \#(+ %1 %2) \\r\\n                                               (range 0 length)\\r\\n                                               (repeat length start))\\r\\n                                          (map \#(+ %1 %2) \\r\\n                                               (map \#(* -1 %1)  (range 0 length))\\r\\n                                               (repeat length start))])\\r\\n        rand-direc [[0 1][0 2][1 0][2 0][1 1][2 2][1 2][2 1]]\\n        dir-\\r\\n        dir-sel (rand-nth valid-comb)\\n        path-dirty (partition 2 (interleave (nth (path-gen-list length x) (first dir-sel)) (nth (path-gen-list length y) (second dir-sel))))\\n        valid-path \\r\\n        ]\\r\\n    \\r\\n    ))" "(shuffle [[1 1] [2 2] [3 3]])" "\\r\\n(defn path-last-point-gen [length start]\\r\\n  \\"Get last points of gen axis of a path for performance\\"\\r\\n  [ \#(start)\\r\\n   (+ start length)\\r\\n   (- start length)])\\r\\n   \\r\\n\\r\\n(defn path-generator [length start]\\r\\n  \\"Generates list of functions for one axis of a path\\"\\r\\n  [(repeat length start) \\r\\n   (map \#(+ %1 %2) \\r\\n        (range 0 length)\\r\\n        (repeat length start))\\r\\n   (map \#(+ %1 %2) \\r\\n        (map \#(* -1 %1)  (range 0 length))\\r\\n        (repeat length start))])" "(path-generator 10 10)" "(path-last-point-gen 10 10)" "(defn path-last-point-gen [length start]\\r\\n  \\"Get last points of gen axis of a path for performance\\"\\r\\n  [ start\\r\\n   (+ start length)\\r\\n   (- start length)])" "(path-last-point-gen 10 10)" "(path-generator 10 10)" "(count (path-generator 10 10))" "(map count (path-generator 10 10))" "(defn path-last-point-gen [length start]\\r\\n  \\"Get last points of gen axis of a path for performance\\"\\r\\n  [ start\\r\\n   (+ start (- length 1))\\r\\n   (- start (+ length 1))])" "(path-last-point-gen 10 10)" "(path-generator 10 10)" "(defn path-last-point-gen [length start]\\r\\n  \\"Get last points of gen axis of a path for performance\\"\\r\\n  [ start\\r\\n   (+ start (- length 1))\\r\\n   (+ (- start  length ) 1)])" "(path-last-point-gen 10 10)" "(path-generator 10 10)" "(defn path-generator [dir]\\r\\n  \\"Generates list of functions for one axis of a path\\"\\r\\n  (fn [length start]\\r\\n    (cond \\r\\n      (\= 0 dir)\\r\\n      (repeat length start) \\r\\n      (\= 1 dir)\\r\\n      (map \#(+ %1 %2) \\r\\n           (range 0 length)\\r\\n           (repeat length start))\\r\\n      \:else\\r\\n      (map \#(+ %1 %2) \\r\\n           (map \#(* -1 %1)  (range 0 length))\\r\\n           (repeat length start)))))" "(path-generator 0)" "((path-generator 0) 10 10)" "((path-generator 1) 10 10)" "((path-generator 2\\n                 ) 10 10)" "(defn path-last-point-gen [dir]\\r\\n  \\"Get last points of gen axis of a path for performance\\"\\r\\n  (fn [length start]\\r\\n    (cond \\r\\n      (\= 0 dir)\\r\\n      start\\r\\n      (\= 1 dir)\\r\\n      (+ start (- length 1))\\r\\n      \:else\\r\\n      (+ (- start  length ) 1))))" "(path-last-point-gen 3)" "((path-last-point-gen 3) 10 10)" "((path-last-point-gen 2\\n                      ) 10 10)" "((path-last-point-gen 0) 10 10)" "((path-last-point-gen 1) 10 10)" "((path-last-point-gen 2) 10 10)" "(defn ant-path [x y dir-vec]\\r\\n  (partition 2 \\n             (interleave \\n               ((path-generator (first dir-sel)) length x ) \\n               ((path-generator (second dir-sel)) length y))))" "(defn ant-path [x y dir-sel]\\r\\n  (partition 2 \\n             (interleave \\n               ((path-generator (first dir-sel)) length x ) \\n               ((path-generator (second dir-sel)) length y))))" "(defn ant-path [x y length dir-sel]\\r\\n  (partition 2 \\n             (interleave \\n               ((path-generator (first dir-sel)) length x ) \\n               ((path-generator (second dir-sel)) length y))))" "(ant-path 300 200 20 [1 1])" "(defn ant-path [x y length dir-sel image]\\r\\n  \\"Creates an ant path. Path must be valid or exception is thrown\\"\\r\\n  (map \#(vector %1 %2 (image-values image %1 %2))\\r\\n               ((path-generator (first dir-sel)) length x ) \\r\\n               ((path-generator (second dir-sel)) length y)))" "(defn ant-valid-path \\r\\n  \\"Creates a random path 45 deg increments with starting point x y and length\\"\\r\\n  [x y length image]  \\r\\n  (map \#({ \:last [(path-last-point-gen length %1) (path-last-point-gen length %2)] \:dir-sel [%1 %2]})  (shuffle dir-sel)))" "(def dir-sel [[0 1][0 2][1 0][2 0][1 1][2 2][1 2][2 1]])" "(defn ant-valid-path \\r\\n  \\"Creates a random path 45 deg increments with starting point x y and length\\"\\r\\n  [x y length image]  \\r\\n  (map \#({ \:last [(path-last-point-gen length %1) (path-last-point-gen length %2)] \:dir-sel [%1 %2]})  (shuffle dir-sel)))" "(defn ant-valid-path \\r\\n  \\"Creates a random path 45 deg increments with starting point x y and length\\"\\r\\n  [x y length image]\\n  (filter  \#(and (>- ((\:last %)\\r\\n  (map \#({ \:last [(path-last-point-gen length %1) (path-last-point-gen length %2)] \:dir-sel [%1 %2]})  (shuffle dir-sel)))" "(-> 1 (\= 1))" "(defn ant-valid-path \\r\\n  \\"Creates a random path 45 deg increments with starting point x y and length\\"\\r\\n  [x y length image]\\n  (filter  \#(let [ x-l (nth (\:last %) 0)\\n                  y-l (nth (\:last %) 1)]\\n                  (and (>\= x-l 0) (< x-l (. imge getWidth)) (>- y-l 0) (< y-l (. image getHeight))))\\r\\n  (map \#({ \:last [(path-last-point-gen length %1) (path-last-point-gen length %2)] \:dir-sel [%1 %2]})  (shuffle dir-sel)))" "(defn ant-valid-path \\r\\n  \\"Creates a random path 45 deg increments with starting point x y and length\\"\\r\\n  [x y length image]\\n  (filter  \#(let [ x-l (nth (\:last %) 0)\\n                  y-l (nth (\:last %) 1)]\\n                  (and (>\= x-l 0) (< x-l (. imge getWidth)) (>- y-l 0) (< y-l (. image getHeight))))\\r\\n  (map \#({ \:last [(path-last-point-gen length %1) (path-last-point-gen length %2)] \:dir-sel [%1 %2]})  (shuffle dir-sel))))" "(defn ant-valid-path \\r\\n  \\"Creates a random path 45 deg increments with starting point x y and length\\"\\r\\n  [x y length image]\\n  (filter  \#(let [ x-l (nth (\:last %) 0)\\n                  y-l (nth (\:last %) 1)]\\n                  (and (>\= x-l 0) (< x-l (. image getWidth)) (>- y-l 0) (< y-l (. image getHeight))))\\r\\n  (map \#({ \:last [(path-last-point-gen length %1) (path-last-point-gen length %2)] \:dir-sel [%1 %2]})  (shuffle dir-sel))))" "(defn ant-valid-path \\r\\n  \\"Creates a random path 45 deg increments with starting point x y and length\\"\\r\\n  [x y length image]\\n  (filter  \#(let [ x-l (nth (\:last %) 0)\\n                  y-l (nth (\:last %) 1)]\\n                  (and (>\= x-l 0) (< x-l (. image getWidth)) (>\= y-l 0) (< y-l (. image getHeight))))\\r\\n  (map \#({ \:last [(path-last-point-gen length %1) (path-last-point-gen length %2)] \:dir-sel [%1 %2]})  (shuffle dir-sel))))" "(def i (get-image))" "(ant-valid-path 100 100 10 i)" "(defn ant-valid-path \\r\\n  \\"Creates a random path 45 deg increments with starting point x y and length\\"\\r\\n  [x y length image]\\n\\r\\n  (map \#({ \:last [(path-last-point-gen length %1) (path-last-point-gen length %2)] \:dir-sel [%1 %2]})  (shuffle dir-sel))))" "(defn ant-valid-path \\r\\n  \\"Creates a random path 45 deg increments with starting point x y and length\\"\\r\\n  [x y length image]\\n\\r\\n  (map \#({ \:last [(path-last-point-gen length %1) (path-last-point-gen length %2)] \:dir-sel [%1 %2]})  (shuffle dir-sel)))" "(ant-valid-path 100 100 10 i)" "(defn ant-valid-path \\r\\n  \\"Creates a random path 45 deg increments with starting point x y and length\\"\\r\\n  [x y length image]\\n  (filter  \#(let [ x-l (nth (\:last %) 0)\\n                  y-l (nth (\:last %) 1)]\\n                  (and (>\= x-l 0) (< x-l (. image getWidth)) (>\= y-l 0) (< y-l (. image getHeight))))\\r\\n  (map \#({ \:last [(path-last-point-gen length %1) (path-last-point-gen length %2)] \:dir-sel [%1 %2]})  (shuffle dir-sel))))" "\\r\\n(def dir-sel [[0 1][0 2][1 0][2 0][1 1][2 2][1 2][2 1]])\\r\\n\\r\\n(defn path-last-point-gen [dir]\\r\\n  \\"Get last points of gen axis of a path for performance\\"\\r\\n  (fn [length start]\\r\\n    (cond \\r\\n      (\= 0 dir)\\r\\n      start\\r\\n      (\= 1 dir)\\r\\n      (+ start (- length 1))\\r\\n      \:else\\r\\n      (+ (- start  length ) 1))))\\r\\n\\r\\n(defn path-generator [dir]\\r\\n  \\"Generates list of functions for one axis of a path\\"\\r\\n  (fn [length start]\\r\\n    (cond \\r\\n      (\= 0 dir)\\r\\n      (repeat length start) \\r\\n      (\= 1 dir)\\r\\n      (map \#(+ %1 %2) \\r\\n           (range 0 length)\\r\\n           (repeat length start))\\r\\n      \:else\\r\\n      (map \#(+ %1 %2) \\r\\n           (map \#(* -1 %1)  (range 0 length))\\r\\n           (repeat length start)))))" "\\r\\n(defn random-staring-coords \\r\\n  \\"Get random set of coordinates\\"\\r\\n  [^BufferedImage image]\\r\\n  (partition 2\\r\\n             (interleave \\r\\n               (repeatedly \\r\\n                      (\:numAnts config) \\r\\n                      \#(rand-int \\r\\n                         (. image getWidth)))\\r\\n        (repeatedly \\r\\n               (\:numAnts config) \\r\\n               \#(rand-int \\r\\n                  (. image getHeight))))))" "(defn ant-path [x y length dir-sel image]\\r\\n  \\"Creates an ant path. Path must be valid or exception is thrown\\"\\r\\n  (map \\r\\n    \#(vector %1 %2 (. image getRGB %1 %2))\\r\\n    ((path-generator (first dir-sel)) length x ) \\r\\n    ((path-generator (second dir-sel)) length y)))" "(ant-path 100 100 10 [1 1])" "(defn ant-path [x y length dir-sel image]\\r\\n  \\"Creates an ant path. Path must be valid or exception is thrown\\"\\r\\n  (map \\r\\n    \#(vector %1 %2 (. image getRGB %1 %2))\\r\\n    ((path-generator (first dir-sel)) length x ) \\r\\n    ((path-generator (second dir-sel)) length y)))" "(ant-path 100 100 10 [1 1])" "(ant-path 100 100 10 [1 1] i)" "(defn path-generator [dir]\\r\\n  \\"Generates list of functions for one axis of a path\\"\\r\\n  (fn [start]\\r\\n    (let [path-len (\:maxPathLength config)]\\r\\n      (cond \\r\\n        (\= 0 dir)\\r\\n        (repeat path-len start) \\r\\n        (\= 1 dir)\\r\\n        (map \#(+ %1 %2) \\r\\n             (range 0 path-len)\\r\\n             (repeat path-len) start)\\r\\n      \:else\\r\\n      (map \#(+ %1 %2) \\r\\n           (map \#(* -1 %1)  path-len)\\r\\n           (repeat path-len start))))))" "(def dir-sel [[0 1][0 2][1 0][2 0][1 1][2 2][1 2][2 1]])\\r\\n\\r\\n(defn path-last-point-gen [dir]\\r\\n  \\"Get last points of gen axis of a path for performance\\"\\r\\n  (fn [start]\\r\\n    (cond \\r\\n      (\= 0 dir)\\r\\n      start\\r\\n      (\= 1 dir)\\r\\n      (+ start (- (\:maxPathLength config) 1))\\r\\n      \:else\\r\\n      (+ (- start  (\:maxPathLength config) ) 1))))\\r\\n\\r\\n(defn path-generator [dir]\\r\\n  \\"Generates list of functions for one axis of a path\\"\\r\\n  (fn [start]\\r\\n    (let [path-len (\:maxPathLength config)]\\r\\n      (cond \\r\\n        (\= 0 dir)\\r\\n        (repeat path-len start) \\r\\n        (\= 1 dir)\\r\\n        (map \#(+ %1 %2) \\r\\n             (range 0 path-len)\\r\\n             (repeat path-len) start)\\r\\n      \:else\\r\\n      (map \#(+ %1 %2) \\r\\n           (map \#(* -1 %1)  path-len)\\r\\n           (repeat path-len start))))))\\r\\n  \\r\\n(defn random-staring-coords \\r\\n  \\"Get random set of coordinates\\"\\r\\n  [^BufferedImage image]\\r\\n  (partition 2\\r\\n             (interleave \\r\\n               (repeatedly \\r\\n                      (\:numAnts config) \\r\\n                      \#(rand-int \\r\\n                         (. image getWidth)))\\r\\n        (repeatedly \\r\\n               (\:numAnts config) \\r\\n               \#(rand-int \\r\\n                  (. image getHeight))))))\\r\\n\\r\\n(defn ant-path [x y dir-sel image]\\r\\n  \\"Creates an ant path. Path must be valid or exception is thrown\\"\\r\\n  (map \\r\\n    \#(vector %1 %2 (. image getRGB %1 %2))\\r\\n    ((path-generator (first dir-sel)) x ) \\r\\n    ((path-generator (second dir-sel)) y)))" "(ant-valid-path 100 100 10 i)" "(ant-valid-path 100 100 i)" "(ant-path 100 100 [1 1] i)" "(map \\r\\n    \#(vector %1 %2 (. i getRGB %1 %2))\\r\\n    ((path-generator 1) 100 ) \\r\\n    ((path-generator 0) 100))" "(map \\r\\n    (fn [x y] vector x y (. i getRGB x y))\\r\\n    ((path-generator 1) 100 ) \\r\\n    ((path-generator 0) 100))" "((path-generator 1) 100 )" "(path-generator 1)" "((path-generator 1) 5)" "(\:maxPathLength config)" "(let [path-len (\:maxPathLength config)]\\r\\n      (cond \\r\\n        (\= 0 dir)\\r\\n        (repeat path-len start) \\r\\n        (\= 1 dir)\\r\\n        (map \#(+ %1 %2) \\r\\n             (range 0 path-len)\\r\\n             (repeat path-len) start)\\r\\n      \:else\\r\\n      (map \#(+ %1 %2) \\r\\n           (map \#(* -1 %1)  path-len)\\r\\n           (repeat path-len start))))))" "(let [path-len (\:maxPathLength config)]\\r\\n      (cond \\r\\n        (\= 0 1)\\r\\n        (repeat path-len start) \\r\\n        (\= 1 1)\\r\\n        (map \#(+ %1 %2) \\r\\n             (range 0 path-len)\\r\\n             (repeat path-len) start)\\r\\n      \:else\\r\\n      (map \#(+ %1 %2) \\r\\n           (map \#(* -1 %1)  path-len)\\r\\n           (repeat path-len start))))" "(let [path-len (\:maxPathLength config)]\\r\\n      (cond \\r\\n        (\= 0 1)\\r\\n        (repeat path-len 10) \\r\\n        (\= 1 1)\\r\\n        (map \#(+ %1 %2) \\r\\n             (range 0 path-len)\\r\\n             (repeat path-len) 10)\\r\\n      \:else\\r\\n      (map \#(+ %1 %2) \\r\\n           (map \#(* -1 %1)  path-len)\\r\\n           (repeat path-len 10))))" "\\r\\n      (cond \\r\\n        (\= 0 1)\\r\\n        (repeat path-len 10) \\r\\n        (\= 1 1)\\r\\n        (map \#(+ %1 %2) \\r\\n             (range 0 4)\\r\\n             (repeat 4) 10)\\r\\n      \:else\\r\\n      (map \#(+ %1 %2) \\r\\n           (map \#(* -1 %1)  4)\\r\\n           (repeat 4 10)))" "\\r\\n      (cond \\r\\n        (\= 0 1)\\r\\n        (repeat 4 10) \\r\\n        (\= 1 1)\\r\\n        (map \#(+ %1 %2) \\r\\n             (range 0 4)\\r\\n             (repeat 4) 10)\\r\\n      \:else\\r\\n      (map \#(+ %1 %2) \\r\\n           (map \#(* -1 %1)  4)\\r\\n           (repeat 4 10)))" "\\r\\n      (cond \\r\\n        (\= 0 1)\\r\\n        (repeat 4 10) \\r\\n        (\= 1 1)\\r\\n        (map \#(+ %1 %2) \\r\\n             (range 0 4)\\r\\n             (repeat 4) 10)\\r\\n      \:else\\r\\n      (map \#(+ %1 %2) \\r\\n           (map \#(* -1 %1)\\r\\n           (repeat 4 10))))" "(map \#(* -1 %1)\\r\\n           (repeat 4 10))" "\\r\\n      (cond \\r\\n        (\= 0 1)\\r\\n        (repeat 4 10) \\r\\n        (\= 1 1)\\r\\n        (map \#(+ %1 %2) \\r\\n             (range 0 4)\\r\\n             (repeat 4))\\r\\n      \:else\\r\\n      (map \#(+ %1 %2) \\r\\n           (map \#(* -1 %1)\\r\\n           (repeat 4 10))))" "(range -10 10 )" "(defn path-generator [dir]\\r\\n  \\"Generates list of functions for one axis of a path\\"\\r\\n  (fn [start]\\r\\n    (let [path-len (\:maxPathLength config)]\\r\\n      (cond \\r\\n        (\= 0 dir)\\r\\n        (repeat path-len start) \\r\\n        (\= 1 dir)\\r\\n        (range start (+ start path-len))\\r\\n      \:else\\r\\n        (range start (- start path-len))))))" "(\\n  (path-generator 1) 10)" "(\\n  (path-generator 0) 10)" "(\\n  (path-generator 2) 10)" "(defn path-generator [dir]\\r\\n  \\"Generates list of functions for one axis of a path\\"\\r\\n  (fn [start]\\r\\n    (let [path-len (\:maxPathLength config)]\\r\\n      (cond \\r\\n        (\= 0 dir)\\r\\n        (repeat path-len start) \\r\\n        (\= 1 dir)\\r\\n        (range start (+ start path-len))\\r\\n        (\= 2 dir)\\r\\n        (range start (- start path-len))))))" "(\\n  (path-generator 0) 10)" "(\\n  (path-generator 1) 10)" "(\\n  (path-generator 2) 10)" "  \\"Generates list of functions for one axis of a path\\"\\r\\n  (fn [start]\\r\\n    (let [path-len (\:maxPathLength config)]\\r\\n      (cond \\r\\n        (\= 0 dir)\\r\\n        (repeat path-len start) \\r\\n        (\= 1 dir)\\r\\n        (range start (+ start path-len))\\r\\n        (\= 2 dir)\\r\\n        (range start (- start path-len))\\r\\n        \:else nil))))" "(defn path-generator [dir]\\r\\n  \\"Generates list of functions for one axis of a path\\"\\r\\n  (fn [start]\\r\\n    (let [path-len (\:maxPathLength config)]\\r\\n      (cond \\r\\n        (\= 0 dir)\\r\\n        (repeat path-len start) \\r\\n        (\= 1 dir)\\r\\n        (range start (+ start path-len))\\r\\n        (\= 2 dir)\\r\\n        (range start (- start path-len))\\r\\n        \:else nil))))" "(\\n  (path-generator 2) 10)" "((path-generator 2) 10)" "(path-generator 2)" "(defn path-generator [dir]\\r\\n  \\"Generates list of functions for one axis of a path\\"\\r\\n  (fn [start]\\r\\n    (let [path-len (\:maxPathLength config)]\\r\\n      (cond \\r\\n        (\= 0 dir)\\r\\n        (repeat path-len start) \\r\\n        (\= 1 dir)\\r\\n        (range start (+ start path-len))\\r\\n        (\= 2 dir)\\r\\n        (range (- start path-len) start)\\r\\n        \:else nil))))" "(path-generator 2)" "((path-generator 2) 10)" "(defn path-generator [dir]\\r\\n  \\"Generates list of functions for one axis of a path\\"\\r\\n  (fn [start]\\r\\n    (let [path-len (\:maxPathLength config)]\\r\\n      (cond \\r\\n        (\= 0 dir)\\r\\n        (repeat path-len start) \\r\\n        (\= 1 dir)\\r\\n        (range start (+ start path-len))\\r\\n        (\= 2 dir)\\r\\n        (inc (range (- start path-len) start))\\r\\n        \:else nil))))" "((path-generator 2) 10)" "(defn path-generator [dir]\\r\\n  \\"Generates list of functions for one axis of a path\\"\\r\\n  (fn [start]\\r\\n    (let [path-len (\:maxPathLength config)]\\r\\n      (cond \\r\\n        (\= 0 dir)\\r\\n        (repeat path-len start) \\r\\n        (\= 1 dir)\\r\\n        (range start (+ start path-len))\\r\\n        (\= 2 dir)\\r\\n        (range (- (+ start 1) path-len) start)\\r\\n        \:else nil))))" "((path-generator 2) 10)" "(count ((path-generator 2) 10))" "(defn path-generator [dir]\\r\\n  \\"Generates list of functions for one axis of a path\\"\\r\\n  (fn [start]\\r\\n    (let [path-len (\:maxPathLength config)]\\r\\n      (cond \\r\\n        (\= 0 dir)\\r\\n        (repeat path-len start) \\r\\n        (\= 1 dir)\\r\\n        (range start (+ start path-len))\\r\\n        (\= 2 dir)\\r\\n        (range (- (inc start) path-len) (inc start))\\r\\n        \:else nil))))" "(count ((path-generator 2) 10))" "((path-generator 2) 10)" "((path-generator 1) 10)" "(count ((path-generator 1) 10))" "(count ((path-generator 0) 10))" "(defn path-generator [dir]\\r\\n  \\"Generates list of functions for one axis of a path\\"\\r\\n  (fn [start]\\r\\n    (let [path-len (\:maxPathLength config)]\\r\\n      (cond \\r\\n        (\= 0 dir)\\r\\n        (repeat path-len start) \\r\\n        (\= 1 dir)\\r\\n        (range start (+ start path-len))\\r\\n        (\= 2 dir)\\r\\n        (range (- (inc start) path-len) (inc start))\\r\\n        \:else nil))))" "(defn ant-path [x y dir-sel image]\\r\\n  \\"Creates an ant path. Path must be valid or exception is thrown\\"\\r\\n  (map \\r\\n    \#(vector %1 %2 (. image getRGB %1 %2))\\r\\n    ((path-generator (first dir-sel)) x ) \\r\\n    ((path-generator (second dir-sel)) y)))" "(ant-path 100 100 [1 1] i)" "(ant-path 100 100 [1 2] i)" "(defn ant-valid-path \\r\\n  \\"Creates a random path 45 deg increments with starting point x y and length\\"\\r\\n  [x y length image]  \\r\\n  (map \#({\:last [(path-last-point-gen length %1) (path-last-point-gen length %2)] \:dir-sel [%1 %2]})  (shuffle dir-sel)))" "(ant-valid-path 100 100 i)" "(defn ant-valid-path \\r\\n  \\"Creates a random path 45 deg increments with starting point x y and length\\"\\r\\n  [x y image]  \\r\\n  (map \#({\:last [(path-last-point-gen (\:maxPathLength config) %1) (path-last-point-gen (\:maxPathLength config) %2)] \:dir-sel [%1 %2]})  (shuffle dir-sel)))" "(ant-valid-path 100 100 i)" "(defn ant-valid-path \\r\\n  \\"Creates a random path 45 deg increments with starting point x y and length\\"\\r\\n  [x y image]  \\r\\n  (map \#({\:last [((path-last-point-gen %1) x) ((path-last-point-gen %2) y)] \\r\\n          \:dir-sel [%1 %2]})  (shuffle dir-sel)))" "(ant-valid-path 100 100 i)" "(path-last-point-gen 1\\n                     )" "((path-last-point-gen 1) 10)" "(shuffle dir-sel)" "[((path-last-point-gen 1) 10) ((path-last-point-gen 2) 10)]" "(defn ant-valid-path \\r\\n  \\"Creates a random path 45 deg increments with starting point x y and length\\"\\r\\n  [x y image]  \\r\\n  (map \#({\:last [((path-last-point-gen (first %1)) x) ((path-last-point-gen (second %2)) y)] \\r\\n          \:dir-sel %})  (shuffle dir-sel)))" "(ant-valid-path 100 100 i)" "(defn ant-valid-path \\r\\n  \\"Creates a random path 45 deg increments with starting point x y and length\\"\\r\\n  [x y image]  \\r\\n  (map \#({\:last [((path-last-point-gen (first %)) x) ((path-last-point-gen (second %)) y)] \\r\\n          \:dir-sel %})  (shuffle dir-sel)))" "(ant-valid-path 100 100 i)" "(defn ant-valid-path \\r\\n  \\"Creates a random path 45 deg increments with starting point x y and length\\"\\r\\n  [x y image]  \\r\\n  (map \#({\:last [((path-last-point-gen (first %)) x) ((path-last-point-gen (second %)) y)] \\r\\n          \:dir-sel %})  (shuffle dir-sel)))" "  (map \#({\:last [((path-last-point-gen 1) 10) ((path-last-point-gen 2) 10)] \\r\\n          \:dir-sel [1 1]})  (shuffle dir-sel))" "  (map (fn [] {\:last [((path-last-point-gen 1) 10) ((path-last-point-gen 2) 10)] \\r\\n          \:dir-sel [1 1]})  (shuffle dir-sel))" "[((path-last-point-gen 1) 10) ((path-last-point-gen 2) 10)]" "  (map (fn [d] {\:last [((path-last-point-gen (first d)) 10) ((path-last-point-gen (second)) 10)] \\r\\n          \:dir-sel [1 1]})  (shuffle dir-sel))" "  (map (fn [d] {\:last [((path-last-point-gen (first d)) 10) ((path-last-point-gen (second d)) 10)] \\r\\n          \:dir-sel [1 1]})  (shuffle dir-sel))" "  (filter \#(let [lx (first (\:last %))\\n                 ly (second (\:last %))]\\n             (and (> lx 0) (> ly 0)))\\n  (map (fn [d] {\:last [((path-last-point-gen (first d)) 10) ((path-last-point-gen (second d)) 10)] \\r\\n          \:dir-sel [1 1]})  (shuffle dir-sel)))" "  (filter \#(let [lx (first (\:last %))\\n                 ly (second (\:last %))]\\n             (and (> lx 0) (> ly 0)))\\n  (map (fn [d] {\:last [((path-last-point-gen (first d)) 10) ((path-last-point-gen (second d)) 10)] \\r\\n          \:dir-sel %})  (shuffle dir-sel)))" "  (filter \#(let [lx (first (\:last %))\\n                 ly (second (\:last %))]\\n             (and (> lx 0) (> ly 0)))\\n  (map (fn [d] {\:last [((path-last-point-gen (first d)) 10) ((path-last-point-gen (second d)) 10)] \\r\\n          \:dir-sel % })  (shuffle dir-sel)))" "  (filter \#(let [lx (first (\:last %))\\n                 ly (second (\:last %))]\\n             (and (> lx 0) (> ly 0)))\\n  (map (fn [d] {\:last [((path-last-point-gen (first d)) 10) ((path-last-point-gen (second d)) 10)] \\r\\n          \:dir-sel d})  (shuffle dir-sel)))" " (let [ x 10\\n       y 10 ](filter \#(let [lx (first (\:last %))\\n                            ly (second (\:last %))]\\n                        (and (> lx 0) (> ly 0)))\\n             (map (fn [d] {\:last [((path-last-point-gen (first d)) x) ((path-last-point-gen (second d)) y)] \\r\\n          \:dir-sel d})  (shuffle dir-sel))))" " (let [ x 5\\n       y 5 ](filter \#(let [lx (first (\:last %))\\n                           ly (second (\:last %))]\\n                       (and (> lx 0) (> ly 0)))\\n            (map (fn [d] {\:last [((path-last-point-gen (first d)) x) ((path-last-point-gen (second d)) y)] \\r\\n          \:dir-sel d})  (shuffle dir-sel))))" " (let [ x 5\\n       y 5 ]\\n   (\:dir-sel (first (filter \#(let [lx (first (\:last %))\\n                               ly (second (\:last %))]\\n                           (and (> lx 0) (> ly 0)))\\n                (map (fn [d] {\:last [((path-last-point-gen (first d)) x) ((path-last-point-gen (second d)) y)] \\r\\n          \:dir-sel d})  (shuffle dir-sel))))))" " (let [ x 5\\n       y 5 \\n       image i]\\n   (\:dir-sel (first (filter \#(let [lx (first (\:last %))\\n                               ly (second (\:last %))]\\n                           (and (> lx 0) (> ly 0)) (< lx (. image getWidth)) (< ly (. image getHeight)))\\n                (map (fn [d] {\:last [((path-last-point-gen (first d)) x) ((path-last-point-gen (second d)) y)] \\r\\n          \:dir-sel d})  (shuffle dir-sel))))))" "(ant-path 10 10 (ant-valid-path 10 10 image) iage)" "(ant-path 10 10 (ant-valid-path 10 10 i) i)" "(ant-valid-path 10 10 i)" "\\r\\n(defn ant-valid-dir \\r\\n  \\"Creates a random path 45 deg increments with starting point x y and length\\"\\r\\n  [x y image] \\r\\n   (\:dir-sel (first \\r\\n               (filter \#(let [lx (first (\:last %))\\r\\n                              ly (second (\:last %))]\\r\\n                          (and (> lx 0) (> ly 0)) (< lx (. image getWidth)) (< ly (. image getHeight)))\\r\\n                       (map (fn [d] {\:last [((path-last-point-gen (first d)) x) ((path-last-point-gen (second d)) y)] \\r\\n                                          \:dir-sel d})  (shuffle dir-sel))))))" "(ant-path 10 10 (ant-valid-dir 10 10 i) i)" "(defn get-trail-paths [image]\\r\\n  \\"Gets ant paths for a trail based on session and config\\"\\r\\n     (let [numPlacedBiased (int \\r\\n                             (* \\r\\n                               (\:trialNum @session) \\r\\n                               (\:placementHeuristic config) \\r\\n                               (\:numAnts config))) \\r\\n           randPaths (map \#(get-path (nth % 0) \\r\\n                                     (nth % 1)\\r\\n                                      image) \\r\\n                          (random-staring-coords image))\\r\\n           ;biasPaths (if ((\:canPaths session)\\r\\n           ]\\r\\n     randPaths))" "(get-trail-paths i)" "(random-staring-coords i)" "(get-path 10 10 i)" "(ant-path 10 10 i)" "(defn ant-path [x y image]\\r\\n  \\"Creates an ant path. Path must be valid or exception is thrown\\"\\r\\n  (let [dir-sel (ant-valid-dir x y image)]\\r\\n    (map \\r\\n      \#(vector %1 %2 (. image getRGB %1 %2))\\r\\n    ((path-generator (first dir-sel)) x ) \\r\\n    ((path-generator (second dir-sel)) y))))" "(ant-path 10 10 i)" "(defn get-trail-paths [image]\\r\\n  \\"Gets ant paths for a trail based on session and config\\"\\r\\n     (let [numPlacedBiased (int \\r\\n                             (* \\r\\n                               (\:trialNum @session) \\r\\n                               (\:placementHeuristic config) \\r\\n                               (\:numAnts config))) \\r\\n           randPaths (map \#(ant-path (nth % 0) \\r\\n                                     (nth % 1)\\r\\n                                      image) \\r\\n                          (random-staring-coords image))\\r\\n           ;biasPaths (if ((\:canPaths session)\\r\\n           ]\\r\\n     randPaths))" "(get-trail-paths i)" "(if true 1 0)" "(if false 1 0)" "(list [[1 2][3 5]])" "(list [1 2][3 5])" "(list [[1 2][3 5]] [[5 8][9 0]])" "(apply first (list [[1 2][3 5]] [[5 8][9 0]])" "(apply first (list [[1 2][3 5]] [[5 8][9 0]]))" "(map first (list [[1 2][3 5]] [[5 8][9 0]]))" "(map \#(first %) (list [[1 2][3 5]] [[5 8][9 0]]))" "(map \#(first (first %)) (list [[1 2][3 5]] [[5 8][9 0]]))" "(map \#(first (key (first %))) (list [[1 2][3 5]] [[5 8][9 0]]))" "(map \#(first (keyword (first %))) (list [[1 2][3 5]] [[5 8][9 0]]))" "(map \#(first (key (first %))) (list [[1 2][3 5]] [[5 8][9 0]]))" "(map \#(first (keys (first %))) (list [[1 2][3 5]] [[5 8][9 0]]))" "(key a)" "(keyword \\"1\\")" "(map \#(first (keyword (first %))) (list [[1 2][3 5]] [[5 8][9 0]]))" "(map \#(first (keyword (str (first %)))) (list [[1 2][3 5]] [[5 8][9 0]]))" "(map \#(first (keyword (string (first %)))) (list [[1 2][3 5]] [[5 8][9 0]]))" "(str 1)" "(map \#(first (keyword (str (first %)))) (list [[1 2][3 5]] [[5 8][9 0]]))" "(keyword 1)" "(keyword \\"2\\"\\n         )" "(keyword \\"2\\")" "(map \#(keyword (str (first (first %)))) (list [[1 2][3 5]] [[5 8][9 0]]))" "(get-image)" "(print time)" "(let [ i (get-image)\\n      rx  (rand-int (. i getWidth))\\n      ry (range (. i getHeight))]\\n  (for [v 1000]\\n    (if (> v 0)" "(take (rand-int 10))" "(repeat (rand-int 10))" "(repeatedly (rand-int 10))" "(repeatedly \#(rand-int 10))" "(repeatedly 10 \#(rand-int 10))" "(rand-int 10)" "(repeatedly 10 (rand-int 10))" "(repeat 10 (rand-int 10))" "(repeat 10 \#(rand-int 10))" "(take 10 (repeat \#(rand-int 10)))" "(repeateldy 4 \#(rand-int 10))" "(repeatedly 4 \#(rand-int 10))" "(let [ i (get-image)\\n       c 1000\\n      rx  (repeatedly c \#(rand-int (. i getWidth))) \\n      ry (repeatedly c \#(rand-int (. i getHeight)))]\\n  (time\\n    (for [v c]\\n      (if (> v 1)\\n        (. i getRGB (nth rx v) (nth ry v))\\n        (recur (dec v))))))" "(let [ i (get-image)\\n       c 1000\\n      rx  (repeatedly c \#(rand-int (. i getWidth))) \\n      ry (repeatedly c \#(rand-int (. i getHeight)))]\\n  (time\\n    (for [v c]\\n      (if (> v 1)\\n        (. i getRGB (nth rx v) (nth ry v))\\n        \\"done\\")\\n        (recur (dec v)))))" "(let [ i (get-image)\\n       c 1000\\n      rx  (repeatedly c \#(rand-int (. i getWidth))) \\n      ry (repeatedly c \#(rand-int (. i getHeight)))]\\n  (time\\n    (for [v c]\\n      (if (> v 1)\\n        (. i getRGB (nth rx v) (nth ry v)))\\n        (recur (dec v)))))" "(let [ i (get-image)\\n       c 1000\\n      rx  (repeatedly c \#(rand-int (. i getWidth))) \\n      ry (repeatedly c \#(rand-int (. i getHeight)))]\\n  (time\\n    (loop [v c]\\n      (if (> v 1)\\n        (. i getRGB (nth rx v) (nth ry v)))\\n        (recur (dec v)))))" "(let [ i (get-image)\\n       c 1000\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\n  (time\\n    (loop [v c]\\n      (if (> v 1)\\n        (. i getRGB (nth rx v) (nth ry v)))\\n        (recur (dec v)))))" "(let [ i (get-image)\\n       c 1000\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\n  (time\\n    (loop [v c]\\n      (if (> v 1)\\n        (. i getRGB (nth rx 10) (nth ry 10)))\\n        (recur (dec v)))))" "(let [ i (get-image)\\n       c 10\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\n  (time\\n    (loop [v c]\\n      (if (> v 1)\\n        (. i getRGB (nth rx 10) (nth ry 10)))\\n        (recur (dec v)))))" "(let [ i (get-image)\\n       c 1000\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\n  (time\\n    (loop [v (dec c)]\\n      (if (> v 1)\\n        (. i getRGB (nth rx v) (nth ry v)))\\n        (recur (dec v)))))" "(let [ i (get-image)\\n       c 10\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\n  (time\\n    (loop [v (dec c)]\\n      (if (> v 1)\\n        (. i getRGB (nth rx v) (nth ry v)))\\n        (recur (dec v)))))" "(let [ i (get-image)\\n       c 10\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\n  (time\\n    (loop [v (dec c)]\\n      (if (> v 1)\\n        (do (print v)(. i getRGB (nth rx v) (nth ry v))))\\n        (recur (dec v)))))" "(let [ i (get-image)\\n       c 10\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\n  (time\\n    (loop [v (dec c)]\\n      (if (> v 1)\\n        (do (print v)(. i getRGB (nth rx v) (nth ry v)))\\n        \\"stop\\")\\n        (recur (dec v)))))" "(let [ i (get-image)\\n       c 10\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\n  (time\\n    (loop [v (dec c)]\\n      (if (> v 1)\\n        (do (print v)(. i getRGB (nth rx v) (nth ry v))))\\n        (recur (dec v)))))" "(let [ i (get-image)\\n       c 10\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\n  (time\\n    (loop [v (dec c)]\\n      (if (> v 1)\\n        \\"done\\"\\n        (do (. i getRGB (nth rx v) (nth ry v)))\\n        (recur (dec v))))))" "(let [ i (get-image)\\n       c 10\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\n  (time\\n    (loop [v (dec c)]\\n      (if (> v 1)\\n        \\"done\\"\\n        (do (. i getRGB (nth rx v) (nth ry v))\\n        (recur (dec v)))))))" "(let [ i (get-image)\\n       c 100\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\n  (time\\n    (loop [v (dec c)]\\n      (if (> v 1)\\n        \\"done\\"\\n        (do (. i getRGB (nth rx v) (nth ry v))\\n        (recur (dec v)))))))" "(let [ i (get-image)\\n       c 1000\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\n  (time\\n    (loop [v (dec c)]\\n      (if (> v 1)\\n        \\"done\\"\\n        (do (. i getRGB (nth rx v) (nth ry v))\\n        (recur (dec v)))))))" "(let [ i (get-image)\\n       c 10000\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\n  (time\\n    (loop [v (dec c)]\\n      (if (> v 1)\\n        \\"done\\"\\n        (do (. i getRGB (nth rx v) (nth ry v))\\n        (recur (dec v)))))))" "(let [ i (get-image)\\n       c 100000\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\n  (time\\n    (loop [v (dec c)]\\n      (if (> v 1)\\n        \\"done\\"\\n        (do (. i getRGB (nth rx v) (nth ry v))\\n        (recur (dec v)))))))" "(let [ i (get-image)\\n       c 1\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\n  (time\\n    (loop [v (dec c)]\\n      (if (> v 1)\\n        \\"done\\"\\n        (do (. i getRGB (nth rx v) (nth ry v))\\n        (recur (dec v)))))))" "(let [ i (get-image)\\n       c 2\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\n  (time\\n    (loop [v (dec c)]\\n      (if (> v 1)\\n        \\"done\\"\\n        (do (. i getRGB (nth rx v) (nth ry v))\\n        (recur (dec v)))))))" "(let [ i (get-image)\\n       c 5\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\n  (time\\n    (loop [v (dec c)]\\n      (if (> v 1)\\n        \\"done\\"\\n        (do (. i getRGB (nth rx v) (nth ry v))\\n        (recur (dec v)))))))" "(let [ i (get-image)\\n       c 5\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\n  (time\\n    (loop [v (dec c)]\\n      (if (> v 1)\\n        \\"done\\"\\n        (do (/ 1 (. i getRGB (nth rx v) (nth ry v)))\\n        (recur (dec v)))))))" "(let [ i (get-image)\\n       c 50000\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\n  (time\\n    (loop [v (dec c)]\\n      (if (> v 1)\\n        \\"done\\"\\n        (do (/ 1 (. i getRGB (nth rx v) (nth ry v)))\\n        (recur (dec v)))))))" "(let [ i (get-image)\\n       c 500000\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\n  (time\\n    (loop [v (dec c)]\\n      (if (> v 1)\\n        \\"done\\"\\n        (do (/ 1 (. i getRGB (nth rx v) (nth ry v)))\\n        (recur (dec v)))))))" "(let [ i (get-image)\\n       c 5000000\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\n  (time\\n    (loop [v (dec c)]\\n      (if (> v 1)\\n        \\"done\\"\\n        (do (/ 1 (. i getRGB (nth rx v) (nth ry v)))\\n        (recur (dec v)))))))" "(let [ i (get-image)\\n       c 50000000\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\n  (time\\n    (loop [v (dec c)]\\n      (if (> v 1)\\n        \\"done\\"\\n        (do (/ 1 (. i getRGB (nth rx v) (nth ry v)))\\n        (recur (dec v)))))))" "(let [ i (get-image)\\n       c 50000000\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\n  (time\\n    (loop [v (dec c) px []]\\n      (if (> v 1)\\n        \\"done\\"\\n        (recur (dec v) (conj px (. i getRGB (nth rx v) (nth ry v))))))))" "(let [ i (get-image)\\n       c 50000000\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\n  (time\\n    (loop [v (dec c) px []]\\n      (if (> v 1)\\n        (print (nth px (dec c)))\\n        (recur (dec v) (conj px (. i getRGB (nth rx v) (nth ry v))))))))" "(let [ i (get-image)\\n       c 50000000\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\n  (time\\n    (loop [v (dec c) px []]\\n      (if (> v 1)\\n        (count px)\\n        (recur (dec v) (conj px (. i getRGB (nth rx v) (nth ry v))))))))" "(conj [ 1 1] 1)" "(let [ i (get-image)\\n       c 50000000\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\n  (time\\n    (loop [v (dec c) px []]\\n      (if (> v 1)\\n        (count px)\\n        (recur (dec v) (conj px (. i getRGB (nth rx v) (nth ry v))))))))" "(count [ 1 1])" "(let [ i (get-image)\\n       c 50000000\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\n  (time\\n    (loop [v (dec c) px []]\\n      (if (> v 1)\\n        (count px)\\n        (recur (dec v) (conj px (. i getRGB (nth rx v) (nth ry v))))))))" "(let [ i (get-image)\\n       c 50000000\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\n  (. i getRGB (nth rx v) (nth ry v)))" "(let [ i (get-image)\\n       c 50000000\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\n  (. i getRGB (nth rx 10) (nth ry 10)))" "(let [ i (get-image)\\n       c 50000000\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\n  (time\\n    (loop [v (dec c) px []]\\n      (if (> v 1)\\n        (count px)\\n        (recur (dec v) (. i getRGB (nth rx v) (nth ry v)))))))" "(let [ i (get-image)\\n       c 50000000\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\n  (time\\n    (loop [v (dec c) px []]\\n      (if (> v 1)\\n        px\\n        (recur (dec v) (. i getRGB (nth rx v) (nth ry v)))))))" "(let [ i (get-image)\\n       c 50000000\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\n  (time\\n    (loop [v (dec c) px []]\\n      (if (> v 1)\\n        px\\n        (recur (dec v) (. i getRGB 10 10))))))" "(let [ i (get-image)\\n       c 50\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\n  (time\\n    (loop [v (dec c) px []]\\n      (if (> v 1)\\n        px\\n        (recur (dec v) (. i getRGB 10 10))))))" "(let [ i (get-image)\\n       c 50\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\n  (time\\n    (loop [v (dec c) px []]\\n      (if (> v 1)\\n        px\\n        (recur (dec v) (conj px(. i getRGB 10 10)))))))" "(let [ i (get-image)\\n       c 50\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\n  (time\\n    (loop [v (dec c) px []]\\n      (if (> v 1)\\n        px\\n        (recur (dec v) (conj px 10))))))" "(let [ i (get-image)\\n       c 50\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\n    (loop [v (dec c) px []]\\n      (if (> v 1)\\n        px\\n        (recur (dec v) (conj px 10)))))" "(let [ i (get-image)\\n       c 50\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\n    (loop [v (dec c) px []]\\n      (if (< v 1)\\n        px\\n        (recur (dec v) (conj px 10)))))" "(let [ i (get-image)\\n       c 500\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\n  (time\\n    (loop [v (dec c) px []]\\n      (if (< v 1)\\n        \\"done\\"\\n        (recur (dec v) (. i getRGB (nth rx v) (nth ry v)))))))" "(let [ i (get-image)\\n       c 5000\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\n  (time\\n    (loop [v (dec c) px []]\\n      (if (< v 1)\\n        \\"done\\"\\n        (recur (dec v) (. i getRGB (nth rx v) (nth ry v)))))))" "(let [ i (get-image)\\n       vi \\n       c 5000\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\n  (time\\n    (loop [v (dec c) px []]\\n      (if (< v 1)\\n        \\"done\\"\\n        (recur (dec v) (. i getRGB (nth rx v) (nth ry v)))))))" "(let [ i (get-image)\\n       vi (let [x-w (dec (. i getWidth))\\n                y-h (dec (. i getHeight))]\\n            loop [x-cnt 1 res []]\\n            (if (>\= x-cnt x-w)\\n              res\\n              (recur (inc x-cnt)\\n                     (conj res\\n                     (loop [y-cnt 1 res-c []]\\n                       (if (>\= y-cnt y-h)\\n                         res-c\\n                         (recur (inc y-cnt) (conj res-c (. i getRGB x-cnt y-cnt)))))))))]\\n  \\"done\\")" "(let [ i (get-image)\\n      vi (let [x-w (dec (. i getWidth))\\n               y-h (dec (. i getHeight))]\\n           (loop [x-cnt 1 res []]\\n           (if (>\= x-cnt x-w)\\n             res\\n             (recur (inc x-cnt)\\n                    (conj res\\n                          (loop [y-cnt 1 res-c []]\\n                            (if (>\= y-cnt y-h)\\n                              res-c\\n                              (recur (inc y-cnt) (conj res-c (. i getRGB x-cnt y-cnt))))))))))]\\n  \\"done\\")" "(let [ i (get-image)\\n      vi (let [x-w (dec (. i getWidth))\\n               y-h (dec (. i getHeight))]\\n           (loop [x-cnt 1 res []]\\n           (if (>\= x-cnt x-w)\\n             res\\n             (recur (inc x-cnt)\\n                    (conj res\\n                          (loop [y-cnt 1 res-c []]\\n                            (if (>\= y-cnt y-h)\\n                              res-c\\n                              (recur (inc y-cnt) (conj res-c (. i getRGB x-cnt y-cnt))))))))))]\\n  (vi (nth vi 10 ) 10))" "(let [ i (get-image)\\n      vi (let [x-w (dec (. i getWidth))\\n               y-h (dec (. i getHeight))]\\n           (loop [x-cnt 1 res []]\\n           (if (>\= x-cnt x-w)\\n             res\\n             (recur (inc x-cnt)\\n                    (conj res\\n                          (loop [y-cnt 1 res-c []]\\n                            (if (>\= y-cnt y-h)\\n                              res-c\\n                              (recur (inc y-cnt) (conj res-c (. i getRGB x-cnt y-cnt))))))))))]\\n  (nth (nth vi 10 ) 10))" "(let [ i (get-image)\\n      vi (let [x-w (dec (. i getWidth))\\n               y-h (dec (. i getHeight))]\\n           (loop [x-cnt 1 res []]\\n           (if (>\= x-cnt x-w)\\n             res\\n             (recur (inc x-cnt)\\n                    (conj res\\n                          (loop [y-cnt 1 res-c []]\\n                            (if (>\= y-cnt y-h)\\n                              res-c\\n                              (recur (inc y-cnt) (conj res-c (. i getRGB x-cnt y-cnt))))))))))]\\n  (print (count vi)))" "(let [ i (get-image)\\n      vi (let [x-w (dec (. i getWidth))\\n               y-h (dec (. i getHeight))]\\n           (loop [x-cnt 1 res []]\\n           (if (>\= x-cnt x-w)\\n             res\\n             (recur (inc x-cnt)\\n                    (conj res\\n                          (loop [y-cnt 1 res-c []]\\n                            (if (>\= y-cnt y-h)\\n                              res-c\\n                              (recur (inc y-cnt) (conj res-c (. i getRGB x-cnt y-cnt))))))))))]\\n  (time\\r\\n    (loop [v (dec c) px []]\\r\\n      (if (< v 1)\\r\\n        \\"done\\"\\r\\n        (recur (dec v) (nth (nth vi (nth rx v)) (nth vi (nth ry v))))))))" "(let [ i (get-image)\\n      vi (let [x-w (dec (. i getWidth))\\n               y-h (dec (. i getHeight))\\n               c 5000\\r\\n               rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n               ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\n           (loop [x-cnt 1 res []]\\n           (if (>\= x-cnt x-w)\\n             res\\n             (recur (inc x-cnt)\\n                    (conj res\\n                          (loop [y-cnt 1 res-c []]\\n                            (if (>\= y-cnt y-h)\\n                              res-c\\n                              (recur (inc y-cnt) (conj res-c (. i getRGB x-cnt y-cnt))))))))))\\n      \\n      ]\\n  (time\\r\\n    (loop [v (dec c) px []]\\r\\n      (if (< v 1)\\r\\n        \\"done\\"\\r\\n        (recur (dec v) (nth (nth vi (nth rx v)) (nth vi (nth ry v))))))))" "(let [ i (get-image)\\n      vi (let [x-w (dec (. i getWidth))\\n               y-h (dec (. i getHeight))\\n               c 5000\\r\\n               rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n               ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\n           (loop [x-cnt 1 res []]\\n           (if (>\= x-cnt x-w)\\n             res\\n             (recur (inc x-cnt)\\n                    (conj res\\n                          (loop [y-cnt 1 res-c []]\\n                            (if (>\= y-cnt y-h)\\n                              res-c\\n                              (recur (inc y-cnt) (conj res-c (. i getRGB x-cnt y-cnt))))))))))]\\n  (time\\r\\n    (loop [v (dec c) px []]\\r\\n      (if (< v 1)\\r\\n        \\"done\\"\\r\\n        (recur (dec v) (nth (nth vi (nth rx v)) (nth vi (nth ry v))))))))" "(let [ i (get-image)\\n      vi (let [x-w (dec (. i getWidth))\\n               y-h (dec (. i getHeight))\\n               c 50\\r\\n               rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n               ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\n           (loop [x-cnt 1 res []]\\n           (if (>\= x-cnt x-w)\\n             res\\n             (recur (inc x-cnt)\\n                    (conj res\\n                          (loop [y-cnt 1 res-c []]\\n                            (if (>\= y-cnt y-h)\\n                              res-c\\n                              (recur (inc y-cnt) (conj res-c (. i getRGB x-cnt y-cnt))))))))))]\\n  (time\\r\\n    (loop [v (dec c) px []]\\r\\n      (if (< v 1)\\r\\n        \\"done\\"\\r\\n        (recur (dec v) (nth (nth vi (nth rx v)) (nth vi (nth ry v))))))))" "(let [i (get-image)\\n      c 50\\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))\\n      vi (let [x-w (dec (. i getWidth))\\n               y-h (dec (. i getHeight))]\\n           (loop [x-cnt 1 res []]\\n           (if (>\= x-cnt x-w)\\n             res\\n             (recur (inc x-cnt)\\n                    (conj res\\n                          (loop [y-cnt 1 res-c []]\\n                            (if (>\= y-cnt y-h)\\n                              res-c\\n                              (recur (inc y-cnt) (conj res-c (. i getRGB x-cnt y-cnt))))))))))]\\n  (time\\r\\n    (loop [v (dec c) px []]\\r\\n      (if (< v 1)\\r\\n        \\"done\\"\\r\\n        (recur (dec v) (nth (nth vi (nth rx v)) (nth vi (nth ry v))))))))" "(let [i (get-image)\\n      c 50\\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))\\n      vi (let [x-w (dec (. i getWidth))\\n               y-h (dec (. i getHeight))]\\n           (loop [x-cnt 1 res []]\\n           (if (>\= x-cnt x-w)\\n             res\\n             (recur (inc x-cnt)\\n                    (conj res\\n                          (loop [y-cnt 1 res-c []]\\n                            (if (>\= y-cnt y-h)\\n                              res-c\\n                              (recur (inc y-cnt) (conj res-c (. i getRGB x-cnt y-cnt))))))))))])" "(let [i (get-image)\\n      c 50\\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))\\n      vi (let [x-w (dec (. i getWidth))\\n               y-h (dec (. i getHeight))]\\n           (loop [x-cnt 1 res []]\\n             (if (>\= x-cnt x-w)\\n               res\\n               (recur (inc x-cnt)\\n                      (conj res\\n                            (loop [y-cnt 1 res-c []]\\n                              (if (>\= y-cnt y-h)\\n                                res-c\\n                                (recur (inc y-cnt) (conj res-c (. i getRGB x-cnt y-cnt))))))))))]\\n  (time\\r\\n    (loop [v (dec c) px []]\\r\\n      (if (< v 1)\\r\\n        \\"done\\"\\r\\n        (recur (dec v) (nth (nth vi (nth rx v)) (nth vi (nth ry v))))))))" "(let [i (get-image)\\n      c 50\\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))\\n      vi (let [x-w (dec (. i getWidth))\\n               y-h (dec (. i getHeight))]\\n           (loop [x-cnt 1 res []]\\n             (if (>\= x-cnt x-w)\\n               res\\n               (recur (inc x-cnt)\\n                      (conj res\\n                            (loop [y-cnt 1 res-c []]\\n                              (if (>\= y-cnt y-h)\\n                                res-c\\n                                (recur (inc y-cnt) (conj res-c (. i getRGB x-cnt y-cnt))))))))))]\\n  (time\\r\\n    (loop [v (dec c) px []]\\r\\n      (if (< v 1)\\r\\n        \\"done\\"\\r\\n        (recur (dec v) (conj px (nth (nth vi (nth rx v)) (nth vi (nth ry v)))))))))" "(let [i (get-image)\\n     c 50\\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))\\n     vi (let [x-w (dec (. i getWidth))\\n              y-h (dec (. i getHeight))]\\n          (loop [x-cnt 1 res []]\\n            (if (>\= x-cnt x-w)\\n              res\\n              (recur (inc x-cnt)\\n                     (conj res\\n                           (loop [y-cnt 1 res-c []]\\n                             (if (>\= y-cnt y-h)\\n                               res-c\\n                               (recur (inc y-cnt) (conj res-c (. i getRGB x-cnt y-cnt))))))))))]\\n  (nth (nth vi 10) 10))" "(let [i (get-image)\\n     c 50\\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))\\n     vi (let [x-w (dec (. i getWidth))\\n              y-h (dec (. i getHeight))]\\n          (loop [x-cnt 1 res []]\\n            (if (>\= x-cnt x-w)\\n              res\\n              (recur (inc x-cnt)\\n                     (conj res\\n                           (loop [y-cnt 1 res-c []]\\n                             (if (>\= y-cnt y-h)\\n                               res-c\\n                               (recur (inc y-cnt) (conj res-c (. i getRGB x-cnt y-cnt))))))))))]\\n  (nth (nth vi 50) 10))" "(let [i (get-image)\\n     c 50\\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))\\n     vi (let [x-w (dec (. i getWidth))\\n              y-h (dec (. i getHeight))]\\n          (loop [x-cnt 1 res []]\\n            (if (>\= x-cnt x-w)\\n              res\\n              (recur (inc x-cnt)\\n                     (conj res\\n                           (loop [y-cnt 1 res-c []]\\n                             (if (>\= y-cnt y-h)\\n                               res-c\\n                               (recur (inc y-cnt) (conj res-c (. i getRGB x-cnt y-cnt))))))))))]\\n  (nth (nth vi (nth rx 4 )) 10))" "(let [i (get-image)\\n     c 50\\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))\\n     vi (let [x-w (dec (. i getWidth))\\n              y-h (dec (. i getHeight))]\\n          (loop [x-cnt 1 res []]\\n            (if (>\= x-cnt x-w)\\n              res\\n              (recur (inc x-cnt)\\n                     (conj res\\n                           (loop [y-cnt 1 res-c []]\\n                             (if (>\= y-cnt y-h)\\n                               res-c\\n                               (recur (inc y-cnt) (conj res-c (. i getRGB x-cnt y-cnt))))))))))]\\n  (nth (nth vi (nth rx 4 )) (nth ry 4)))" "(let [i (get-image)\\n     c 50\\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))\\n     vi (let [x-w (dec (. i getWidth))\\n              y-h (dec (. i getHeight))]\\n          (loop [x-cnt 1 res []]\\n            (if (>\= x-cnt x-w)\\n              res\\n              (recur (inc x-cnt)\\n                     (conj res\\n                           (loop [y-cnt 1 res-c []]\\n                             (if (>\= y-cnt y-h)\\n                               res-c\\n                               (recur (inc y-cnt) (conj res-c (. i getRGB x-cnt y-cnt))))))))))]\\n  (time\\n    (loop [v 1]\\n      (< v 1)\\n      \\"done\\"\\n      (recur (dec v) (nth (nth vi (nth rx 4 )) (nth ry 4))))))" "(let [i (get-image)\\n     c 50\\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))\\n     vi (let [x-w (dec (. i getWidth))\\n              y-h (dec (. i getHeight))]\\n          (loop [x-cnt 1 res []]\\n            (if (>\= x-cnt x-w)\\n              res\\n              (recur (inc x-cnt)\\n                     (conj res\\n                           (loop [y-cnt 1 res-c []]\\n                             (if (>\= y-cnt y-h)\\n                               res-c\\n                               (recur (inc y-cnt) (conj res-c (. i getRGB x-cnt y-cnt))))))))))]\\n  (time\\n    (loop [v 1 p nil]\\n      (< v 1)\\n      \\"done\\"\\n      (recur (dec v) (nth (nth vi (nth rx 4 )) (nth ry 4))))))" "(let [i (get-image)\\n     c 50\\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))\\n     vi (let [x-w (dec (. i getWidth))\\n              y-h (dec (. i getHeight))]\\n          (loop [x-cnt 1 res []]\\n            (if (>\= x-cnt x-w)\\n              res\\n              (recur (inc x-cnt)\\n                     (conj res\\n                           (loop [y-cnt 1 res-c []]\\n                             (if (>\= y-cnt y-h)\\n                               res-c\\n                               (recur (inc y-cnt) (conj res-c (. i getRGB x-cnt y-cnt))))))))))]\\n  (time\\n    (loop [v (dec c) p nil]\\n      (<\= v 1)\\n      \\"done\\"\\n      (recur (dec v) (nth (nth vi (nth rx 4 )) (nth ry 4))))))" "(let [i (get-image)\\n     c 5\\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))\\n     vi (let [x-w (dec (. i getWidth))\\n              y-h (dec (. i getHeight))]\\n          (loop [x-cnt 1 res []]\\n            (if (>\= x-cnt x-w)\\n              res\\n              (recur (inc x-cnt)\\n                     (conj res\\n                           (loop [y-cnt 1 res-c []]\\n                             (if (>\= y-cnt y-h)\\n                               res-c\\n                               (recur (inc y-cnt) (conj res-c (. i getRGB x-cnt y-cnt))))))))))]\\n  (time\\n    (loop [v (dec c) p nil]\\n      (<\= v 1)\\n      \\"done\\"\\n      (recur (dec v) (nth (nth vi (nth rx 4 )) (nth ry 4))))))" "(let [i (get-image)\\n     c 5\\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))\\n     vi (let [x-w (dec (. i getWidth))\\n              y-h (dec (. i getHeight))]\\n          (loop [x-cnt 1 res []]\\n            (if (>\= x-cnt x-w)\\n              res\\n              (recur (inc x-cnt)\\n                     (conj res\\n                           (loop [y-cnt 1 res-c []]\\n                             (if (>\= y-cnt y-h)\\n                               res-c\\n                               (recur (inc y-cnt) (conj res-c (. i getRGB x-cnt y-cnt))))))))))]\\n  (time\\n    (loop [v (dec c) p []]\\n      (<\= v 1)\\n      \\"done\\"\\n      (recur (dec v) (con p (nth (nth vi (nth rx 4 )) (nth ry 4)))))))" "(let [i (get-image)\\n     c 5\\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))\\n     vi (let [x-w (dec (. i getWidth))\\n              y-h (dec (. i getHeight))]\\n          (loop [x-cnt 1 res []]\\n            (if (>\= x-cnt x-w)\\n              res\\n              (recur (inc x-cnt)\\n                     (conj res\\n                           (loop [y-cnt 1 res-c []]\\n                             (if (>\= y-cnt y-h)\\n                               res-c\\n                               (recur (inc y-cnt) (conj res-c (. i getRGB x-cnt y-cnt))))))))))]\\n  (time\\n    (loop [v (dec c) p []]\\n      (<\= v 1)\\n      \\"done\\"\\n      (recur (dec v) (conj p (nth (nth vi (nth rx 4 )) (nth ry 4)))))))" "(let [i (get-image)\\n     c 5\\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))\\n     vi (let [x-w (dec (. i getWidth))\\n              y-h (dec (. i getHeight))]\\n          (loop [x-cnt 1 res []]\\n            (if (>\= x-cnt x-w)\\n              res\\n              (recur (inc x-cnt)\\n                     (conj res\\n                           (loop [y-cnt 1 res-c []]\\n                             (if (>\= y-cnt y-h)\\n                               res-c\\n                               (recur (inc y-cnt) (conj res-c (. i getRGB x-cnt y-cnt))))))))))]\\n  (time\\n    (loop [v (dec c) p []]\\n      (<\= v 1)\\n      \\"done\\"\\n      (do (print \\"here\\")(recur (dec v) (conj p (nth (nth vi (nth rx 4 )) (nth ry 4))))))))" "(let [i (get-image)\\n     c 5\\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))\\n     vi (let [x-w (dec (. i getWidth))\\n              y-h (dec (. i getHeight))]\\n          (loop [x-cnt 1 res []]\\n            (if (>\= x-cnt x-w)\\n              res\\n              (recur (inc x-cnt)\\n                     (conj res\\n                           (loop [y-cnt 1 res-c []]\\n                             (if (>\= y-cnt y-h)\\n                               res-c\\n                               (recur (inc y-cnt) (conj res-c (. i getRGB x-cnt y-cnt))))))))))]\\n  (time\\n    (loop [v (dec c) p []]\\n     (if (<\= v 1)\\n      \\"done\\"(recur (dec v) (conj p (nth (nth vi (nth rx 4 )) (nth ry 4))))))))" "(let [i (get-image)\\n     c 5\\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))\\n     vi (let [x-w (dec (. i getWidth))\\n              y-h (dec (. i getHeight))]\\n          (loop [x-cnt 1 res []]\\n            (if (>\= x-cnt x-w)\\n              res\\n              (recur (inc x-cnt)\\n                     (conj res\\n                           (loop [y-cnt 1 res-c []]\\n                             (if (>\= y-cnt y-h)\\n                               res-c\\n                               (recur (inc y-cnt) (conj res-c (. i getRGB x-cnt y-cnt))))))))))]\\n  (time\\n    (loop [v (dec c) p []]\\n     (if (<\= v 1)\\n      \\"done\\"(recur (dec v) (conj p (nth (nth vi (nth rx v )) (nth ry v))))))))" "(let [i (get-image)\\n     c 5\\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))\\n     vi (let [x-w (dec (. i getWidth))\\n              y-h (dec (. i getHeight))]\\n          (loop [x-cnt 1 res []]\\n            (if (>\= x-cnt x-w)\\n              res\\n              (recur (inc x-cnt)\\n                     (conj res\\n                           (loop [y-cnt 1 res-c []]\\n                             (if (>\= y-cnt y-h)\\n                               res-c\\n                               (recur (inc y-cnt) (conj res-c (. i getRGB x-cnt y-cnt))))))))))]\\n  (time\\n    (loop [v (dec c) p []]\\n     (if (< v 1)\\n      \\"done\\"(recur (dec v) (conj p (nth (nth vi (nth rx v )) (nth ry v))))))))" "(let [i (get-image)\\n     c 500\\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))\\n     vi (let [x-w (dec (. i getWidth))\\n              y-h (dec (. i getHeight))]\\n          (loop [x-cnt 1 res []]\\n            (if (>\= x-cnt x-w)\\n              res\\n              (recur (inc x-cnt)\\n                     (conj res\\n                           (loop [y-cnt 1 res-c []]\\n                             (if (>\= y-cnt y-h)\\n                               res-c\\n                               (recur (inc y-cnt) (conj res-c (. i getRGB x-cnt y-cnt))))))))))]\\n  (time\\n    (loop [v (dec c) p []]\\n     (if (< v 1)\\n      \\"done\\"(recur (dec v) (conj p (nth (nth vi (nth rx v )) (nth ry v))))))))" "(let [i (get-image)\\n     c 500\\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))\\n     vi (let [x-w (dec (. i getWidth))\\n              y-h (dec (. i getHeight))]\\n          (loop [x-cnt 1 res []]\\n            (if (>\= x-cnt x-w)\\n              res\\n              (recur (inc x-cnt)\\n                     (conj res\\n                           (loop [y-cnt 1 res-c []]\\n                             (if (>\= y-cnt y-h)\\n                               res-c\\n                               (recur (inc y-cnt) (conj res-c (. i getRGB x-cnt y-cnt))))))))))]\\n  (time\\n    (loop [v (dec c) p []]\\n     (if (< v 1)\\n      \\"done\\"(recur (dec v) (conj p (nth (nth vi (nth rx 10 )) (nth ry 10))))))))" "(let [i (get-image)\\n     c 5000\\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))\\n     vi (let [x-w (dec (. i getWidth))\\n              y-h (dec (. i getHeight))]\\n          (loop [x-cnt 1 res []]\\n            (if (>\= x-cnt x-w)\\n              res\\n              (recur (inc x-cnt)\\n                     (conj res\\n                           (loop [y-cnt 1 res-c []]\\n                             (if (>\= y-cnt y-h)\\n                               res-c\\n                               (recur (inc y-cnt) (conj res-c (. i getRGB x-cnt y-cnt))))))))))]\\n  (time\\n    (loop [v (dec c) p []]\\n     (if (< v 1)\\n      \\"done\\"(recur (dec v) (conj p (nth (nth vi (nth rx 10 )) (nth ry 10))))))))" "(let [ i (get-image)\\r\\n       c 5000\\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\r\\n  (time\\r\\n    (loop [v (dec c) px []]\\r\\n      (if (< v 1)\\r\\n        \\"done\\"\\r\\n        (recur (dec v) (. i getRGB (nth rx v) (nth ry v)))))))" "(let [i (get-image)\\n     c 5000\\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))\\n     vi (let [x-w (dec (. i getWidth))\\n              y-h (dec (. i getHeight))]\\n          (loop [x-cnt 1 res []]\\n            (if (>\= x-cnt x-w)\\n              res\\n              (recur (inc x-cnt)\\n                     (conj res\\n                           (loop [y-cnt 1 res-c []]\\n                             (if (>\= y-cnt y-h)\\n                               res-c\\n                               (recur (inc y-cnt) (conj res-c (. i getRGB x-cnt y-cnt))))))))))]\\n  (time\\n    (loop [v (dec c) p []]\\n     (if (< v 1)\\n      \\"done\\"(recur (dec v) (conj p (nth (nth vi (nth rx 10 )) (nth ry 10))))))))" "(let [i (get-image)\\n     c 5000\\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))\\n     vi (let [x-w (dec (. i getWidth))\\n              y-h (dec (. i getHeight))]\\n          (loop [x-cnt 1 res []]\\n            (if (>\= x-cnt x-w)\\n              res\\n              (recur (inc x-cnt)\\n                     (conj res\\n                           (loop [y-cnt 1 res-c []]\\n                             (if (>\= y-cnt y-h)\\n                               res-c\\n                               (recur (inc y-cnt) (conj res-c (. i getRGB x-cnt y-cnt))))))))))]\\n  (time\\n    (loop [v (dec c) p []]\\n     (if (< v 1)\\n      \\"done\\"(recur (dec v) (conj p (nth (nth vi (nth rx v )) (nth ry v))))))))" "(let [i (get-image)\\n     c 5000\\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))\\n     vi (let [x-w (dec (. i getWidth))\\n              y-h (dec (. i getHeight))]\\n          (loop [x-cnt 0 res []]\\n            (if (>\= x-cnt x-w)\\n              res\\n              (recur (inc x-cnt)\\n                     (conj res\\n                           (loop [y-cnt 0 res-c []]\\n                             (if (>\= y-cnt y-h)\\n                               res-c\\n                               (recur (inc y-cnt) (conj res-c (. i getRGB x-cnt y-cnt))))))))))]\\n  (time\\n    (loop [v (dec c) p []]\\n     (if (< v 1)\\n      \\"done\\"\\n      (recur (dec v) (conj p (nth (nth vi (nth rx v )) (nth ry v))))))))" "(let [ i (get-image)\\r\\n       c 5000\\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\r\\n  (time\\r\\n    (loop [v (dec c) px []]\\r\\n      (if (< v 1)\\r\\n        \\"done\\"\\r\\n        (recur (dec v) (. i getRGB (nth rx v) (nth ry v)))))))" "(let [i (get-image)\\n     c 5000\\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))\\n     vi (let [x-w (dec (. i getWidth))\\n              y-h (dec (. i getHeight))]\\n          (loop [x-cnt 0 res []]\\n            (if (>\= x-cnt x-w)\\n              res\\n              (recur (inc x-cnt)\\n                     (conj res\\n                           (loop [y-cnt 0 res-c []]\\n                             (if (>\= y-cnt y-h)\\n                               res-c\\n                               (recur (inc y-cnt) (conj res-c (. i getRGB x-cnt y-cnt))))))))))]\\n  (time\\n    (loop [v (dec c) p []]\\n     (if (< v 1)\\n      \\"done\\"\\n      (recur (dec v) (conj p (nth (nth vi (nth rx v )) (nth ry v))))))))" "(let [ i (get-image)\\r\\n       c 50000\\n       \\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\r\\n  (time\\r\\n    (loop [v (dec c) px []]\\r\\n      (if (< v 1)\\r\\n        \\"done\\"\\r\\n        (recur (dec v) (. i getRGB (nth rx v) (nth ry v)))))))" "(let [i (get-image)\\n     c 50000\\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))\\n     vi (let [x-w (dec (. i getWidth))\\n              y-h (dec (. i getHeight))]\\n          (loop [x-cnt 0 res []]\\n            (if (>\= x-cnt x-w)\\n              res\\n              (recur (inc x-cnt)\\n                     (conj res\\n                           (loop [y-cnt 0 res-c []]\\n                             (if (>\= y-cnt y-h)\\n                               res-c\\n                               (recur (inc y-cnt) (conj res-c (. i getRGB x-cnt y-cnt))))))))))]\\n  (time\\n    (loop [v (dec c) p []]\\n     (if (< v 1)\\n      \\"done\\"\\n      (recur (dec v) (conj p (nth (nth vi (nth rx v )) (nth ry v))))))))" "(let [i (get-image)\\n     c 500\\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))\\n     vi (let [x-w (dec (. i getWidth))\\n              y-h (dec (. i getHeight))]\\n          (loop [x-cnt 0 res []]\\n            (if (>\= x-cnt x-w)\\n              res\\n              (recur (inc x-cnt)\\n                     (conj res\\n                           (loop [y-cnt 0 res-c []]\\n                             (if (>\= y-cnt y-h)\\n                               res-c\\n                               (recur (inc y-cnt) (conj res-c (. i getRGB x-cnt y-cnt))))))))))]\\n  (time\\n    (loop [v (dec c) p []]\\n     (if (< v 1)\\n      \\"done\\"\\n      (recur (dec v) (conj p (nth (nth vi (nth rx v )) (nth ry v))))))))" "(let [ i (get-image)\\r\\n       c 500\\n       \\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\r\\n  (time\\r\\n    (loop [v (dec c) px []]\\r\\n      (if (< v 1)\\r\\n        \\"done\\"\\r\\n        (recur (dec v) (. i getRGB (nth rx v) (nth ry v)))))))" "(let [i (get-image)\\n     c 500\\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))\\n     vi (let [x-w (dec (. i getWidth))\\n              y-h (dec (. i getHeight))]\\n          (loop [x-cnt 0 res []]\\n            (if (>\= x-cnt x-w)\\n              res\\n              (recur (inc x-cnt)\\n                     (conj res\\n                           (loop [y-cnt 0 res-c []]\\n                             (if (>\= y-cnt y-h)\\n                               res-c\\n                               (recur (inc y-cnt) (conj res-c (. i getRGB x-cnt y-cnt))))))))))]\\n  (time\\n    (loop [v (dec c) p []]\\n     (if (< v 1)\\n      \\"done\\"\\n      (recur (dec v) (conj p (nth (nth vi (nth rx v )) (nth ry v))))))))" "(let [ i (get-image)\\r\\n       c 500\\n       \\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\r\\n  (time\\r\\n    (loop [v (dec c) px []]\\r\\n      (if (< v 1)\\r\\n        \\"done\\"\\r\\n        (recur (dec v) (. i getRGB (nth rx v) (nth ry v)))))))" "(let [i (get-image)\\n     c 500\\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))\\n     vi (let [x-w (dec (. i getWidth))\\n              y-h (dec (. i getHeight))]\\n          (loop [x-cnt 0 res []]\\n            (if (>\= x-cnt x-w)\\n              res\\n              (recur (inc x-cnt)\\n                     (conj res\\n                           (loop [y-cnt 0 res-c []]\\n                             (if (>\= y-cnt y-h)\\n                               res-c\\n                               (recur (inc y-cnt) (conj res-c (. i getRGB x-cnt y-cnt))))))))))]\\n  (time\\n    (loop [v (dec c) p []]\\n     (if (< v 1)\\n      \\"done\\"\\n      (recur (dec v) (conj p (nth (nth vi (nth rx v )) (nth ry v))))))))" "(let [ i (get-image)\\r\\n       c 500\\n       \\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\r\\n  (time\\r\\n    (loop [v (dec c) px []]\\r\\n      (if (< v 1)\\r\\n        \\"done\\"\\r\\n        (recur (dec v) (. i getRGB (nth rx v) (nth ry v)))))))" "(let [ i (get-image)\\r\\n       c 500\\n       \\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\r\\n  (time\\r\\n    (loop [v (dec c) px []]\\r\\n      (if (< v 1)\\r\\n        \\"done\\"\\r\\n        (recur (dec v) (conj px (. i getRGB (nth rx v) (nth ry v))))))))" "(let [i (get-image)\\n     c 500\\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))\\n     vi (let [x-w (dec (. i getWidth))\\n              y-h (dec (. i getHeight))]\\n          (loop [x-cnt 0 res []]\\n            (if (>\= x-cnt x-w)\\n              res\\n              (recur (inc x-cnt)\\n                     (conj res\\n                           (loop [y-cnt 0 res-c []]\\n                             (if (>\= y-cnt y-h)\\n                               res-c\\n                               (recur (inc y-cnt) (conj res-c (. i getRGB x-cnt y-cnt))))))))))]\\n  (time\\n    (loop [v (dec c) p []]\\n     (if (< v 1)\\n      \\"done\\"\\n      (recur (dec v) (conj p (nth (nth vi (nth rx v )) (nth ry v))))))))" "(let [i (get-image)\\n     c 5000\\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))\\n     vi (let [x-w (dec (. i getWidth))\\n              y-h (dec (. i getHeight))]\\n          (loop [x-cnt 0 res []]\\n            (if (>\= x-cnt x-w)\\n              res\\n              (recur (inc x-cnt)\\n                     (conj res\\n                           (loop [y-cnt 0 res-c []]\\n                             (if (>\= y-cnt y-h)\\n                               res-c\\n                               (recur (inc y-cnt) (conj res-c (. i getRGB x-cnt y-cnt))))))))))]\\n  (time\\n    (loop [v (dec c) p []]\\n     (if (< v 1)\\n      \\"done\\"\\n      (recur (dec v) (conj p (nth (nth vi (nth rx v )) (nth ry v))))))))" "(let [ i (get-image)\\r\\n       c 5000\\n       \\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\r\\n  (time\\r\\n    (loop [v (dec c) px []]\\r\\n      (if (< v 1)\\r\\n        \\"done\\"\\r\\n        (recur (dec v) (conj px (. i getRGB (nth rx v) (nth ry v))))))))" "(let [i (get-image)\\n     c 5000\\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))\\n     vi (let [x-w (dec (. i getWidth))\\n              y-h (dec (. i getHeight))]\\n          (loop [x-cnt 0 res []]\\n            (if (>\= x-cnt x-w)\\n              res\\n              (recur (inc x-cnt)\\n                     (conj res\\n                           (loop [y-cnt 0 res-c []]\\n                             (if (>\= y-cnt y-h)\\n                               res-c\\n                               (recur (inc y-cnt) (conj res-c (. i getRGB x-cnt y-cnt))))))))))]\\n  (time\\n    (loop [v (dec c) p []]\\n     (if (< v 1)\\n      \\"done\\"\\n      (recur (dec v) (conj p (nth (nth vi (nth rx v )) (nth ry v))))))))" "(let [ i (get-image)\\r\\n       c 5000\\n       \\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\r\\n  (time\\r\\n    (loop [v (dec c) px []]\\r\\n      (if (< v 1)\\r\\n        \\"done\\"\\r\\n        (recur (dec v) (conj px (. i getRGB (nth rx v) (nth ry v))))))))" "(let [i (get-image)\\n     c 5000\\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))\\n     vi (let [x-w (dec (. i getWidth))\\n              y-h (dec (. i getHeight))]\\n          (loop [x-cnt 0 res []]\\n            (if (>\= x-cnt x-w)\\n              res\\n              (recur (inc x-cnt)\\n                     (conj res\\n                           (loop [y-cnt 0 res-c []]\\n                             (if (>\= y-cnt y-h)\\n                               res-c\\n                               (recur (inc y-cnt) (conj res-c (. i getRGB x-cnt y-cnt))))))))))]\\n  (time\\n    (loop [v (dec c) p []]\\n     (if (< v 1)\\n      \\"done\\"\\n      (recur (dec v) (conj p (nth (nth vi (nth rx v )) (nth ry v))))))))" "(let [ i (get-image)\\r\\n       c 5000\\n       \\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\r\\n  (time\\r\\n    (loop [v (dec c) px []]\\r\\n      (if (< v 1)\\r\\n        \\"done\\"\\r\\n        (recur (dec v) (conj px (. i getRGB (nth rx v) (nth ry v))))))))" "(let [i (get-image)\\n     c 5000\\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))\\n     vi (let [x-w (dec (. i getWidth))\\n              y-h (dec (. i getHeight))]\\n          (loop [x-cnt 0 res []]\\n            (if (>\= x-cnt x-w)\\n              res\\n              (recur (inc x-cnt)\\n                     (conj res\\n                           (loop [y-cnt 0 res-c []]\\n                             (if (>\= y-cnt y-h)\\n                               res-c\\n                               (recur (inc y-cnt) (conj res-c (. i getRGB x-cnt y-cnt))))))))))]\\n  (time\\n    (loop [v (dec c) p []]\\n     (if (< v 1)\\n      \\"done\\"\\n      (recur (dec v) (conj p (nth (nth vi (nth rx v )) (nth ry v))))))))" "(let [ i (get-image)\\r\\n       c 5000\\n       \\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\r\\n  (time\\r\\n    (loop [v (dec c) px []]\\r\\n      (if (< v 1)\\r\\n        \\"done\\"\\r\\n        (recur (dec v) (conj px (. i getRGB (nth rx v) (nth ry v))))))))" "(let [i (get-image)\\n     c 5000\\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))\\n     vi (let [x-w (dec (. i getWidth))\\n              y-h (dec (. i getHeight))]\\n          (loop [x-cnt 0 res []]\\n            (if (>\= x-cnt x-w)\\n              res\\n              (recur (inc x-cnt)\\n                     (conj res\\n                           (loop [y-cnt 0 res-c []]\\n                             (if (>\= y-cnt y-h)\\n                               res-c\\n                               (recur (inc y-cnt) (conj res-c (. i getRGB x-cnt y-cnt))))))))))]\\n  (time\\n    (loop [v (dec c) p []]\\n     (if (< v 1)\\n      \\"done\\"\\n      (recur (dec v) (conj p (nth (nth vi (nth rx v )) (nth ry v))))))))" "(let [ i (get-image)\\r\\n       c 5000\\n       \\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\r\\n  (time\\r\\n    (loop [v (dec c) px []]\\r\\n      (if (< v 1)\\r\\n        \\"done\\"\\r\\n        (recur (dec v) (conj px (. i getRGB (nth rx v) (nth ry v))))))))" "(let [i (get-image)\\n     c 5000\\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))\\n     vi (let [x-w (dec (. i getWidth))\\n              y-h (dec (. i getHeight))]\\n          (loop [x-cnt 0 res []]\\n            (if (>\= x-cnt x-w)\\n              res\\n              (recur (inc x-cnt)\\n                     (conj res\\n                           (loop [y-cnt 0 res-c []]\\n                             (if (>\= y-cnt y-h)\\n                               res-c\\n                               (recur (inc y-cnt) (conj res-c (. i getRGB x-cnt y-cnt))))))))))]\\n  (time\\n    (loop [v (dec c) p []]\\n     (if (< v 1)\\n      \\"done\\"\\n      (recur (dec v) (conj p (nth (nth vi (nth rx v )) (nth ry v))))))))" "(let [i (get-image)\\n     c 5000\\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))\\n     vi (let [x-w (dec (. i getWidth))\\n              y-h (dec (. i getHeight))]\\n          (loop [x-cnt 0 res []]\\n            (if (>\= x-cnt x-w)\\n              res\\n              (recur (inc x-cnt)\\n                     (conj res\\n                           (loop [y-cnt 0 res-c {}]\\n                             (if (>\= y-cnt y-h)\\n                               res-c\\n                               (recur (inc y-cnt) (assoc res-c  (keyword (str x-cnt \\"-\\" y-cnt))(. i getRGB x-cnt y-cnt))))))))))]\\n  (time\\n    (loop [v (dec c) p []]\\n     (if (< v 1)\\n      \\"done\\"\\n      (recur (dec v) (conj p (nth (nth vi (nth rx v )) (nth ry v))))))))" "(merge {\:1 1} {\:2 2})" "(let [i (get-image)\\n     c 5000\\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))\\n     vi (let [x-w (dec (. i getWidth))\\n              y-h (dec (. i getHeight))]\\n          (loop [x-cnt 0 res {}]\\n            (if (>\= x-cnt x-w)\\n              res\\n              (recur (inc x-cnt)\\n                     (merge res\\n                           (loop [y-cnt 0 res-c {}]\\n                             (if (>\= y-cnt y-h)\\n                               res-c\\n                               (recur (inc y-cnt) (assoc res-c  (keyword (str x-cnt \\"-\\" y-cnt))(. i getRGB x-cnt y-cnt))))))))))]\\n  (time\\n    (loop [v (dec c) p []]\\n     (if (< v 1)\\n      \\"done\\"\\n      (recur (dec v) (conj p ((keyword (str (nth rx v) \\"-\\" (nth ry v))) vi)))))))" "(let [ i (get-image)\\r\\n       c 5000\\n       \\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\r\\n  (time\\r\\n    (loop [v (dec c) px []]\\r\\n      (if (< v 1)\\r\\n        \\"done\\"\\r\\n        (recur (dec v) (conj px (. i getRGB (nth rx v) (nth ry v))))))))" "(let [i (get-image)\\n     c 5000\\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))\\n     vi (let [x-w (dec (. i getWidth))\\n              y-h (dec (. i getHeight))]\\n          (loop [x-cnt 0 res {}]\\n            (if (>\= x-cnt x-w)\\n              res\\n              (recur (inc x-cnt)\\n                     (merge res\\n                           (loop [y-cnt 0 res-c {}]\\n                             (if (>\= y-cnt y-h)\\n                               res-c\\n                               (recur (inc y-cnt) (assoc res-c  (keyword (str x-cnt \\"-\\" y-cnt))(. i getRGB x-cnt y-cnt))))))))))]\\n  (time\\n    (loop [v (dec c) p []]\\n     (if (< v 1)\\n      \\"done\\"\\n      (recur (dec v) (conj p ((keyword (str (nth rx v) \\"-\\" (nth ry v))) vi)))))))" "(let [i (get-image)\\n     c 5000\\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))\\n     vi (let [x-w (dec (. i getWidth))\\n              y-h (dec (. i getHeight))]\\n          (loop [x-cnt 0 res []]\\n            (if (>\= x-cnt x-w)\\n              res\\n              (recur (inc x-cnt)\\n                     (conj res\\n                           (loop [y-cnt 0 res-c []]\\n                             (if (>\= y-cnt y-h)\\n                               res-c\\n                               (recur (inc y-cnt) (conj res-c (. i getRGB x-cnt y-cnt))))))))))]\\n  (time\\n    (loop [v (dec c) p []]\\n     (if (< v 1)\\n      \\"done\\"\\n      (recur (dec v) (conj p (nth (nth vi (nth rx v )) (nth ry v))))))))" "(let [ i (get-image)\\r\\n       c 500\\r\\n       \\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\r\\n  (time\\r\\n    (loop [v (dec c) px []]\\r\\n      (if (< v 1)\\r\\n        \\"done\\"\\r\\n        (recur (dec v) (< 0(. i getRGB (nth rx v) (nth ry v))))))))" "(let [ i (get-image)\\r\\n       c 500\\r\\n       \\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\r\\n  (time\\r\\n    (loop [v (dec c) px 0]\\r\\n      (if (< v 1)\\r\\n        \\"done\\"\\r\\n        (recur (dec v) (/ px 0(. i getRGB (nth rx v) (nth ry v))))))))" "(let [ i (get-image)\\r\\n       c 500\\r\\n       \\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\r\\n  (time\\r\\n    (loop [v (dec c) px 0]\\r\\n      (if (< v 1)\\r\\n        \\"done\\"\\r\\n        (recur (dec v) (/ px (. i getRGB (nth rx v) (nth ry v))))))))" "(let [ i (get-image)\\r\\n       c 500\\r\\n       \\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\r\\n  (time\\r\\n    (loop [v (dec c) px 0]\\r\\n      (if (< v 1)\\r\\n        px\\r\\n        (recur (dec v) (/ px (. i getRGB (nth rx v) (nth ry v))))))))" "(let [ i (get-image)\\r\\n       c 500\\r\\n       \\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\r\\n  (time\\r\\n    (loop [v (dec c) px 0]\\r\\n      (if (< v 1)\\r\\n        px\\r\\n        (recur (dec v) (+ px (. i getRGB (nth rx v) (nth ry v))))))))" "(let [ i (get-image)\\r\\n       c 5000\\r\\n       \\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\r\\n  (time\\r\\n    (loop [v (dec c) px 0]\\r\\n      (if (< v 1)\\r\\n        px\\r\\n        (recur (dec v) (+ px (. i getRGB (nth rx v) (nth ry v))))))))" "\\r\\n(let [i (get-image)\\r\\n     c 5000\\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))\\r\\n     vi (let [x-w (dec (. i getWidth))\\r\\n              y-h (dec (. i getHeight))]\\r\\n          (loop [x-cnt 0 res []]\\r\\n            (if (>\= x-cnt x-w)\\r\\n              res\\r\\n              (recur (inc x-cnt)\\r\\n                     (conj res\\r\\n                           (loop [y-cnt 0 res-c []]\\r\\n                             (if (>\= y-cnt y-h)\\r\\n                               res-c\\r\\n                               (recur (inc y-cnt) (conj res-c (. i getRGB x-cnt y-cnt))))))))))]\\r\\n  (time\\r\\n    (loop [v (dec c) p 0]\\r\\n     (if (< v 1)\\r\\n      \\"done\\"\\r\\n      (recur (dec v) (+ p (nth (nth vi (nth rx v )) (nth ry v))))))))" "(let [ i (get-image)\\r\\n       c 5000\\r\\n       \\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\r\\n  (time\\r\\n    (loop [v (dec c) px 0]\\r\\n      (if (< v 1)\\r\\n        px\\r\\n        (recur (dec v) (+ px (. i getRGB (nth rx v) (nth ry v))))))))" "(let [ i (get-image)\\r\\n       c 500\\r\\n       \\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\r\\n  (time\\r\\n    (loop [v (dec c) px []]\\r\\n      (if (< v 1)\\r\\n        \\"done\\"\\r\\n        (recur (dec v) (conj px 0(. i getRGB (nth rx v) (nth ry v))))))))" "(let [ i (get-image)\\r\\n       c 5000\\r\\n       \\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\r\\n  (time\\r\\n    (loop [v (dec c) px []]\\r\\n      (if (< v 1)\\r\\n        \\"done\\"\\r\\n        (recur (dec v) (conj px 0(. i getRGB (nth rx v) (nth ry v))))))))" "(* 50 100)" "(* 50 100 10)" "(let [ i (get-image)\\r\\n       c 5000\\r\\n       \\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\r\\n  (time\\r\\n    (loop [v (dec c) px []]\\r\\n      (if (< v 1)\\r\\n        \\"done\\"\\r\\n        (recur (dec v) (conj px 0(. i getRGB (nth rx v) (nth ry v))))))))" "(let [ i (get-image)\\r\\n       c 5000\\r\\n       \\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\r\\n  (time\\r\\n    (loop [v (dec c) px false]\\r\\n      (if (< v 1)\\r\\n        \\"done\\"\\r\\n        (recur (dec v) (if (not px) \\n                         (> 1 (. i getRGB (nth rx v) (nth ry v)))))))))" "\\r\\n(let [i (get-image)\\r\\n     c 5000\\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))\\r\\n     vi (let [x-w (dec (. i getWidth))\\r\\n              y-h (dec (. i getHeight))]\\r\\n          (loop [x-cnt 0 res []]\\r\\n            (if (>\= x-cnt x-w)\\r\\n              res\\r\\n              (recur (inc x-cnt)\\r\\n                     (conj res\\r\\n                           (loop [y-cnt 0 res-c []]\\r\\n                             (if (>\= y-cnt y-h)\\r\\n                               res-c\\r\\n                               (recur (inc y-cnt) (conj res-c (. i getRGB x-cnt y-cnt))))))))))]\\r\\n  (time\\r\\n    (loop [v (dec c) p false]\\r\\n     (if (< v 1)\\r\\n      \\"done\\"\\r\\n      (recur (dec v) (if (not p)\\n                       (< 1 (nth (nth vi (nth rx v )) (nth ry v)))))))))" "\\r\\n(let [i (get-image)\\r\\n     c 5000\\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))\\r\\n     vi (let [x-w (dec (. i getWidth))\\r\\n              y-h (dec (. i getHeight))]\\r\\n          (loop [x-cnt 0 res []]\\r\\n            (if (>\= x-cnt x-w)\\r\\n              res\\r\\n              (recur (inc x-cnt)\\r\\n                     (conj res\\r\\n                           (loop [y-cnt 0 res-c []]\\r\\n                             (if (>\= y-cnt y-h)\\r\\n                               res-c\\r\\n                               (recur (inc y-cnt) (conj res-c (. i getRGB x-cnt y-cnt))))))))))]\\r\\n  (time\\r\\n    (loop [v (dec c) p false]\\r\\n     (if (< v 1)\\r\\n      \\"done\\"\\r\\n      (recur (dec v) (if (not p)\\n                       (> 1 (nth (nth vi (nth rx v )) (nth ry v)))))))))" "\\r\\n(let [i (get-image)\\r\\n     c 5000\\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))\\r\\n     vi (let [x-w (dec (. i getWidth))\\r\\n              y-h (dec (. i getHeight))]\\r\\n          (loop [x-cnt 0 res []]\\r\\n            (if (>\= x-cnt x-w)\\r\\n              res\\r\\n              (recur (inc x-cnt)\\r\\n                     (conj res\\r\\n                           (loop [y-cnt 0 res-c []]\\r\\n                             (if (>\= y-cnt y-h)\\r\\n                               res-c\\r\\n                               (recur (inc y-cnt) (conj res-c (. i getRGB x-cnt y-cnt))))))))))]\\r\\n  (time\\r\\n    (loop [v (dec c) p false]\\r\\n     (if (< v 1)\\r\\n      \\"done\\"\\r\\n      (recur (dec v) \\n                       (> 1 (nth (nth vi (nth rx v )) (nth ry v))))))))" "(let [ i (get-image)\\r\\n       c 5000\\r\\n       \\r\\n      rx  (repeatedly c \#(rand-int (dec (. i getWidth))))\\r\\n      ry (repeatedly c \#(rand-int (dec (. i getHeight))))]\\r\\n  (time\\r\\n    (loop [v (dec c) px false]\\r\\n      (if (< v 1)\\r\\n        \\"done\\"\\r\\n        (recur (dec v) (. i getRGB (nth rx v) (nth ry v)))))))" "(merge [{\:1 1}] [{\:2 2}])" "(join [{\:1 1}] [{\:2 2}])" "(apply merge [{\:1 1}] [{\:2 2}])" "(apply merge [{\:1 1 {\:2 2}}] [{\:2 2}])" "(apply merge [{\:1 1 }{\:2 2}] [{\:2 2}])" "(defn biased-points [num]\\r\\n               (do (print \\"not implemented\\")\\r\\n                 (repeat 10 [1 1])))" "(biased-points 10)" "(num-of-random-starts)" "session" "(reset\! session (assoc @session \:trailNum 2))" "(num-of-random-starts)" "(\:numTrails @session)" "(\:trailNum @session)" "(\:trialNum @session)" " (\:plac-heur config)" "config" "(get-config)" "(\:trial-num @session)" "@session" "(def session (atom {\:trial-num 0\\r\\n                    \:image-location \\"C\:\\\\\\\\Users\\\\\\\\erudi\\\\\\\\OneDrive\\\\\\\\Activity Organizer\\\\\\\\Projects\\\\\\\\Active\\\\\\\\TAA Research\\\\\\\\Project Resources\\\\\\\\images\\\\\\\\unprocessed\\\\\\\\3\\\\\\\\1\\\\\\\\3_1_1.jpg\\"\\r\\n                    \:cand-paths []}))" "session" "config" "(inc-trail)" "(\:trial-num @session)" " (\:plac-heur config)" "(\:num-ants config)" "(num-of-phero-starts)" "(num-of-random-starts\\n  )" "(num-of-phero-starts)" "(defn num-of-phero-starts[]\\r\\n  \\"Creates number of pheromone starts based on config and session values\\"\\r\\n  (- (\:numAnts config)\\r\\n     (int \\r\\n       (* \\r\\n         (\:trial-num @session) \\r\\n         (\:plac-heur config) \\r\\n         (\:num-ants config)))))" "(num-of-phero-starts)" "(defn num-of-phero-starts[]\\r\\n  \\"Creates number of pheromone starts based on config and session values\\"\\r\\n     (int \\r\\n       (* \\r\\n         (\:trial-num @session) \\r\\n         (- 1 (\:plac-heur config))\\r\\n         (\:num-ants config))))" "(num-of-phero-starts)" "(num-of-random-starts\\n  )" "coinfig" "config" "(defn num-of-phero-starts[]\\r\\n  \\"Creates number of pheromone starts based on config and session values\\"\\r\\n     (int\\r\\n       (- (\:num-ants config)\\r\\n       (* \\r\\n         (\:trial-num @session) \\r\\n         (\:plac-heur config)\\r\\n         (\:num-ants config)))))" "(num-of-phero-starts)" "(num-of-random-starts\\n  )" "(get-trail-paths (tgaa.util.image/get-image))" "\\r\\n(defn get-trail-paths [^BufferedImage image]\\r\\n  \\"Gets ant paths for a trail based on session and config\\"\\r\\n  (apply merge (map ant-path \\r\\n                    (random-point \\r\\n                      (num-of-random-starts) image))\\r\\n         (map ant-path (phero-points \\r\\n                         (num-of-phero-starts)))))" "(get-trail-paths (tgaa.util.image/get-image))" "(apply conj [[1 1]] [[2 2]])" "(get-trail-paths (tgaa.util.image/get-image))" "(num-of-phero-starts)" "(phero-points \\r\\n                             (num-of-phero-starts))" "(random-point \\r\\n                             (num-of-random-starts) (tgaa.util.image/get-image))" "(random-point (num-of-random-starts) (tgaa.util.image/get-image))" "(num-of-random-starts)" "(random-point 5 (tgaa.util.image/get-image))" "(tgaa.util.image/get-image)" "(random-point (num-of-random-starts) (tgaa.util.image/get-image))" " (repeatedly \\r\\n                      10\\r\\n                      \#(rand-int \\r\\n                         (. (tgaa.util.image/get-image) getWidth)))" "(defn random-point \\r\\n  \\"Get random set of coordinates\\"\\r\\n  [num-loc ^BufferedImage image]\\r\\n  (partition 2\\r\\n             (interleave \\r\\n               (repeatedly \\r\\n                      num-loc\\r\\n                      \#(rand-int \\r\\n                         (. image getWidth)))\\r\\n        (repeatedly \\r\\n               num-loc \\r\\n               \#(rand-int \\r\\n                  (. image getHeight))))))" "(random-point (num-of-random-starts) (tgaa.util.image/get-image))" "(get-trail-paths  (tgaa.util.image/get-image))" "                    (apply conj \\r\\n                           (random-point \\r\\n                             (num-of-random-starts) (tgaa.util.image/get-image))\\r\\n                           (phero-points \\r\\n                             (num-of-phero-starts)))" "(map \#(ant-path % image)\\r\\n                    (apply conj \\r\\n                           (random-point \\r\\n                             (num-of-random-starts) (tgaa.util.image/get-image))\\r\\n                           (phero-points \\r\\n                             (num-of-phero-starts))))" "                    (apply conj \\r\\n                           (random-point \\r\\n                             (num-of-random-starts) (tgaa.util.image/get-image))\\r\\n                           (phero-points \\r\\n                             (num-of-phero-starts)))" "(map \#(ant-path % (tgaa.util.image/get-image))\\r\\n                    (apply conj \\r\\n                           (random-point \\r\\n                             (num-of-random-starts) (tgaa.util.image/get-image))\\r\\n                           (phero-points \\r\\n                             (num-of-phero-starts))))" "(ant-path [1 1] (tgaa.util.image/get-image))" "(ant-path [10 10] (tgaa.util.image/get-image))" "(rand-ant-dir [1 1] (tgaa.util.image/get-image))" "(second [1 2])" "((full-path-last-point (second d)) 3)" "(defn rand-ant-dir \\r\\n  \\"Creates safe random direction at 45 deg increments with starting point x y\\"\\r\\n  [point ^BufferedImage image] \\r\\n   (\:dir-opt (first \\r\\n               (filter \#(let [lx (first (\:last %))\\r\\n                              ly (second (\:last %))]\\r\\n                          (and (> lx 0) (> ly 0)) (< lx (. image getWidth)) (< ly (. image getHeight)))\\r\\n                       (map (fn [d] {\:last [(full-path-last-point (first point)(first d)) \\r\\n                                            ((full-path-last-point (second point) (second d)))] \\r\\n                                          \:dir-opt d})  (shuffle dir-opt))))))" "(rand-ant-dir [1 1] (tgaa.util.image/get-image))" "(defn full-path-last-point [start dir]\\r\\n  \\"Get last points of gen axis of a path for performance\\"\\r\\n    (cond \\r\\n      (\= 0 dir)\\r\\n      start\\r\\n      (\= 1 dir)\\r\\n      (+ start (- (\:maxPathLength config) 1))\\r\\n      \:else\\r\\n      (+ (- start  (\:maxPathLength config) ) 1)))" "(rand-ant-dir [1 1] (tgaa.util.image/get-image))" "(defn full-path-last-point [start dir]\\r\\n  \\"Get last points of gen axis of a path for performance\\"\\r\\n    (cond \\r\\n      (\= 0 dir)\\r\\n      start\\r\\n      (\= 1 dir)\\r\\n      (+ start (- (\:max-path-length config) 1))\\r\\n      \:else\\r\\n      (+ (- start  (\:max-path-length config) ) 1)))" "(rand-ant-dir [1 1] (tgaa.util.image/get-image))" "( full-path-last-point  1 1)" "\\r\\n(defn full-path-last-point [start dir]\\r\\n  \\"Get last points of gen axis of a path for performance\\"\\r\\n    (cond \\r\\n      (\= 0 dir)\\r\\n      start\\r\\n      (\= 1 dir)\\r\\n      (+ start (- (\:max-path-length config) 1))\\r\\n      \:else\\r\\n      (+ (- start  (\:max-path-length config) ) 1)))\\r\\n  \\r\\n(defn rand-ant-dir \\r\\n  \\"Creates safe random direction at 45 deg increments with starting point x y\\"\\r\\n  [point ^BufferedImage image] \\r\\n   (\:dir-opt (first \\r\\n               (filter \#(let [lx (first (\:last %))\\r\\n                              ly (second (\:last %))]\\r\\n                          (and (> lx 0) (> ly 0)) (< lx (. image getWidth)) (< ly (. image getHeight)))\\r\\n                       (map (fn [d] {\:last [(full-path-last-point (first point)(first d)) \\r\\n                                            ((full-path-last-point (second point) (second d)))] \\r\\n                                          \:dir-opt d})  (shuffle dir-opt))))))" "(rand-ant-dir [1 1] (tgaa.util.image/get-image))" "(defn rand-ant-dir \\r\\n  \\"Creates safe random direction at 45 deg increments with starting point x y\\"\\r\\n  [point ^BufferedImage image] \\r\\n   (\:dir-opt (first \\r\\n               (filter \#(let [lx (first (\:last %))\\r\\n                              ly (second (\:last %))]\\r\\n                          (and (> lx 0) (> ly 0)) (< lx (. image getWidth)) (< ly (. image getHeight)))\\r\\n                       (map (fn [d] {\:last [(full-path-last-point (first point)(first d)) \\r\\n                                            (full-path-last-point (second point) (second d))] \\r\\n                                          \:dir-opt d})  (shuffle dir-opt))))))" "(rand-ant-dir [1 1] (tgaa.util.image/get-image))" "(get-trail-paths (tgaa.util.image/get-image))" "(defn get-trail-paths [^BufferedImage image]\\r\\n  \\"Gets ant paths for a trail based on session and config\\"\\r\\n  (apply merge (map \#(ant-path % image)\\r\\n                    ( conj \\r\\n                           (random-point \\r\\n                             (num-of-random-starts) image)\\r\\n                           (phero-points \\r\\n                             (num-of-phero-starts))))))" "(get-trail-paths (tgaa.util.image/get-image))" "(defn get-trail-paths [^BufferedImage image]\\r\\n  \\"Gets ant paths for a trail based on session and config\\"\\r\\n  (apply merge (map \#(ant-path % image)\\r\\n                    (apply conj \\r\\n                           (random-point \\r\\n                             (num-of-random-starts) image)\\r\\n                           (phero-points \\r\\n                             (num-of-phero-starts))))))" "(get-trail-paths (tgaa.util.image/get-image))" "(phero-points \\r\\n                             (num-of-phero-starts))" "(random-point \\r\\n                             (num-of-random-starts) image)" "(random-point \\r\\n                             (num-of-random-starts) (tgaa.util.image/get-image)" "(random-point \\r\\n                             (num-of-random-starts) (tgaa.util.image/get-image))" "(map \#(ant-path % (tgaa.util.image/get-image))\\r\\n                    (apply conj \\r\\n                           (random-point \\r\\n                             (num-of-random-starts) (tgaa.util.image/get-image))\\r\\n                           (phero-points \\r\\n                             (num-of-phero-starts))))" "(defn get-trail-paths [^BufferedImage image]\\r\\n  \\"Gets ant paths for a trail based on session and config\\"\\r\\n  (map \#(ant-path % image)\\r\\n       (apply conj \\r\\n              (random-point \\r\\n                (num-of-random-starts) image)\\r\\n              (phero-points \\r\\n                (num-of-phero-starts)))))" "(get-trail-paths (tgaa.util.image/get-image))" " (let [ ant-path {\:start (189 129),\\r\\n  \:end nil,\\r\\n  \:dir [1 0],\\r\\n  \:thresh false}\\n  image (tgaa.util.image/get-image)]" "(+ (- 1  (\:max-path-length config) ) 1)" "(def dir-opt [[0 1][0 -1][1 0][-1 0][1 1][-1 -1][1 -1][-1 1]])" "(get-trail-paths (tgaa.util.image/get-image))" "(let [ \\n      ant-path {\:start (189 129),\\r\\n                \:end nil,\\r\\n                \:dir [1 0],\\r\\n                \:thresh false}\\n      image (tgaa.util.image/get-image)\\n      thesh  -1111000]\\n  (loop [i 0 thresh-point nil]\\n    (when-not (or (>\= i (\:max-path-length config)) (not (nil? thresh-point)))\\n      (assoc ant-path \:thresh thresh-point)\\n      (recur (inc i) (if (< thesh (. image getRGB \\n                                    (+ (first (\:start ant-path)) (* (first (\:dir ant-path)) i))\\n                                    (+ (second (\:start ant-path)) (* (second (\:dir ant-path)) i)))))))))" "(let [ \\n      ant-path {\:start (189 129),\\r\\n                \:end nil,\\r\\n                \:dir [1 0],\\r\\n                \:thresh false}\\n      image (tgaa.util.image/get-image)\\n      thesh  -1111000]\\n  (loop [i 0 thresh-point nil]\\n    (when-not (or (>\= i (\:max-path-length config)) (not (nil? thresh-point)))\\n      (assoc ant-path \:thresh thresh-point)\\n      (recur (inc i) (if (< thesh (. image getRGB \\n                                    (+ (first (\:start ant-path)) (* (first (\:dir ant-path)) i))\\n                                    (+ (second (\:start ant-path)) (* (second (\:dir ant-path)) i))))\\n                       true false)))))" "(defn path-loc-at-time [ant-path time]\\r\\n  (+ (first (\:start ant-path)) (* (first (\:dir ant-path)) time)))" "(path-loc-at-time {\:start [1 2] \:dir [1 -1]} 4)" "(defn path-loc-at-time [ant-path time]\\r\\n  [(+ (first (\:start ant-path)) (* (first (\:dir ant-path)) time))\\r\\n  (+ (second (\:start ant-path)) (* (second (\:dir ant-path)) i))])" "(defn path-loc-at-time [ant-path time]\\r\\n  [(+ (first (\:start ant-path)) (* (first (\:dir ant-path)) time))\\r\\n  (+ (second (\:start ant-path)) (* (second (\:dir ant-path)) time))])" "(path-loc-at-time {\:start [1 2] \:dir [1 -1]} 4)" "(full-path-last-point 1 1)" "(path-loc-at-time {\:start [1 2] \:dir [1 -1]} 10)" "(path-loc-at-time {\:start [1 2] \:dir [1 -1]} 9)" "(defn path-loc-at-time [ant-path time]\\r\\n  [(+ (first (\:start ant-path)) (* (first (\:dir ant-path)) time))\\r\\n  (+ (second (\:start ant-path)) (* (second (\:dir ant-path)) time))])" "(let [ant-path {\:start (189 129),\\r\\n                \:end nil,\\r\\n                \:dir [1 0],\\r\\n                \:thresh false}\\n      image (tgaa.util.image/get-image)\\n      thesh  -1111000]\\n  (loop [i 0 thresh-point nil]\\n    (when-not (or (>\= i (\:max-path-length config)) (not (nil? thresh-point)))\\n      (assoc ant-path \:thresh thresh-point)\\n      (let [[x y] (path-loc-at-time ant-path i)]\\n        (recur (inc i) (if (< thesh (. image getRGB x y))\\n                         true false))))))" "(let [ant-path {\:start (189 129),\\r\\n                \:end nil,\\r\\n                \:dir [1 0],\\r\\n                \:thresh false}\\n      image (tgaa.util.image/get-image)\\n      thesh  -1111000]\\n  (loop [i 0 thresh-point nil]\\n    (if (or (>\= i (\:max-path-length config)) (not (nil? thresh-point)))\\n      (assoc ant-path \:thresh thresh-point)\\n      (let [[x y] (path-loc-at-time ant-path i)]\\n        (recur (inc i) (if (< thesh (. image getRGB x y))\\n                         true false))))))" "(let [ant-path {\:start (189 129),\\r\\n                \:end nil,\\r\\n                \:dir [1 0],\\r\\n                \:thresh false}\\n      image (tgaa.util.image/get-image)\\n      thesh  -1111000]\\n  (loop [i 0 thresh-point nil]\\n    (when-not (or (>\= i (\:max-path-length config)) (not (nil? thresh-point)))\\n      (assoc ant-path \:thresh thresh-point)\\n      (let [[x y] (path-loc-at-time ant-path i)]\\n        (recur (inc i) (if (< thesh (. image getRGB x y))\\n                         true false))))))" "(let [ant-path {\:start (189 129),\\r\\n                \:end nil,\\r\\n                \:dir [1 0],\\r\\n                \:thresh false}\\n      image (tgaa.util.image/get-image)\\n      thesh  -1111000]\\n  (loop [i 0 thresh-point nil]\\n    (when-not (or (>\= i (\:max-path-length config)) (not (nil? thresh-point)))\\n      (assoc ant-path \:thresh thresh-point)\\n      (print x \\" \\" y))))" "(let [ant-path {\:start (189 129),\\r\\n                \:end nil,\\r\\n                \:dir [1 0],\\r\\n                \:thresh false}\\n      image (tgaa.util.image/get-image)\\n      thesh  -1111000]\\n  (loop [i 0 thresh-point nil]\\n    (when-not (or (>\= i (\:max-path-length config)) (not (nil? thresh-point)))\\n      (assoc ant-path \:thresh thresh-point)\\n      (let [[x y] (path-loc-at-time ant-path i)]\\n        (recur (inc i) (if (< thesh (. image getRGB x y))\\n                         true false))))))" "(let [ant-path {\:start [189 129],\\r\\n                \:end nil,\\r\\n                \:dir [1 0],\\r\\n                \:thresh false}\\n      image (tgaa.util.image/get-image)\\n      thesh  -1111000]\\n  (loop [i 0 thresh-point nil]\\n    (when-not (or (>\= i (\:max-path-length config)) (not (nil? thresh-point)))\\n      (assoc ant-path \:thresh thresh-point)\\n      (let [[x y] (path-loc-at-time ant-path i)]\\n        (recur (inc i) (if (< thesh (. image getRGB x y))\\n                         true false))))))" "(let [ant-path {\:start [189 129],\\r\\n                \:end nil,\\r\\n                \:dir [1 0],\\r\\n                \:thresh false}\\n      image (tgaa.util.image/get-image)\\n      thesh  -1111000]\\n  (loop [i 0 thresh-point nil]\\n    (if (or (>\= i (\:max-path-length config)) (not (nil? thresh-point)))\\n      (assoc ant-path \:thresh thresh-point)\\n      (let [[x y] (path-loc-at-time ant-path i)]\\n        (recur (inc i) \\n               (if (< thesh (. image getRGB x y))\\n                 true false))))))" "(let [ant-path {\:start [189 129],\\r\\n                \:end nil,\\r\\n                \:dir [1 0],\\r\\n                \:thresh false}\\n      image (tgaa.util.image/get-image)\\n      thesh  -1]\\n  (loop [i 0 thresh-point nil]\\n    (if (or (>\= i (\:max-path-length config)) (not (nil? thresh-point)))\\n      (assoc ant-path \:thresh thresh-point)\\n      (let [[x y] (path-loc-at-time ant-path i)]\\n        (recur (inc i) \\n               (if (< thesh (. image getRGB x y))\\n                 true false))))))" "(let [ant-path {\:start [189 129],\\r\\n                \:end nil,\\r\\n                \:dir [1 0],\\r\\n                \:thresh false}\\n      image (tgaa.util.image/get-image)\\n      thesh  -99999999999]\\n  (loop [i 0 thresh-point nil]\\n    (if (or (>\= i (\:max-path-length config)) (not (nil? thresh-point)))\\n      (assoc ant-path \:thresh thresh-point)\\n      (let [[x y] (path-loc-at-time ant-path i)]\\n        (recur (inc i) \\n               (if (< thesh (. image getRGB x y))\\n                 true false))))))" "(let [ant-path {\:start [189 129]\\r\\n                \:end nil\\r\\n                \:dir [1 0]\\r\\n                \:thresh false}\\n      image (tgaa.util.image/get-image)\\n      thesh  -1]\\n  (loop [i 0 thresh-point nil]\\n    (if (or (>\= i (\:max-path-length config)) (not (nil? thresh-point)))\\n      (assoc ant-path \:thresh thresh-point)\\n      (let [[x y] (path-loc-at-time ant-path i)]\\n        (recur (inc i) \\n               (if (< thesh (. image getRGB x y))\\n                 true false))))))" "(let [ant-path {\:start [189 129]\\r\\n                \:end nil\\r\\n                \:dir [1 0]\\r\\n                \:thresh false}\\n      image (tgaa.util.image/get-image)\\n      thesh  -1]\\n  (loop [i 0 thresh? nil end-pont]\\n    (if (or (>\= i (\:max-path-length config)) (not (nil? thresh-point)))\\n      (assoc ant-path \:thresh thresh-point \:end end-pont)\\n      (let [[x y] (path-loc-at-time ant-path i)]\\n        (recur (inc i) \\n               (if (< thesh (. image getRGB x y))\\n                 true false)\\n               [x y])))))" "(let [ant-path {\:start [189 129]\\r\\n                \:end nil\\r\\n                \:dir [1 0]\\r\\n                \:thresh false}\\n      image (tgaa.util.image/get-image)\\n      thesh  -1]\\n  (loop [i 0 thresh? nil end-pont nil]\\n    (if (or (>\= i (\:max-path-length config)) (not (nil? thresh-point)))\\n      (assoc ant-path \:thresh thresh-point \:end end-pont)\\n      (let [[x y] (path-loc-at-time ant-path i)]\\n        (recur (inc i) \\n               (if (< thesh (. image getRGB x y))\\n                 true false)\\n               [x y])))))" "(let [ant-path {\:start [189 129]\\r\\n                \:end nil\\r\\n                \:dir [1 0]\\r\\n                \:thresh false}\\n      image (tgaa.util.image/get-image)\\n      thesh  -1]\\n  (loop [i 0 thresh? false end-pont nil]\\n    (if (or (>\= i (\:max-path-length config)) (not (nil? thresh-point)))\\n      (assoc ant-path \:thresh thresh-point \:end end-pont)\\n      (let [[x y] (path-loc-at-time ant-path i)]\\n        (recur (inc i) \\n               (if (< thesh (. image getRGB x y))\\n                 true false)\\n               [x y])))))" "(let [ant-path {\:start [189 129]\\r\\n                \:end nil\\r\\n                \:dir [1 0]\\r\\n                \:thresh false}\\n      image (tgaa.util.image/get-image)\\n      thesh  -1]\\n  (loop [i 0 thresh? false end-pont nil]\\n    (if (or (>\= i (\:max-path-length config)) thresh?)\\n      (assoc ant-path \:thresh thresh-point \:end end-pont)\\n      (let [[x y] (path-loc-at-time ant-path i)]\\n        (recur (inc i) \\n               (if (< thesh (. image getRGB x y))\\n                 true false)\\n               [x y])))))" "(let [ant-path {\:start [189 129]\\r\\n                \:end nil\\r\\n                \:dir [1 0]\\r\\n                \:thresh false}\\n      image (tgaa.util.image/get-image)\\n      thesh  -1]\\n  (loop [i 0 thresh? false end-pont nil]\\n    (if (or (>\= i (\:max-path-length config)) thresh?)\\n      (assoc ant-path \:thresh thresh? \:end end-pont)\\n      (let [[x y] (path-loc-at-time ant-path i)]\\n        (recur (inc i) \\n               (if (< thesh (. image getRGB x y))\\n                 true false)\\n               [x y])))))" "(let [ant-path {\:start [189 129]\\r\\n                \:end nil\\r\\n                \:dir [1 -1]\\r\\n                \:thresh false}\\n      image (tgaa.util.image/get-image)\\n      thesh  -1]\\n  (loop [i 0 thresh? false end-pont nil]\\n    (if (or (>\= i (\:max-path-length config)) thresh?)\\n      (assoc ant-path \:thresh thresh? \:end end-pont)\\n      (let [[x y] (path-loc-at-time ant-path i)]\\n        (recur (inc i) \\n               (if (< thesh (. image getRGB x y))\\n                 true false)\\n               [x y])))))" "(def image (tgaa.util.image/get-image))" "(. image 194 134)" "(. image getRGB 194 134)" "(let [ant-path {\:start [189 129]\\r\\n                \:end nil\\r\\n                \:dir [1 -1]\\r\\n                \:thresh false}\\n      image (tgaa.util.image/get-image)\\n      thesh  -14277082]\\n  (loop [i 0 thresh? false end-pont nil]\\n    (if (or (>\= i (\:max-path-length config)) thresh?)\\n      (assoc ant-path \:thresh thresh? \:end end-pont)\\n      (let [[x y] (path-loc-at-time ant-path i)]\\n        (recur (inc i) \\n               (if (< thesh (. image getRGB x y))\\n                 true false)\\n               [x y])))))" "(let [ant-path {\:start [189 129]\\r\\n                \:end nil\\r\\n                \:dir [1 1]\\r\\n                \:thresh false}\\n      image (tgaa.util.image/get-image)\\n      thesh  -14277082]\\n  (loop [i 0 thresh? false end-pont nil]\\n    (if (or (>\= i (\:max-path-length config)) thresh?)\\n      (assoc ant-path \:thresh thresh? \:end end-pont)\\n      (let [[x y] (path-loc-at-time ant-path i)]\\n        (recur (inc i) \\n               (if (< thesh (. image getRGB x y))\\n                 true false)\\n               [x y])))))" "(let [ant-path {\:start [189 129]\\r\\n                \:end nil\\r\\n                \:dir [1 1]\\r\\n                \:thresh false}\\n      image (tgaa.util.image/get-image)\\n      thesh  -13277082]\\n  (loop [i 0 thresh? false end-pont nil]\\n    (if (or (>\= i (\:max-path-length config)) thresh?)\\n      (assoc ant-path \:thresh thresh? \:end end-pont)\\n      (let [[x y] (path-loc-at-time ant-path i)]\\n        (recur (inc i) \\n               (if (< thesh (. image getRGB x y))\\n                 true false)\\n               [x y])))))" "(let [ant-path {\:start [189 129]\\r\\n                \:end nil\\r\\n                \:dir [-1 1]\\r\\n                \:thresh false}\\n      image (tgaa.util.image/get-image)\\n      thesh  -13277082]\\n  (loop [i 0 thresh? false end-pont nil]\\n    (if (or (>\= i (\:max-path-length config)) thresh?)\\n      (assoc ant-path \:thresh thresh? \:end end-pont)\\n      (let [[x y] (path-loc-at-time ant-path i)]\\n        (recur (inc i) \\n               (if (< thesh (. image getRGB x y))\\n                 true false)\\n               [x y])))))" "(let [ant-path {\:start [189 129]\\r\\n                \:end nil\\r\\n                \:dir [-1 -1]\\r\\n                \:thresh false}\\n      image (tgaa.util.image/get-image)\\n      thesh  -13277082]\\n  (loop [i 0 thresh? false end-pont nil]\\n    (if (or (>\= i (\:max-path-length config)) thresh?)\\n      (assoc ant-path \:thresh thresh? \:end end-pont)\\n      (let [[x y] (path-loc-at-time ant-path i)]\\n        (recur (inc i) \\n               (if (< thesh (. image getRGB x y))\\n                 true false)\\n               [x y])))))" "(let [ant-path {\:start [189 129]\\r\\n                \:end nil\\r\\n                \:dir [-1 0]\\r\\n                \:thresh false}\\n      image (tgaa.util.image/get-image)\\n      thesh  -13277082]\\n  (loop [i 0 thresh? false end-pont nil]\\n    (if (or (>\= i (\:max-path-length config)) thresh?)\\n      (assoc ant-path \:thresh thresh? \:end end-pont)\\n      (let [[x y] (path-loc-at-time ant-path i)]\\n        (recur (inc i) \\n               (if (< thesh (. image getRGB x y))\\n                 true false)\\n               [x y])))))" "(let [ant-path {\:start [189 129]\\r\\n                \:end nil\\r\\n                \:dir [0 -1]\\r\\n                \:thresh false}\\n      image (tgaa.util.image/get-image)\\n      thesh  -13277082]\\n  (loop [i 0 thresh? false end-pont nil]\\n    (if (or (>\= i (\:max-path-length config)) thresh?)\\n      (assoc ant-path \:thresh thresh? \:end end-pont)\\n      (let [[x y] (path-loc-at-time ant-path i)]\\n        (recur (inc i) \\n               (if (< thesh (. image getRGB x y))\\n                 true false)\\n               [x y])))))" "(defn proc-ant [ant-path image]\\r\\n  (loop [i 0 thresh? false end-pont nil]\\r\\n    (if (or (>\= i (\:max-path-length config)) thresh?)\\r\\n      (assoc ant-path \:thresh thresh? \:end end-pont)\\r\\n      (let [[x y] (path-loc-at-time ant-path i)]\\r\\n        (recur (inc i) \\r\\n               (if (< (\:thresh session) (. image getRGB x y))\\r\\n                 true false)\\r\\n               [x y])))))" "(defn proce-all-ants [ants image]\\n  (loop [ants-to-proc ants ants-process []]\\n    ants-to-proc\\n    (recur  (rest ants-to-proc) (conj ants-process (proc-ant (first ants-to-proc) image)))))" "(defn proce-all-ants [ants image]\\n  (loop [ants-to-proc ants ants-process []]\\n    ants-to-proc\\n    (recur  (rest ants-to-proc) \\n            (conj ants-process \\n                  (proc-ant (first ants-to-proc) image)))))" "(process-all-ants [{\:thresh nil \:dir [1 1] \:start [189 129] \:end nil} {\:thresh nil \:dir [1 1] \:start [189 129] \:end nil}]\\n                  (tgaa.util.image/get-image))" "(defn proc-all-ants [ants image]\\r\\n  (loop [ants-to-proc ants ants-process []]\\r\\n    ants-to-proc\\r\\n    (recur  (rest ants-to-proc) \\r\\n            (conj ants-process \\r\\n                  (proc-ant (first ants-to-proc) image)))))" "(proc-all-ants [{\:thresh nil \:dir [1 1] \:start [189 129] \:end nil} {\:thresh nil \:dir [1 1] \:start [189 129] \:end nil}]\\n                  (tgaa.util.image/get-image))" "(defn proc-all-ants [ants image]\\r\\n  (loop [ants-to-proc ants ants-process []]\\r\\n    ants-to-proc\\r\\n    (recur  (rest ants-to-proc) \\r\\n            ([])))" "(defn proc-all-ants [ants image]\\r\\n  (loop [ants-to-proc ants ants-process []]\\r\\n    ants-to-proc\\r\\n    (recur  (rest ants-to-proc) \\r\\n            [])))" "(proc-all-ants [{\:thresh nil \:dir [1 1] \:start [189 129] \:end nil} {\:thresh nil \:dir [1 1] \:start [189 129] \:end nil}]\\n                  (tgaa.util.image/get-image))" "(defn proc-all-ants [ants image]\\r\\n  (loop [ants-to-proc ants ants-process []]\\n    (if (empty? ants-to-proc)\\r\\n    ants-to-proc\\r\\n    (recur  (rest ants-to-proc) \\r\\n            []))))" "(proc-all-ants [{\:thresh nil \:dir [1 1] \:start [189 129] \:end nil} {\:thresh nil \:dir [1 1] \:start [189 129] \:end nil}]\\n                  (tgaa.util.image/get-image))" "(defn proc-all-ants [ants image]\\r\\n  (loop [ants-to-proc ants ants-process []]\\n    (if (empty? ants-to-proc)\\r\\n    ants-to-proc\\r\\n    (recur  (rest ants-to-proc) \\r\\n            (conj ants-process \\r\\n                  (proc-ant (first ants-to-proc) image))))))" "(proc-all-ants [{\:thresh nil \:dir [1 1] \:start [189 129] \:end nil} {\:thresh nil \:dir [1 1] \:start [189 129] \:end nil}]\\n                  (tgaa.util.image/get-image))" "(defn proc-all-ants [ants image]\\r\\n  (loop [ants-to-proc ants ants-process []]\\n    (if (empty? ants-to-proc)\\r\\n    ants-to-proc\\r\\n    (recur (rest ants-to-proc) \\r\\n           (conj ants-process \\r\\n                 (first ants-to-proc))))))" "(proc-all-ants [{\:thresh nil \:dir [1 1] \:start [189 129] \:end nil} {\:thresh nil \:dir [1 1] \:start [189 129] \:end nil}]\\n                  (tgaa.util.image/get-image))" "(defn proc-all-ants [ants image]\\r\\n  (loop [ants-to-proc ants ants-process []]\\n    (if (empty? ants-to-proc)\\r\\n    ants-to-proc\\r\\n    (recur (rest ants-to-proc) \\r\\n           (conj ants-process \\r\\n                 (first ants-to-proc))))))" "(proc-all-ants [{\:thresh nil \:dir [1 1] \:start [189 129] \:end nil} {\:thresh nil \:dir [1 1] \:start [189 129] \:end nil}]\\n                  (tgaa.util.image/get-image))" "(defn proc-all-ants [ants image]\\r\\n  (loop [ants-to-proc ants ants-process []]\\n    (if (empty? ants-to-proc)\\r\\n    ants-to-proc\\r\\n    (recur (rest ants-to-proc) \\r\\n           (conj ants-process \\r\\n                 (first ants-to-proc))))))" "(proc-all-ants [{\:thresh nil \:dir [1 1] \:start [189 129] \:end nil} {\:thresh nil \:dir [1 1] \:start [189 129] \:end nil}]\\n                  (tgaa.util.image/get-image))" "(defn proc-all-ants [ants image]\\r\\n  (loop [ants-to-proc ants ants-process []]\\n    (if (empty? ants-to-proc)\\r\\n    ants-process\\r\\n    (recur (rest ants-to-proc) \\r\\n           (conj ants-process \\r\\n                 (first ants-to-proc))))))" "(proc-all-ants [{\:thresh nil \:dir [1 1] \:start [189 129] \:end nil} {\:thresh nil \:dir [1 1] \:start [189 129] \:end nil}]\\n                  (tgaa.util.image/get-image))" "(defn proc-all-ants [ants image]\\r\\n  (loop [ants-to-proc ants ants-process []]\\n    (if (empty? ants-to-proc)\\r\\n    ants-process\\r\\n    (recur (rest ants-to-proc) \\r\\n           (conj ants-process \\r\\n                 (proc-ant (first ants-to-proc) image))))))" "image" "(proc-all-ants [{\:thresh nil \:dir [1 1] \:start [189 129] \:end nil} {\:thresh nil \:dir [1 1] \:start [189 129] \:end nil}]\\n                  image)" "(first [{\:thresh nil \:dir [1 1] \:start [189 129] \:end nil} {\:thresh nil \:dir [1 1] \:start [189 129] \:end nil}])" "(proce-ant {\:thresh nil,\\r\\n \:dir [1 1],\\r\\n \:start [189 129],\\r\\n \:end nil} image)" "(defn proc-ant [ant-path image]\\r\\n  (loop [i 0 thresh? false end-pont nil]\\r\\n    (if (or (>\= i (\:max-path-length config)) thresh?)\\r\\n      (assoc ant-path \:thresh thresh? \:end end-pont)\\r\\n      (let [[x y] (path-loc-at-time ant-path i)]\\r\\n        (recur (inc i) \\r\\n               (if (< (\:thresh session) (. image getRGB x y))\\r\\n                 true false)\\r\\n               [x y])))))" "(proce-ant {\:thresh nil, \:dir [1 1], \:start [189 129], \:end nil} image)" "(proc-ant {\:thresh nil, \:dir [1 1], \:start [189 129], \:end nil} image)" "(\:thresh session)" "(def session (atom {\:trial-num 0\\r\\n                    \:image-location \\"C\:\\\\\\\\Users\\\\\\\\erudi\\\\\\\\OneDrive\\\\\\\\Activity Organizer\\\\\\\\Projects\\\\\\\\Active\\\\\\\\TAA Research\\\\\\\\Project Resources\\\\\\\\images\\\\\\\\unprocessed\\\\\\\\3\\\\\\\\1\\\\\\\\3_1_1.jpg\\"\\r\\n                    \:cand-paths []\\r\\n                    \:thresh 0}))" "(get-trail-paths)" "(get-trail-paths (tgaa.util.image/get-image ))" "(tgaa.util.image/get-image )" "(get-trail-paths (get-image ))" "(get-image )" "(get-trail-paths (tgaa.util.image/get-image))" "(proc-all-ants (get-trail-paths (tgaa.util.image/get-image)) proc-all-ants)" "(def i (tgaa.util.image/get-image))" "i" "(. i getRGB 10 10)" "(proc-all-ants (get-trail-paths i) i)" "(get-trail-paths i)" "(proc-ant {\:start [1 1],\\r\\n  \:end nil,\\r\\n  \:dir [-1 -1],\\r\\n  \:thresh false} i)" "@session" "config" "(proc-ant {\:start [1 1],\\r\\n  \:end nil,\\r\\n  \:dir [-1 -1],\\r\\n  \:thresh false} i)" "(proc-ant {\:start [1 1],\:end nil \:dir [-1 -1],\:thresh false} i)" "(defn proc-ant [ant-path image]\\r\\n  (loop [i 0 thresh? false end-pont nil]\\r\\n    (if (or (>\= i (\:max-path-length config)) thresh?)\\r\\n      (assoc ant-path \:thresh thresh? \:end end-pont)\\r\\n      (let [[x y] (path-loc-at-time ant-path i)]\\r\\n        (recur (inc i) \\r\\n               (if (< (\:thresh session) (. image getRGB x y))\\r\\n                 true false)\\r\\n               [x y])))))" "(proc-ant {\:start [1 1],\:end nil \:dir [-1 -1],\:thresh false} i)" "(\:thresh session)" "(defn proc-ant [ant-path image]\\r\\n  (loop [i 0 thresh? false end-pont nil]\\r\\n    (if (or (>\= i (\:max-path-length config)) thresh?)\\r\\n      (assoc ant-path \:thresh thresh? \:end end-pont)\\r\\n      (let [[x y] (path-loc-at-time ant-path i)]\\r\\n        (recur (inc i) \\r\\n               (if (< (\:thresh @session) (. image getRGB x y))\\r\\n                 true false)\\r\\n               [x y])))))" "(\:thresh session)" "(\:thresh @session)" "(proc-ant {\:start [1 1],\:end nil \:dir [-1 -1],\:thresh false} i)" "(proc-ant {\:start [110 100],\:end nil \:dir [-1 -1],\:thresh false} i)" "(proc-all-ants (get-trail-paths i) i)" "(get-trail-paths i)" "(defn phero-points [num]\\r\\n               (do (print \\"not implemented\\")\\r\\n                 (repeat 10 [100 100])))" "(proc-all-ants (get-trail-paths i) i)" "(get-trail-paths i)" "(proc-all-ants (get-trail-paths i) i)" "(proc-ant (first (get-trail-paths i) i))" "(proc-ant (first (get-trail-paths i)) i)" "(proc-all-ants (get-trail-paths i) i)" "(defn proc-all-ants [ants image]\\r\\n  (loop [ants-to-proc ants ants-process []]\\n    (if (empty? ants-to-proc)\\r\\n    ants-process\\r\\n    (recur (rest ants-to-proc) \\r\\n           (conj ants-process \\r\\n                 (proc-ant (first ants-to-proc) image))))))" "(proc-all-ants (get-trail-paths i) i)" "(num-of-phero-starts)" "(num-of-random-starts)" "@session" "config" "\\r\\n(defn num-of-phero-starts []\\r\\n  \\"Creates number of pheromone starts based on config and session values\\"\\r\\n  (int \\r\\n    (* \\r\\n      (\:trial-num @session) \\r\\n      (\:plac-heur config) \\r\\n      (\:num-ants config))))\\r\\n \\r\\n(defn num-of-random-starts []\\r\\n  \\"Creates number of random starts based on config and session values\\"\\r\\n     (int\\r\\n       (- (\:num-ants config)\\r\\n       (* \\r\\n         (\:trial-num @session) \\r\\n         (\:plac-heur config)\\r\\n         (\:num-ants config)))))" "(proc-all-ants (get-trail-paths i) i)" "(def i (tgaa.util.image/get-image))" "(proc-all-ants (get-trail-paths i) i)" "(num-of-random-starts)" "(num-of-phero-starts)" "(get-trail-paths i)" "(random-point \\r\\n                (num-of-random-starts) i)" "(phero-points \\r\\n                (num-of-phero-starts))" "(num-of-phero-starts)" "(apply conj \\r\\n              (random-point \\r\\n                (num-of-random-starts) image)\\r\\n              (phero-points \\r\\n                (num-of-phero-starts)))" "(apply conj \\r\\n              (random-point \\r\\n                (num-of-random-starts) i)\\r\\n              (phero-points \\r\\n                (num-of-phero-starts)))" "(num-of-phero-starts)" "(phero-points \\r\\n                (num-of-phero-starts))" "(defn phero-points [num]\\r\\n               (do (print \\"not implemented\\")\\r\\n                 (repeat num [100 100])))" "(phero-points \\r\\n                (num-of-phero-starts))" "(apply conj \\r\\n              (random-point \\r\\n                (num-of-random-starts) i)\\r\\n              (phero-points \\r\\n                (num-of-phero-starts)))" "(apply conj \\r\\n              (random-point \\r\\n                (num-of-random-starts) i)\\r\\n              [])" "(merge\\r\\n              (random-point \\r\\n                (num-of-random-starts) i)\\r\\n              (phero-points \\r\\n                (num-of-phero-starts)))" "(apply conj \\r\\n              (random-point \\r\\n                (num-of-random-starts) i)\\r\\n              (phero-points \\r\\n                (num-of-phero-starts)))" "(apply cons \\r\\n              (random-point \\r\\n                (num-of-random-starts) i)\\r\\n              (phero-points \\r\\n                (num-of-phero-starts)))" "(cons \\r\\n              (random-point \\r\\n                (num-of-random-starts) i)\\r\\n              (phero-points \\r\\n                (num-of-phero-starts)))" "(apply conj \\r\\n              (random-point \\r\\n                (num-of-random-starts) i)\\r\\n              (phero-points \\r\\n                (num-of-phero-starts)))" "(conj \\r\\n              (random-point \\r\\n                (num-of-random-starts) i)\\r\\n              (phero-points \\r\\n                (num-of-phero-starts)))" "(apply conj \\r\\n              (random-point \\r\\n                (num-of-random-starts) i)\\r\\n              (phero-points \\r\\n                (num-of-phero-starts)))" "(cat \\r\\n       (random-point \\r\\n         (num-of-random-starts) i)\\r\\n       (phero-points \\r\\n         (num-of-phero-starts)))" "(concat \\r\\n       (random-point \\r\\n         (num-of-random-starts) i)\\r\\n       (phero-points \\r\\n         (num-of-phero-starts)))" "\\r\\n(defn get-trail-paths [^BufferedImage image]\\r\\n  \\"Gets ant paths for a trail based on session and config\\"\\r\\n  (map \#(ant-path % image)\\r\\n       (concat \\r\\n         (random-point \\r\\n           (num-of-random-starts) image)\\r\\n         (phero-points \\r\\n           (num-of-phero-starts)))))" "(proc-all-ants (get-trail-paths i) i)" "session" "(reset\! session (assoc @session \:thresh 10))" "(bootstrap-value i)" "(bootstrap-value image)" "(def image ^BufferedImage (image-RGB-gray (get-image)))" "(defn proc-all-ants [image]\\r\\n  (loop [ants-to-proc ants ants-process []]\\r\\n    (if (empty? ants-to-proc)\\r\\n    ants-process\\r\\n    (recur (rest ants-to-proc) \\r\\n           (conj ants-process \\r\\n                 (proc-ant (first ants-to-proc) image))))))" "(get-trail-paths (tgaa.util.image/get-image))" "(tgaa.util.ant-path get-trail-paths (tgaa.util.image/get-image))" "\\r\\n(defn get-image []\\r\\n  \\"Takes a map with \:imageLocation and returns assocated BufferedImage\\"\\r\\n  (try\\r\\n    (. ImageIO read (File.  \\r\\n       (\:image-location  @session)))\\r\\n    (catch Exception e \\r\\n      (do (println \\"Image not found. Check location is correct\\")\\r\\n        (throw (Exception.  e))))))" "(tgaa.util.image/get-image)" "(get-trail-paths (tgaa.util.image/get-image))" "(let [ i (tgaa.util.image/get-image)]\\n  (proc-all-ants \\n    (get-trail-paths \\n      (tgaa.util.image/get-image)) i))" "(let [ i (tgaa.util.image/get-image)]\\n  (proc-all-ants \\n    (get-trail-paths i) i))" "(let [i (tgaa.util.image/get-image)]\\n  (proc-all-ants \\n    (get-trail-paths i) i))" "(let [ i (tgaa.util.image/get-image)]\\n  (proc-all-ants \\n    (get-trail-paths i) i))" "(defn compare-two-points [point-ref point-comp image]\\r\\n  (if (or (nil? point-ref) (< (. image getRGB (first point-ref)(second point-ref))\\r\\n                              (. image getRGB (first point-comp)(second point-comp))))\\r\\n    point-comp\\r\\n    point-ref))" "\\r\\n(defn proc-ant [ant-path image]\\r\\n  \\"Takes ants and image and generates logical paths\\"\\r\\n  (loop [i 0 thresh? false end-pont nil local-thresh nil]\\r\\n    (if (or (>\= i (\:max-path-length config)) thresh?)\\r\\n      (assoc ant-path \:thresh thresh? \:end end-pont)\\r\\n      (let [[x y] (path-loc-at-time ant-path i)]\\r\\n        (recur (inc i) \\r\\n               (if (< (\:thresh @session) (. image getRGB x y))\\r\\n                 true false)\\r\\n               (compare-two-points [x y] local-thresh))))))" "\\r\\n(defn proc-ant [ant-path image]\\r\\n  \\"Takes ants and image and generates logical paths\\"\\r\\n  (loop [i 0 thresh? false end-pont nil local-thresh nil]\\r\\n    (if (or (>\= i (\:max-path-length config)) thresh?)\\r\\n      (assoc ant-path \:thresh thresh? \:end end-pont \:local-thresh local-thresh)\\r\\n      (let [[x y] (path-loc-at-time ant-path i)]\\r\\n        (recur (inc i) \\r\\n               (if (< (\:thresh @session) (. image getRGB x y))\\r\\n                 true false)\\n               [x y]\\r\\n               (compare-two-points [x y] local-thresh))))))" "(let [ i (tgaa.util.image/get-image)]\\n  (proc-all-ants \\n    (get-trail-paths i) i))" "(get-trail-paths (tgaa.util.image/get-image))" "\\r\\n(defn proc-ant [ant-path image]\\r\\n  \\"Takes ants and image and generates logical paths\\"\\r\\n  (loop [i 0 thresh? false end-pont nil local-thresh nil]\\r\\n    (if (or (>\= i (\:max-path-length config)) thresh?)\\r\\n      (assoc ant-path \:thresh thresh? \:end end-pont \:local-thresh local-thresh)\\r\\n      (let [[x y] (path-loc-at-time ant-path i)]\\r\\n        (recur (inc i) \\r\\n               (if (< (\:thresh @session) (. image getRGB x y))\\r\\n                 true false)\\n               [x y]\\r\\n               (compare-two-points [x y] local-thresh))))))" "(let [ i (tgaa.util.image/get-image)]\\n  (proc-all-ants \\n    (get-trail-paths i) i))" "\\r\\n(defn proc-ant [ant-path image]\\r\\n  \\"Takes ants and image and generates logical paths\\"\\r\\n  (loop [i 0 thresh? false end-pont nil local-thresh nil]\\r\\n    (if (or (>\= i (\:max-path-length config)) thresh?)\\r\\n      (assoc ant-path \:thresh thresh? \:end end-pont \:local-thresh local-thresh)\\r\\n      (let [[x y] (path-loc-at-time ant-path i)]\\r\\n        (recur (inc i) \\r\\n               (if (< (\:thresh @session) (. image getRGB x y))\\r\\n                 true false)\\n               [x y]\\r\\n               (compare-two-points [x y] local-thresh image))))))" "(let [ i (tgaa.util.image/get-image)]\\n  (proc-all-ants \\n    (get-trail-paths i) i))" "\\r\\n(defn proc-ant [ant-path image]\\r\\n  \\"Takes ants and image and generates logical paths\\"\\r\\n  (loop [i 0 thresh? false end-pont nil local-thresh nil]\\r\\n    (if (or (>\= i (\:max-path-length config)) thresh?)\\r\\n      (assoc ant-path \:thresh thresh? \:end end-pont \:local-thresh local-thresh)\\r\\n      (let [[x y] (path-loc-at-time ant-path i)]\\r\\n        (recur (inc i) \\r\\n               (if (< (\:thresh @session) (. image getRGB x y))\\r\\n                 true false)\\n               [x y]\\r\\n               (compare-two-points [1 1] [1 1] image))))))" "(let [ i (tgaa.util.image/get-image)]\\n  (proc-all-ants \\n    (get-trail-paths i) i))" "\\r\\n(defn proc-ant [ant-path image]\\r\\n  \\"Takes ants and image and generates logical paths\\"\\r\\n  (loop [i 0 thresh? false end-pont nil local-thresh nil]\\r\\n    (if (or (>\= i (\:max-path-length config)) thresh?)\\r\\n      (assoc ant-path \:thresh thresh? \:end end-pont \:local-thresh local-thresh)\\r\\n      (let [[x y] (path-loc-at-time ant-path i)]\\r\\n        (recur (inc i) \\r\\n               (if (< (\:thresh @session) (. image getRGB x y))\\r\\n                 true false)\\n               [x y]\\r\\n               (compare-two-points [10 10] [10 10] image))))))" "(let [ i (tgaa.util.image/get-image)]\\n  (proc-all-ants \\n    (get-trail-paths i) i))" "\\r\\n(defn proc-ant [ant-path image]\\r\\n  \\"Takes ants and image and generates logical paths\\"\\r\\n  (loop [i 0 thresh? false end-pont nil local-thresh nil]\\r\\n    (if (or (>\= i (\:max-path-length config)) thresh?)\\r\\n      (assoc ant-path \:thresh thresh? \:end end-pont \:local-thresh local-thresh)\\r\\n      (let [[x y] (path-loc-at-time ant-path i)]\\r\\n        (recur (inc i) \\r\\n               (if (< (\:thresh @session) (. image getRGB x y))\\r\\n                 true false)\\n               [x y]\\r\\n               nil)))))" "(let [ i (tgaa.util.image/get-image)]\\n  (proc-all-ants \\n    (get-trail-paths i) i))" "(compare-two-points [1 1] [1 2] (get-image))" "(compare-two-points [1 1] [1 2] (tgaa.util.image/get-image))" "(compare-two-points nil [1 2] (tgaa.util.image/get-image))" "\\r\\n(defn proc-ant [ant-path image]\\r\\n  \\"Takes ants and image and generates logical paths\\"\\r\\n  (loop [i 0 thresh? false end-pont nil local-thresh nil]\\r\\n    (if (or (>\= i (\:max-path-length config)) thresh?)\\r\\n      (assoc ant-path \:thresh thresh? \:end end-pont \:local-thresh local-thresh)\\r\\n      (let [[x y] (path-loc-at-time ant-path i)]\\r\\n        (recur (inc i) \\r\\n               (if (< (\:thresh @session) (. image getRGB x y))\\r\\n                 true false)\\n               [x y]\\r\\n               (compare-two-points [10 10] [10 10] image))))))" "(let [ i (tgaa.util.image/get-image)]\\n  (proc-all-ants \\n    (get-trail-paths i) i))" "(let [ i (tgaa.util.image/get-image)]\\n  (proc-ant \\n    {\:start [100 100] \:dir [1 1]} i))" "\\r\\n(defn proc-ant [ant-path image]\\r\\n  \\"Takes ants and image and generates logical paths\\"\\r\\n  (loop [i 0 thresh? false end-pont nil local-thresh nil]\\r\\n    (if (or (>\= i (\:max-path-length config)) thresh?)\\r\\n      (assoc ant-path \:thresh thresh? \:end end-pont \:local-thresh local-thresh)\\r\\n      (let [[x y] (path-loc-at-time ant-path i)]\\r\\n        (recur (inc i) \\r\\n               (if (< (\:thresh @session) (. image getRGB x y))\\r\\n                 true false)\\n               [x y]\\r\\n               (compare-two-points [x y] local-thresh image))))))" "(let [ i (tgaa.util.image/get-image)]\\n  (proc-ant \\n    {\:start [100 100] \:dir [1 1]} i))" "(\:thresh @session)" "\\r\\n(defn proc-ant [ant-path image]\\r\\n  \\"Takes ants and image and generates logical paths\\"\\r\\n  (loop [i 0 thresh? false end-pont nil local-thresh nil]\\r\\n    (if (or (>\= i (\:max-path-length config)) thresh?)\\r\\n      (assoc ant-path \:thresh thresh? \:end end-pont \:local-thresh local-thresh)\\r\\n      (let [[x y] (path-loc-at-time ant-path i)]\\r\\n        (recur (inc i) \\r\\n               (if (< (\:thresh @session) (. image getRGB x y))\\r\\n                 true false)\\n               [x y]\\r\\n               (compare-two-points [x y] local-thresh image))))))" "(let [ i (tgaa.util.image/get-image)]\\n  (proc-ant \\n    {\:start [100 100] \:dir [1 1]} i))" "\\r\\n(defn proc-ant [ant-path image]\\r\\n  \\"Takes ants and image and generates logical paths\\"\\r\\n  (loop [i 0 thresh? false end-pont nil local-thresh nil]\\r\\n    (if (or (>\= i (\:max-path-length config)) thresh?)\\r\\n      (assoc ant-path \:thresh thresh? \:end end-pont \:local-thresh local-thresh)\\r\\n      (let [[x y] (path-loc-at-time ant-path i)]\\r\\n        (recur (inc i) \\r\\n               (if (< (\:thresh @session) (. image getRGB x y))\\r\\n                 true false)\\n               [x y]\\r\\n               (compare-two-points [x y] local-thresh image))))))" "(let [ i (tgaa.util.image/get-image)]\\n  (proc-ant \\n    {\:start [100 100] \:dir [1 1]} i))" "\\r\\n(defn proc-ant [ant-path image]\\r\\n  \\"Takes ants and image and generates logical paths\\"\\r\\n  (loop [i 0 thresh? false end-pont nil local-thresh nil]\\r\\n    (if (or (>\= i (\:max-path-length config)) thresh?)\\r\\n      (assoc ant-path \:thresh thresh? \:end end-pont \:local-thresh local-thresh)\\r\\n      (let [[x y] (path-loc-at-time ant-path i)]\\r\\n        (recur (inc i) \\r\\n               (if (< (\:thresh @session) (. image getRGB x y))\\r\\n                 true false)\\n               [x y]\\r\\n               (compare-two-points[10 10] [10 10] image))))))" "(let [ i (tgaa.util.image/get-image)]\\n  (proc-ant \\n    {\:start [100 100] \:dir [1 1]} i))" "\\r\\n(defn proc-ant [ant-path image]\\r\\n  \\"Takes ants and image and generates logical paths\\"\\r\\n  (loop [i 0 thresh? false end-pont nil local-thresh nil]\\r\\n    (if (or (>\= i (\:max-path-length config)) thresh?)\\r\\n      (assoc ant-path \:thresh thresh? \:end end-pont \:local-thresh local-thresh)\\r\\n      (let [[x y] (path-loc-at-time ant-path i)]\\r\\n        (recur (inc i) \\r\\n               (if (< (\:thresh @session) (. image getRGB x y))\\r\\n                 true false)\\n               [x y]\\r\\n               (compare-two-points local-thresh [x y]  image))))))" "(let [ i (tgaa.util.image/get-image)]\\n  (proc-ant \\n    {\:start [100 100] \:dir [1 1]} i))" "(let [ i (tgaa.util.image/get-image)]\\n  (proc-ant \\n    {\:start [100 100] \:dir [1 -1]} i))" "(let [ i (tgaa.util.image/get-image)]\\n  (proc-all-ants \\n    (get-trail-paths i) i))" "(let [ i (tgaa.util.image/get-image)]\\n  (proc-ant \\n    {\:start [100 100] \:dir [1 -1]} i))" "(let [ i (tgaa.util.image/get-image)]\\n  (proc-all-ants \\n    (get-trail-paths i) i))" "(defn compare-two-points [point-ref point-comp image compare-type]\\r\\n  \\"returns point-comp if point-ref is null; point-compare returned on if true given compare-type \:less \:great\\"\\r\\n  (if (nil? point-ref)\\r\\n    point-comp\\r\\n    (let [ref-val (. image getRGB (first point-ref)(second point-ref))\\r\\n          comp-val (. image getRGB (first point-comp)(second point-comp))] \\r\\n      (if (\:less compare-type)\\r\\n        (if (< ref-val comp-val)\\r\\n          ref-val \\r\\n          comp-val)\\r\\n         (if (> ref-val comp-val)\\r\\n          comp-val\\r\\n          ref-val)))))" "(defn proc-ant [ant-path image]\\r\\n  \\"Takes ants and image and generates logical paths\\"\\r\\n  (loop [i 0 thresh? false end-pont nil local-min nil local-max nil]\\r\\n    (if (or (>\= i (\:max-path-length config)) thresh?)\\r\\n      (assoc ant-path \:thresh thresh? \:end end-pont \:local-min local-min \:local-max local-max)\\r\\n      (let [[x y] (path-loc-at-time ant-path i)]\\r\\n        (recur (inc i) \\r\\n               (if (< (\:thresh @session) (. image getRGB x y))\\r\\n                 true false)\\r\\n               [x y]\\r\\n               (compare-two-points local-thresh [x y] image \:less)\\r\\n               (compare-two-points local-thresh [x y] image \:great))))))" "(defn proc-ant [ant-path image]\\r\\n  \\"Takes ants and image and generates logical paths\\"\\r\\n  (loop [i 0 thresh? false end-pont nil local-min nil local-max nil]\\r\\n    (if (or (>\= i (\:max-path-length config)) thresh?)\\r\\n      (assoc ant-path \:thresh thresh? \:end end-pont \:local-min local-min \:local-max local-max)\\r\\n      (let [[x y] (path-loc-at-time ant-path i)]\\r\\n        (recur (inc i) \\r\\n               (if (< (\:thresh @session) (. image getRGB x y))\\r\\n                 true false)\\r\\n               [x y]\\r\\n               (compare-two-points local-min [x y] image \:less)\\r\\n               (compare-two-points local-max [x y] image \:great))))))" "(let [ i (tgaa.util.image/get-image)]\\n  (proc-all-ants \\n    (get-trail-paths i) i))" "(let [ i (tgaa.util.image/get-image)]\\n  (proc-ant \\n    {\:start [100 100] \:dir [1 -1]} i))" "(defn compare-two-points [point-ref point-comp image compare-type]\\r\\n  \\"returns point-comp if point-ref is null; point-compare returned on if true given compare-type \:less \:great\\"\\r\\n  (if (nil? point-ref)\\r\\n    point-comp\\r\\n    (let [ref-val (. image getRGB (first point-ref)(second point-ref))\\r\\n          comp-val (. image getRGB (first point-comp)(second point-comp))] \\r\\n      (if (\:less compare-type)\\r\\n        (if (< ref-val comp-val)\\r\\n          point-ref \\r\\n          point-comp)\\r\\n         (if (> ref-val comp-val)\\r\\n          point-comp\\r\\n          point-ref))))" "(defn compare-two-points [point-ref point-comp image compare-type]\\r\\n  \\"returns point-comp if point-ref is null; point-compare returned on if true given compare-type \:less \:great\\"\\r\\n  (if (nil? point-ref)\\r\\n    point-comp\\r\\n    (let [ref-val (. image getRGB (first point-ref)(second point-ref))\\r\\n          comp-val (. image getRGB (first point-comp)(second point-comp))] \\r\\n      (if (\:less compare-type)\\r\\n        (if (< ref-val comp-val)\\r\\n          point-ref \\r\\n          point-comp)\\r\\n         (if (> ref-val comp-val)\\r\\n          point-comp\\r\\n          point-ref)))))" "(let [ i (tgaa.util.image/get-image)]\\n  (proc-ant \\n    {\:start [100 100] \:dir [1 -1]} i))" "(let [ i (tgaa.util.image/get-image)]\\n  (proc-all-ants \\n    (get-trail-paths i) i))" "(let [ i (tgaa.util.image/get-image)]\\n  (proc-ant \\n    {\:start [100 100] \:dir [1 -1]} i))" "(let [ i (tgaa.util.image/get-image)]\\n  (proc-ant \\n    {\:start [100 100] \:dir [1 0]} i))" "(let [ i (tgaa.util.image/get-image)]\\n  (proc-ant \\n    {\:start [100 111] \:dir [1 0]} i))" "(defn compare-two-points [point-ref point-comp image compare-type]\\r\\n  \\"returns point-comp if point-ref is null; point-compare returned on if true given compare-type \:less \:great\\"\\r\\n  (if (nil? point-ref)\\r\\n    point-comp\\r\\n    (let [ref-val (. image getRGB (first point-ref)(second point-ref))\\r\\n          comp-val (. image getRGB (first point-comp)(second point-comp))] \\r\\n      (if (\:less compare-type)\\r\\n        (if (> ref-val comp-val)\\r\\n          point-ref \\r\\n          point-comp)\\r\\n         (if (< ref-val comp-val)\\r\\n          point-comp\\r\\n          point-ref)))))" "(let [ i (tgaa.util.image/get-image)]\\n  (proc-ant \\n    {\:start [100 111] \:dir [1 0]} i))" "(defn compare-two-points [point-ref point-comp image compare-type]\\r\\n  \\"returns point-comp if point-ref is null; point-compare returned on if true given compare-type \:less \:great\\"\\r\\n  (if (nil? point-ref)\\r\\n    point-comp\\r\\n    (let [ref-val (. image getRGB (first point-ref)(second point-ref))\\r\\n          comp-val (. image getRGB (first point-comp)(second point-comp))\\r\\n          - (print ref-val \\" \\" comp-val)] \\r\\n      (if (\:less compare-type)\\r\\n        (if (> ref-val comp-val)\\r\\n          point-ref \\r\\n          point-comp)\\r\\n         (if (< ref-val comp-val)\\r\\n          point-comp\\r\\n          point-ref)))))" "(let [ i (tgaa.util.image/get-image)]\\n  (proc-ant \\n    {\:start [100 111] \:dir [1 0]} i))" "(let [ i (tgaa.util.image/get-image)]\\n  (proc-all-ants \\n    (get-trail-paths i) i))" "(defn compare-two-points [point-ref point-comp image compare-type]\\r\\n  \\"returns point-comp if point-ref is null; point-compare returned on if true given compare-type \:less \:great\\"\\r\\n  (if (nil? point-ref)\\r\\n    point-comp\\r\\n    (let [ref-val (. image getRGB (first point-ref)(second point-ref))\\r\\n          comp-val (. image getRGB (first point-comp)(second point-comp))\\r\\n          - (print ref-val \\" \\" comp-val)] \\r\\n      (if (\:less compare-type)\\r\\n        (if (> ref-val comp-val)\\r\\n          point-comp\\r\\n          point-ref)\\r\\n         (if (< ref-val comp-val)\\r\\n          point-comp\\r\\n          point-ref)))))" "(let [ i (tgaa.util.image/get-image)]\\n  (proc-all-ants \\n    (get-trail-paths i) i))" "(let [ i (tgaa.util.image/get-image)]\\n  (proc-ant \\n    {\:start [100 111] \:dir [1 0]} i))" "(let [ i (tgaa.util.image/get-image)]\\n  (proc-ant \\n    {\:start [100 111] \:dir [1 1]} i))" "(defn compare-two-points [point-ref point-comp image compare-type]\\r\\n  \\"returns point-comp if point-ref is null; point-compare returned on if true given compare-type \:less \:great\\"\\r\\n  (if (nil? point-ref)\\r\\n    point-comp\\r\\n    (let [ref-val (. image getRGB (first point-ref)(second point-ref))\\r\\n          comp-val (. image getRGB (first point-comp)(second point-comp))\\r\\n          - (println ref-val \\" \\" comp-val)] \\r\\n      (if (\:less compare-type)\\r\\n        (if (> ref-val comp-val)\\r\\n          point-comp\\r\\n          point-ref)\\r\\n         (if (< ref-val comp-val)\\r\\n          point-comp\\r\\n          point-ref)))))" "(let [ i (tgaa.util.image/get-image)]\\n  (proc-ant \\n    {\:start [100 111] \:dir [1 1]} i))" "(defn compare-two-points [point-ref point-comp image compare-type]\\r\\n  \\"returns point-comp if point-ref is null; point-compare returned on if true given compare-type \:less \:great\\"\\r\\n  (if (nil? point-ref)\\r\\n    point-comp\\r\\n    (let [ref-val (. image getRGB (first point-ref)(second point-ref))\\r\\n          comp-val (. image getRGB (first point-comp)(second point-comp))\\r\\n          - (println ref-val \\" \\" comp-val)] \\r\\n      (if (\= \:less compare-type)\\r\\n        (if (> ref-val comp-val)\\r\\n          point-comp\\r\\n          point-ref)\\r\\n         (if (< ref-val comp-val)\\r\\n          point-comp\\r\\n          point-ref))))" "(defn compare-two-points [point-ref point-comp image compare-type]\\r\\n  \\"returns point-comp if point-ref is null; point-compare returned on if true given compare-type \:less \:great\\"\\r\\n  (if (nil? point-ref)\\r\\n    point-comp\\r\\n    (let [ref-val (. image getRGB (first point-ref)(second point-ref))\\r\\n          comp-val (. image getRGB (first point-comp)(second point-comp))\\r\\n          - (println ref-val \\" \\" comp-val)] \\r\\n      (if (\= \:less compare-type)\\r\\n        (if (> ref-val comp-val)\\r\\n          point-comp\\r\\n          point-ref)\\r\\n         (if (< ref-val comp-val)\\r\\n          point-comp\\r\\n          point-ref)))))" "(let [ i (tgaa.util.image/get-image)]\\n  (proc-ant \\n    {\:start [100 111] \:dir [1 1]} i))" "(let [ i (tgaa.util.image/get-image)]\\n  (proc-ant \\n    {\:start [100 111] \:dir [-1 -1]} i))" "(let [ i (tgaa.util.image/get-image)]\\n  (proc-ant \\n    {\:start [130 111] \:dir [-1 -1]} i))" "(let [ i (tgaa.util.image/get-image)]\\n  (proc-ant \\n    {\:start [130 111] \:dir [1 -1]} i))" "(let [ i (tgaa.util.image/get-image)]\\n  (proc-ant \\n    {\:start [130 111] \:dir [-1 -1]} i))" "(let [ i (tgaa.util.image/get-image)]\\n  (proc-ant \\n    {\:start [130 111] \:dir [0 -1]} i))" "(let [ i (tgaa.util.image/get-image)]\\n  (proc-ant \\n    {\:start [136 111] \:dir [0 -1]} i))" "(let [ i (tgaa.util.image/get-image)]\\n  (proc-ant \\n    {\:start [136 111] \:dir [1 -1]} i))" "(defn compare-two-points [point-ref point-comp image compare-type]\\r\\n  \\"returns point-comp if point-ref is null; point-compare returned on if true given compare-type \:less \:great\\"\\r\\n  (if (nil? point-ref)\\r\\n    point-comp\\r\\n    (let [ref-val (. image getRGB (first point-ref)(second point-ref))\\r\\n          comp-val (. image getRGB (first point-comp)(second point-comp))\\r\\n          - (println ref-val \\" \\" comp-val compare-type)] \\r\\n      (if (\= \:less compare-type)\\r\\n        (if (> ref-val comp-val)\\r\\n          point-comp\\r\\n          point-ref)\\r\\n         (if (< ref-val comp-val)\\r\\n          point-comp\\r\\n          point-ref)))))" "(let [ i (tgaa.util.image/get-image)]\\n  (proc-ant \\n    {\:start [136 111] \:dir [1 -1]} i))" "(defn proc-ant [ant-path image]\\r\\n  \\"Takes ants and image and generates logical paths\\"\\r\\n  (loop [i 0 thresh? false end-pont nil local-min nil local-max nil]\\r\\n    (if (or (>\= i (\:max-path-length config)) thresh?)\\r\\n      (assoc ant-path \:thresh thresh? \:end end-pont \:local-min local-min \:local-max local-max)\\r\\n      (let [[x y] (path-loc-at-time ant-path i)]\\r\\n        (recur (inc i) \\r\\n               (if (< (\:thresh @session) (. image getRGB x y))\\r\\n                 true false)\\r\\n               [x y]\\r\\n               (compare-two-points local-min [x y] image \:less)\\r\\n               (compare-two-points local-max [x y] image \:great))))))" "(let [ i (tgaa.util.image/get-image)]\\n  (proc-ant \\n    {\:start [136 111] \:dir [1 -1]} i))" "(defn compare-two-points [point-ref point-comp image compare-type]\\r\\n  \\"returns point-comp if point-ref is null; point-compare returned on if true given compare-type \:less \:great\\"\\r\\n  (if (nil? point-ref)\\r\\n    point-comp\\r\\n    (let [ref-val (. image getRGB (first point-ref)(second point-ref))\\r\\n          comp-val (. image getRGB (first point-comp)(second point-comp))\\r\\n          - (println ref-val \\" \\" comp-val compare-type (> ref-val comp-val) (< ref-val comp-val) )] \\r\\n      (if (\= \:less compare-type)\\r\\n        (if (> ref-val comp-val)\\r\\n          point-comp\\r\\n          point-ref)\\r\\n         (if (< ref-val comp-val)\\r\\n          point-comp\\r\\n          point-ref)))))" "(let [ i (tgaa.util.image/get-image)]\\n  (proc-ant \\n    {\:start [136 111] \:dir [1 -1]} i))" "(let [ i (tgaa.util.image/get-image)]\\n  (proc-ant \\n    {\:start [136 121] \:dir [1 -1]} i))" "(ns tgaa.util.ant-path\\r\\n  (\:require [tgaa.util.shared \:refer \:all])\\r\\n  (\:import [java.awt.image BufferedImage]))\\r\\n\\r\\n(def dir-opt [[0 1][0 -1][1 0][-1 0][1 1][-1 -1][1 -1][-1 1]])\\r\\n\\r\\n(defn path-loc-at-time [ant-path time]\\r\\n  [(+ (first (\:start ant-path)) (* (first (\:dir ant-path)) time))\\r\\n  (+ (second (\:start ant-path)) (* (second (\:dir ant-path)) time))])\\r\\n  \\r\\n(defn full-path-last-point [start dir]\\r\\n  \\"Get last points of gen axis of a path for performance\\"\\r\\n    (cond \\r\\n      (\= 0 dir)\\r\\n      start\\r\\n      (\= 1 dir)\\r\\n      (+ start (- (\:max-path-length config) 1))\\r\\n      \:else\\r\\n      (+ (- start  (\:max-path-length config) ) 1)))\\r\\n  \\r\\n(defn rand-ant-dir \\r\\n  \\"Creates safe random direction at 45 deg increments with starting point x y\\"\\r\\n  [point ^BufferedImage image] \\r\\n   (\:dir-opt (first \\r\\n               (filter \#(let [lx (first (\:last %))\\r\\n                              ly (second (\:last %))]\\r\\n                          (and (> lx 0) (> ly 0)) (< lx (. image getWidth)) (< ly (. image getHeight)))\\r\\n                       (map (fn [d] {\:last [(full-path-last-point (first point)(first d)) \\r\\n                                            (full-path-last-point (second point) (second d))] \\r\\n                                          \:dir-opt d})  (shuffle dir-opt))))))\\r\\n\\r\\n(defn random-point \\r\\n  \\"Get random set of coordinates\\"\\r\\n  [num-loc ^BufferedImage image]\\r\\n  (partition 2\\r\\n             (interleave \\r\\n               (repeatedly \\r\\n                      num-loc\\r\\n                      \#(rand-int \\r\\n                         (. image getWidth)))\\r\\n        (repeatedly \\r\\n               num-loc \\r\\n               \#(rand-int \\r\\n                  (. image getHeight))))))\\r\\n\\r\\n(defn ant-path [start-point ^BufferedImage image]\\r\\n  \\"Creates a logical ant path\\"\\r\\n  (let [dir-opt (rand-ant-dir start-point image)]\\r\\n    {\:start start-point \:end nil \:dir dir-opt \:thresh false}))\\r\\n\\r\\n\\r\\n(defn num-of-phero-starts []\\r\\n  \\"Creates number of pheromone starts based on config and session values\\"\\r\\n  (int \\r\\n    (* \\r\\n      (\:trial-num @session) \\r\\n      (\:plac-heur config) \\r\\n      (\:num-ants config))))\\r\\n \\r\\n(defn num-of-random-starts []\\r\\n  \\"Creates number of random starts based on config and session values\\"\\r\\n     (int\\r\\n       (- (\:num-ants config)\\r\\n       (* \\r\\n         (\:trial-num @session) \\r\\n         (\:plac-heur config)\\r\\n         (\:num-ants config)))))\\r\\n\\r\\n(defn phero-points [num]\\r\\n               (do (print \\"not implemented\\")\\r\\n                 (repeat num [100 100])))\\r\\n\\r\\n(defn get-trail-paths [^BufferedImage image]\\r\\n  \\"Gets ant paths for a trail based on session and config\\"\\r\\n  (map \#(ant-path % image)\\r\\n       (concat \\r\\n         (random-point \\r\\n           (num-of-random-starts) image)\\r\\n         (phero-points \\r\\n           (num-of-phero-starts)))))\\r\\n\\r\\n(defn compare-two-points [point-ref point-comp image compare-type]\\r\\n  \\"returns point-comp if point-ref is null; point-compare returned on if true given compare-type \:less \:great\\"\\r\\n  (if (nil? point-ref)\\r\\n    point-comp\\r\\n    (let [ref-val (. image getRGB (first point-ref)(second point-ref))\\r\\n          comp-val (. image getRGB (first point-comp)(second point-comp))] \\r\\n      (if (\= \:less compare-type)\\r\\n        (if (> ref-val comp-val)\\r\\n          point-comp\\r\\n          point-ref)\\r\\n         (if (< ref-val comp-val)\\r\\n          point-comp\\r\\n          point-ref)))))     \\r\\n     \\r\\n\\r\\n(defn proc-ant [ant-path image]\\r\\n  \\"Takes ants and image and generates logical paths\\"\\r\\n  (loop [i 0 thresh? false end-pont nil local-min nil local-max nil]\\r\\n    (if (or (>\= i (\:max-path-length config)) thresh?)\\r\\n      (assoc ant-path \:thresh thresh? \:end end-pont \:local-min local-min \:local-max local-max)\\r\\n      (let [[x y] (path-loc-at-time ant-path i)]\\r\\n        (recur (inc i) \\r\\n               (if (< (\:thresh @session) (. image getRGB x y))\\r\\n                 true false)\\r\\n               [x y]\\r\\n               (compare-two-points local-min [x y] image \:less)\\r\\n               (compare-two-points local-max [x y] image \:great))))))\\r\\n\\r\\n\\r\\n(defn proc-all-ants [ants image]\\r\\n  (loop [ants-to-proc ants ants-process []]\\r\\n    (if (empty? ants-to-proc)\\r\\n    ants-process\\r\\n    (recur (rest ants-to-proc) \\r\\n           (conj ants-process \\r\\n                 (proc-ant (first ants-to-proc) image))))))" "(let [ i (tgaa.util.image/get-image)]\\n  (proc-ant \\n    {\:start [136 121] \:dir [1 -1]} i))" "(def res-ant (let [ i (tgaa.util.image/get-image)]\\n               (proc-ant \\n                 {\:start [136 121] \:dir [1 -1]} i)))" "res-ant" "(map \#(let [[x y] (\:local-max %)] (. image getRGB x y)) res-ant)" "(map \#(let [[x y] (\:local-max %)] (. (tgaa.util.image/get-image) getRGB x y)) res-ant)" "(map \#(let [[x y] (\:local-max %)] (println x y)) res-ant)" "res-ant" "(map \#(let [[x y] (\:local-max %)] (println x y)) res-ant)" "(map (fn [[x y] (\:local-max %)] (println x y)) res-ant)" "(map \#(let [{\:local-max local-max} %] local-max) res-ant)" "(map \#(let [{ local-max \:local-max } %] local-max) res-ant)" "(map (fn [x] (let [{ local-max \:local-max } x] local-max)) res-ant)" "res-ant" "(def res-ant (let [ i (tgaa.util.image/get-image)]\\n               (proc-all-ants (proc-ant \\n                 {\:start [136 121] \:dir [1 -1]} i))) i)" "(def res-ant (let [ i (tgaa.util.image/get-image)]\\n               (proc-all-ants (proc-ant \\n                 {\:start [136 121] \:dir [1 -1]} i) i)))" "(def res-ant (let [ i (tgaa.util.image/get-image)]\\n                (proc-all-ants (get-trail-paths i) i)))" "(get-trail-paths i)" "(def  i (tgaa.util.image/get-image))" "(get-trail-paths i)" "(proc-all-ants (get-trail-paths i) i)" "(let [ i (tgaa.util.image/get-image)]\\n  (proc-ant \\n    {\:start [136 111] \:dir [1 -1]} i))" "(get-trail-paths i)" "(def ant-init(get-trail-paths i))" "(count ant-init)" "(map \#(proc-ant % i) ant-init)" "(defn proc-all-ants [ant-init image]\\r\\n  (map \#(proc-ant % image) ant-init))" "(map (fn [x] (let [{ local-max \:local-max } x] local-max)) ant-init)" "(map (fn [x] (let [{ local-max \:local-max } x] local-max)) (proc-all-ants ant-init i))" "(map (fn [ant-path] (let [{ local-max \:local-max } ant-path\\n                      [x y] local-max] x y )) (proc-all-ants ant-init i))" "(map (fn [ant-path] (let [{ local-max \:local-max } ant-path\\n                      [x y] local-max] (. i getRGB x y ))) (proc-all-ants ant-init i))" "(defn ant-path-point-val[ant-paths att-key image]\\r\\n  \\"gets attribute values of an image\\"\\r\\n  (map (fn [ant-path] \\r\\n         (let [{ local-max att-key} ant-path\\r\\n               [x y] local-max] (. image getRGB x y ))) ant-paths))" "(defn trial-min-local[ant-paths  image]\\n  (trial-path-point-vals ant-paths \:local-min image))" "(defn trial-path-point-vals[ant-paths att-key image]\\r\\n  \\"gets attribute values of an image\\"\\r\\n  (map (fn [ant-path] \\r\\n         (let [{ local-max att-key} ant-path\\r\\n               [x y] local-max] (. image getRGB x y ))) ant-paths))" "(defn trial-min-local[ant-paths  image]\\n  (trial-path-point-vals ant-paths \:local-min image))" "(defn trial-min-local[ant-paths  image]\\n  (trial-path-point-vals ant-paths \:local-max image))" "(proc-all-ants (get-trail-paths i))" "(proc-all-ants (get-trail-paths i) i)" "(trial-min-local (proc-all-ants (get-trail-paths i) i) i)" "(min (trial-min-local (proc-all-ants (get-trail-paths i) i) i))" "(applly min (trial-min-local (proc-all-ants (get-trail-paths i) i) i))" "(min (trial-min-local (proc-all-ants (get-trail-paths i) i) i))" "(apply min (trial-min-local (proc-all-ants (get-trail-paths i) i) i))" "(trial-min-local (proc-all-ants (get-trail-paths i) i) i)" "(Math/min (trial-min-local (proc-all-ants (get-trail-paths i) i) i)" "(Math/min (trial-min-local (proc-all-ants (get-trail-paths i) i) i))" "(def m (trial-min-local (proc-all-ants (get-trail-paths i) i) i))" "m" "(min m)" "(apply min m)" "(apply min (trial-min-local (proc-all-ants (get-trail-paths i) i) i))" "(comp trial-min-local  proc-all-ants get-trail-paths)" "((comp trial-min-local  proc-all-ants get-trail-paths) i)" "((comp get-trail-paths proc-all-ants trial-min-local   ) i)" "(def m (trial-min-local (proc-all-ants (get-trail-paths i) i) i))" "(apply min (trial-min-local (proc-all-ants (get-trail-paths i) i) i))" "(apply min (trial-min-local (proc-all-ants (init-trail-paths i) i) i))" "(def i (tgaa.util.image/get-image))\\n(apply min (trial-min-local (proc-all-ants (init-trail-paths i) i) i))" "(process-image)" "shared/session" "(ap/proc-all-ants (ap/init-trail-paths image) image)" "(def i image ^BufferedImage (image/image-RGB-gray (image/get-image)))" "(def  image ^BufferedImage (image/image-RGB-gray (image/get-image)))" "(ap/proc-all-ants (ap/init-trail-paths image) image) image)))" "(ap/proc-all-ants (ap/init-trail-paths image) image)" "(def p(ap/proc-all-ants (ap/init-trail-paths image) image))" "(trial-min-local p image)" "(tgaa.util.ant-path/trial-min-local trial-min-local p image)" "(tgaa.util.ant-path/trial-min-local  p image)" "(tgaa.util.ant-path/trial-max-local  p image)" "(tgaa.util.ant-path/trial-min-local  p image)" "(tgaa.util.ant-path/trial-max-local  p image)" "(tgaa.util.ant-path/trail-max-of-min  p image)" "(tgaa.util.ant-path/trail-min-of-max  p image)" "(tgaa.util.ant-path/escaped-ants p)" "(defn trap-ants [ant-paths image]\\n  (trail-max-of-min (escaped-ants ant-paths image)))" "(defn trap-ants [ant-paths image]\\n  (tgaa.util.ant-path/trail-max-of-min (tgaa.util.ant-path/escaped-ants ant-paths image)))" "(trap-ants p image)" "(defn trap-ants [ant-paths image]\\n  (tgaa.util.ant-path/trail-max-of-min (tgaa.util.ant-path/escaped-ants ant-paths) image))" "(trap-ants p image)"]
eclipse.preferences.version=1
