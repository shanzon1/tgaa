cmdhistory=["(+ 1 1)" "(import 'java.io.File)" "(import 'java.io.Filed)" "(defn process-image [^BufferedImage image, configuration] (print \\"not Implemented\\"))" "(defn process-image [^java.awt.image.BufferedImage, configuration] (print \\"not Implemented\\"))" "(slurp \\"tgaaConfig.edn\\")" "(clojure/edn (slurp \\"tgaaConfig.edn\\")" "(read (slurp \\"tgaaConfig.edn\\"))" "(read-string (slurp \\"tgaaConfig.edn\\"))" "(\:numAnts (read-string (slurp \\"tgaaConfig.edn\\")))" "(\:numAnts)" "\\n\\n\:numAnts" "(\:numAnts (read-string (slurp \\"tgaaConfig.edn\\")))" "(def config (read-string (slurp \\"tgaaConfig.edn\\")))" "(\:numAnts confg)" "(\:numAnts config)" "(defn get-config [] (read-string (slurp \\"tgaaConfig.edn\\")))" "(get-config)" "(defn get-config \\"Gets Configuration set in text file\\" [] (read-string (slurp \\"tgaaConfig.edn\\")))" "(defn get-config \\"Gets Configuration set in text file\\" [& qualified-path] \\n  (read-string (slurp \\"tgaaConfig.edn\\")))" "(defn tf [& t] t)" "(tf 1)" "(length (tf 1))" "(seq/ (tf 1))" "(doc seq)" "(defn get-config \\"Gets Configuration set in text file\\" [& qualified-path] \\n  (if (\!\= (first qualified-path) nil) \\n    (read-string (slurp \\"tgaaConfig.edn\\"))\\n    (print \\"not implemented\\")))" "(defn get-config \\"Gets Configuration set in text file\\" [& qualified-path] \\n  (if (not\= (first qualified-path) nil) \\n    (read-string (slurp \\"tgaaConfig.edn\\"))\\n    (print \\"not implemented\\")))" "(get-config \\"test\\")" "(get-config\\n  )" "(defn get-config \\"Gets Configuration set in text file\\" [& qualified-path] \\n  (if (\= (first qualified-path) nil) \\n    (read-string (slurp \\"tgaaConfig.edn\\"))\\n    (print \\"not implemented\\")))" "(get-config \\"test\\")" "(get-config\\n  )" "(process-image nil (get-config))" "(defn process-image [^java.awt.image.BufferedImage image configuration] (print \\"not Implemented\\"))" "(process-image nil (get-config))" "(defn get-config \\"Gets Configuration set in text file\\" [& qualified-path] \\r\\n  (if (\= (first qualified-path) nil) \\r\\n    (read-string (slurp \\"tgaaConfig.edn\\"))\\r\\n    (print \\"not implemented\\")))" "(process-image nil (get-config))" "(require 'java.awt.image.BufferedImage)" "(import 'java.awt.image.BufferedImage)" "(import 'java.io.File)" "(File.  (\:imageLocation (get-config)))" "(BufferedImage (File.  \\n         (\:imageLocation (get-config))))" "(BufferedImage. (File.  \\n         (\:imageLocation (get-config))))" "(import 'java.imageio.ImageIO)" "(import 'javax.imageio.ImageIO)" "(def i (ImageIO. read (BufferedImage. (File.  \\r\\n            (\:imageLocation (get-config))))))" "(def i (BufferedImage. (ImageIO. read (File.  \\r\\n            (\:imageLocation (get-config))))))" "(def i (BufferedImage. (. ImageIO read (File.  \\r\\n            (\:imageLocation (get-config))))))" "\\n(. ImageIO read (File.  \\r\\n            (\:imageLocation (get-config))))" "(BufferedImage.\\n(. ImageIO read (File.  \\r\\n     (\:imageLocation (get-config)))))" "(def i ^BufferedImage (. ImageIO read (File.  \\r\\n     (\:imageLocation (get-config)))))" "i" "(defn get-image [configuration]\\n(. ImageIO read (File.  \\r\\n     (\:imageLocation (nil?)))))" "(defn get-image [configuration]\\n(. ImageIO read (File.  \\r\\n     (\:imageLocation (nil)))))" "(def i ^BufferedImage (. ImageIO read (File.  \\r\\n     (\:imageLocationfail (get-config)))))" "(defn get-image [configuration]\\n  (try\\r\\n  (. ImageIO read (File.  \\r\\n     (\:imageLocation (get-config))))\\n  (catch exception e \\n    (print \\"Image not found\\"))))" "(defn get-image [configuration]\\n  (try\\r\\n  (. ImageIO read (File.  \\r\\n     (\:imageLocation (get-config))))\\n  (catch Exception e \\n    (print \\"Image not found\\"))))" "(get-image {})" "(defn get-image [configuration]\\n  (try\\r\\n  (. ImageIO read (File.  \\r\\n     (\:imageLocation (configuration))))\\n  (catch Exception e \\n    (print \\"Image not found\\"))))" "(get-image {})" "(defn get-image [configuration]\\n  (try\\r\\n  (. ImageIO read (File.  \\r\\n     (\:imageLocation (configuration))))\\n  (catch Exception e \\n    (do (println \\"Image not found\\")\\n      (print e)))))" "(get-image {})" "(get-image {\:test 1\\n            })" "(defn get-image [configuration]\\r\\n  \\"Takes a map with \:imageLocation and returns assocated BufferedImage\\"\\r\\n  (try\\r\\n  (. ImageIO read (File.  \\r\\n     (\:imageLocation (configuration))))\\r\\n  (catch Exception e \\r\\n    (do (println \\"Image not found. Check location is correct\\")\\r\\n      (print e)))))" "(defn get-image [configuration]\\r\\n  \\"Takes a map with \:imageLocation and returns assocated BufferedImage\\"\\r\\n  (try\\r\\n  (. ImageIO read (File.  \\r\\n     (\:imageLocation (configuration))))\\r\\n  (catch Exception e \\r\\n    (do (println \\"Image not found. Check location is correct\\")\\r\\n      (Throw e))))" "(defn get-image [configuration]\\r\\n  \\"Takes a map with \:imageLocation and returns assocated BufferedImage\\"\\r\\n  (try\\r\\n  (. ImageIO read (File.  \\r\\n     (\:imageLocation (configuration))))\\r\\n  (catch Exception e \\r\\n    (do (println \\"Image not found. Check location is correct\\")\\r\\n      (Throw e)))))" "(defn get-image [configuration]\\r\\n  \\"Takes a map with \:imageLocation and returns assocated BufferedImage\\"\\r\\n  (try\\r\\n  (. ImageIO read (File.  \\r\\n     (\:imageLocation (configuration))))\\r\\n  (catch Exception e \\r\\n    (do (println \\"Image not found. Check location is correct\\")\\r\\n      (Throws e)))))" "(defn get-image [configuration]\\r\\n  \\"Takes a map with \:imageLocation and returns assocated BufferedImage\\"\\r\\n  (try\\r\\n  (. ImageIO read (File.  \\r\\n     (\:imageLocation (configuration))))\\r\\n  (catch Exception e \\r\\n    (do (println \\"Image not found. Check location is correct\\")\\r\\n      (Throw Exception e)))))" "(defn get-image [configuration]\\r\\n  \\"Takes a map with \:imageLocation and returns assocated BufferedImage\\"\\r\\n  (try\\r\\n  (. ImageIO read (File.  \\r\\n     (\:imageLocation (configuration))))\\r\\n  (catch Exception e \\r\\n    (do (println \\"Image not found. Check location is correct\\")\\r\\n      (Throw.  e)))))" "(defn get-image [configuration]\\r\\n  \\"Takes a map with \:imageLocation and returns assocated BufferedImage\\"\\r\\n  (try\\r\\n  (. ImageIO read (File.  \\r\\n     (\:imageLocation (configuration))))\\r\\n  (catch Exception e \\r\\n    (do (println \\"Image not found. Check location is correct\\")\\r\\n      (Throw (Exception  e))))))" "(defn get-image [configuration]\\r\\n  \\"Takes a map with \:imageLocation and returns assocated BufferedImage\\"\\r\\n  (try\\r\\n  (. ImageIO read (File.  \\r\\n     (\:imageLocation (configuration))))\\r\\n  (catch Exception e \\r\\n    (do (println \\"Image not found. Check location is correct\\")\\r\\n      (throw (Exception  e))))))" "(defn get-image [configuration]\\r\\n  \\"Takes a map with \:imageLocation and returns assocated BufferedImage\\"\\r\\n  (try\\r\\n  (. ImageIO read (File.  \\r\\n     (\:imageLocation (configuration))))\\r\\n  (catch Exception e \\r\\n    (do (println \\"Image not found. Check location is correct\\")\\r\\n      (throw (Exception.  e))))))" "(get-image {})" "(defn process-image [configuration] \\r\\n  (let [image ^BufferedImage (get-image) configuration]))" "(defn process-image [configuration] \\r\\n  (let [image  (get-image) configuration]))" "(defn process-image [configuration] \\r\\n  (let [image ^BufferedImage (get-image configuration)]))" "(get-image (get-config))" "(defn get-image [configuration]\\r\\n  \\"Takes a map with \:imageLocation and returns assocated BufferedImage\\"\\r\\n  (try\\r\\n  (. ImageIO read (File.  \\r\\n     (\:imageLocation (configuration))))\\r\\n  (catch Exception e \\r\\n    (do (println \\"Image not found. Check location is correct\\")\\r\\n      (throw (Exception.  e))))))" "(get-image (get-config))" "(get-config)" "(defn get-image [configuration]\\r\\n  \\"Takes a map with \:imageLocation and returns assocated BufferedImage\\"\\r\\n  (try\\r\\n  (. ImageIO read (File.  \\r\\n     (\:imageLocation (configuration))))\\r\\n  (catch Exception e \\r\\n    (do (println \\"Image not found. Check location is correct\\")\\r\\n      (throw (Exception.  e))))))" "(get-config)" "(get-image (get-config))" "(\:imageLocation (get-config))" "(defn get-image [configuration]\\r\\n  \\"Takes a map with \:imageLocation and returns assocated BufferedImage\\"\\r\\n  (try\\r\\n  (. ImageIO read (File.  \\r\\n     (\:imageLocation (configuration))))\\r\\n  (catch Exception e \\r\\n    (do (println \\"Image not found. Check location is correct\\")\\r\\n      (throw (Exception.  e))))))" "(get-image (get-config))" "(get-config)" "  (. ImageIO read (File.  \\r\\n     \\"C\:\\\\\\\\Users\\\\\\\\erudi\\\\\\\\OneDrive\\\\\\\\Activity Organizer\\\\\\\\Projects\\\\\\\\Active\\\\\\\\TAA Research\\\\\\\\Project Resources\\\\\\\\images\\\\\\\\unprocessed\\\\\\\\3\\\\\\\\1\\\\\\\\3_1_1.jpg\\"))" "(defn get-image [configuration]\\r\\n  \\"Takes a map with \:imageLocation and returns assocated BufferedImage\\"\\r\\n  (try\\r\\n  (. ImageIO read (File.  \\r\\n     (\:imageLocation (configuration))))\\r\\n  (catch Exception e \\r\\n    (do (println \\"Image not found. Check location is correct\\")\\r\\n      (throw (Exception.  e))))))" "(get-image (get-config))" "(defn get-image [configuration]\\r\\n  \\"Takes a map with \:imageLocation and returns assocated BufferedImage\\"\\r\\n  (try\\r\\n  (. ImageIO read (File.  \\r\\n     (\:imageLocation (configuration))))\\r\\n  (catch Exception e \\r\\n    (do (println \\"Image not found. Check location is correct\\")\\r\\n      (throw (Exception.  e))))))" "(get-image (get-config))" "(defn get-image [configuration]\\r\\n  \\"Takes a map with \:imageLocation and returns assocated BufferedImage\\"\\r\\n  (. ImageIO read (File.  \\r\\n     (\:imageLocation (configuration)))))" "(get-image (get-config))" "(defn get-image [configuration]\\r\\n  \\"Takes a map with \:imageLocation and returns assocated BufferedImage\\"\\r\\n  (. ImageIO read (File.  \\r\\n     (\:imageLocation (get-config)))))" "(get-image (get-config))" "(defn get-image [configuration]\\r\\n  \\"Takes a map with \:imageLocation and returns assocated BufferedImage\\"\\r\\n  (. ImageIO read (File.  \\r\\n     (get \:imageLocation (get-config)))))" "(get-image (get-config))" "(defn get-image [configuration]\\r\\n  \\"Takes a map with \:imageLocation and returns assocated BufferedImage\\"\\r\\n  (. ImageIO read (File.  \\r\\n     ((get-config) \:imageLocation ))))" "(get-image (get-config))" "(defn get-image [configuration]\\r\\n  \\"Takes a map with \:imageLocation and returns assocated BufferedImage\\"\\r\\n  (. ImageIO read (File.  \\r\\n     (configuration \:imageLocation ))))" "(get-image (get-config))" "(defn get-image [configuration]\\r\\n  \\"Takes a map with \:imageLocation and returns assocated BufferedImage\\"\\r\\n  (try\\r\\n  (. ImageIO read (File.  \\r\\n     ((configuration) \:imageLocation)))\\r\\n  (catch Exception e \\r\\n    (do (println \\"Image not found. Check location is correct\\")\\r\\n      (throw (Exception.  e))))))" "(get-image (get-config))" "(defn get-image [configuration]\\r\\n  \\"Takes a map with \:imageLocation and returns assocated BufferedImage\\"\\r\\n  (. ImageIO read (File.  \\r\\n     (configuration \:imageLocation ))))" "(get-image (get-config))" "(defn get-image [configuration]\\r\\n  \\"Takes a map with \:imageLocation and returns assocated BufferedImage\\"\\r\\n  (try\\r\\n  (. ImageIO read (File.  \\r\\n     (\:imageLocation configuration)))\\r\\n  (catch Exception e \\r\\n    (do (println \\"Image not found. Check location is correct\\")\\r\\n      (throw (Exception.  e))))))" "(get-image (get-config))" "(defn get-image [configuration]\\r\\n  \\"Takes a map with \:imageLocation and returns assocated BufferedImage\\"\\r\\n  (try\\r\\n  (. ImageIO read (File.  \\r\\n     (\:imageLocation configuration)))\\r\\n  (catch Exception e \\r\\n    (do (println \\"Image not found. Check location is correct\\")\\r\\n      (throw (Exception.  e))))))" "(get-image (get-config))" "(defn process-image [configuration] \\r\\n  (let [image ^BufferedImage (get-image configuration)\\r\\n        workingImage (BufferedImage. image.getWidth image.getHeight image.getType )]))" "(defn process-image [configuration] \\r\\n  (let [image ^BufferedImage (get-image configuration)\\r\\n        workingImage (BufferedImage. (. image getWidth) (. image getHeight) (. image getType) )]))" "(process-image (get-config))" "(defn process-image [configuration] \\r\\n  (let [image ^BufferedImage (get-image configuration)\\r\\n        workingImage ^BufferedImage (BufferedImage. (. image getWidth) (. image getHeight) (. image getType) )\\n       ; bootStrapThresh (bootStrap image configuration)\\n        ]\\n    ))" "(defn bootstrap-value [image configuration]\\n  (let [x-cords (rand-int (. image getWidth))]))" "(def i (process-image (get-config)))" "(getWidth. i)" "(. i getWidth)" "(class i)" "(def i ((get-image(get-config))))" "(def i (get-image(get-config)))" "(. i getWidth)" "(repeat 4 (. i getWidth))" "(repeatedly 4 (. i getWidth))" "(repeat 4 \#(. i getWidth))" "(do (repeat 4 \#(. i getWidth)))" "(repeatedly 4 \#(. i getWidth))" "(repeatedly 4 (fn (. i getWidth)))" "(repeatedly 4 (fn [](. i getWidth)))" "(take\\n  (repeatedly 4 \#(rand-n (. i getWidth))))" "(take\\n  (repeatedly 4 \#(rand(. i getWidth))))" "(take\\n  (repeatedly 4 \#(rand-int 0\\n                           (. i getWidth))))" "(take 4\\n  (repeatedly \#(rand-int 0\\n                         (. i getWidth))))" "(take 4\\n  (repeatedly \#(rand-int \\n                         (. i getWidth))))" "(repeatedly 3 \#(rand-int \\r\\n                         (. i getWidth)))" "(repeatedly 10 \#(rand-int \\r\\n                         (. i getWidth)))" "(defn bootstrap-value [image configuration]\\n  (let [x-coords (repeatedly (\:numAnts configuration) \#(rand-int (. i getWidth)))\\n        y-coords (repeatedly (\:numAnts configuration) \#(rand-int (. i getHeight)))]))" "(interleave [1 2 3] [4 5 6])" "(defn bootstrap-value [image configuration]\\n  (let [x-coords (repeatedly (\:numAnts configuration) \#(rand-int (. i getWidth)))\\n        y-coords (repeatedly (\:numAnts configuration) \#(rand-int (. i getHeight)))]))" "(defn random-staring-coords [image configuration]\\n  (partition 2\\n    (interleave ((repeatedly (\:numAnts configuration) \#(rand-int (. image getWidth)))\\n            (repeatedly (\:numAnts configuration) \#(rand-int (. image getHeight)))))))" "(random-staring-coords  (process-image (get-config)) (get-config))" "(process-image (get-config))" "(random-staring-coords  (get-image\\n                          (get-config)) (get-config))" "(get-image (get-config))" "(random-staring-coords  (get-image\\n                          (get-config)) (get-config))" "(defn random-staring-coords [image configuration]\\n  \\n    (interleave ((repeatedly (\:numAnts configuration) \#(rand-int (. image getWidth)))\\n            (repeatedly (\:numAnts configuration) \#(rand-int (. image getHeight))))))" "(random-staring-coords  (get-image\\n                          (get-config)) (get-config))" "(defn random-staring-coords [image configuration]\\n  (partition 2\\n    (interleave \\n      (repeatedly (\:numAnts configuration) \#(rand-int (. image getWidth)))\\n            (repeatedly (\:numAnts configuration) \#(rand-int (. image getHeight))))))" "(random-staring-coords  (get-image\\n                          (get-config)) (get-config))" "i" "(. i getRGB 10 10)" "(. i getType)" "(defn image-RGB-gray [^BufferedImage image]\\n   (let [ out-image (BufferedImage. (. image getWidth) (. image getHeight) (. image setType (. BufferedImage TYPE_BYTE_GRAY)))\\n          _ (. (. (. out-image getGraphics) drawImage image 0 0 nil) dispose)]\\n     out-image))" "(image-RGB-gray i)" "(defn image-RGB-gray [^BufferedImage image]\\n   (let [ out-image (BufferedImage. (. image getWidth) (. image getHeight) (. BufferedImage TYPE_BYTE_GRAY))\\n          _ (. (. (. out-image getGraphics) drawImage image 0 0 nil) dispose)]\\n     out-image))" "(image-RGB-gray i)" "(defn image-RGB-gray [^BufferedImage image]\\n   (let [ out-image (BufferedImage. (. image getWidth) (. image getHeight) (. BufferedImage TYPE_BYTE_GRAY))\\n          _ (. (. out-image getGraphics) drawImage image 0 0 nil)]\\n     out-image))" "(image-RGB-gray i)" "(. i getRGB 10 10)" "(def o (image-RGB-gray i))" "(. o getRGB 10 10)" "(defn get-image-values [image coords]\\r\\n  (map \#(. image getRGB %1 %2) coords))" "(get-image-values i (random-staring-coords i (get-config)))" "(random-staring-coords i (get-config))" "(get-image-values i (random-staring-coords i (get-config)))" "(defn get-image-values [image coords]\\r\\n  (map \#(. image getRGB (nth % 1) (nth 2 %)) coords))" "(get-image-values i (random-staring-coords i (get-config)))" "(defn get-image-values [image coords]\\r\\n  (map (fn [coord] (. image getRGB (nth coord 1) (nth coord 2))) coords))" "(get-image-values i (random-staring-coords i (get-config)))" "(defn get-image-values [image coords]\\r\\n  (map (fn [coord] (. image getRGB (nth coord 0) (nth coord 1))) coords))" "(get-image-values i (random-staring-coords i (get-config)))" "(defn process-image [configuration] \\r\\n  (let [image ^BufferedImage (image-RGB-gray (get-image configuration))\\r\\n        workingImage ^BufferedImage (BufferedImage. (. image getWidth) (. image getHeight) (. image getType) )\\r\\n       ; bootStrapThresh (bootStrap image configuration)\\r\\n        ]\\r\\n    ))" "(defn bootstrap-value [image coords]\\n  (" "(get-image-values i (random-staring-coords i (get-config)))" "(defn bootstrap-value [image coords] \\n  (Math/max(get-image-values image coords)))" "(defn bootstrap-value [image configuration] \\n  (Math/max(get-image-values image configuration)))" "(defn bootstrap-value [image configuration] \\n  (get-image-values image  (random-staring-coords image configuration)))" "(defn bootstrap-value [image configuration] \\n  (max\\n  (get-image-values image  (random-staring-coords image configuration))))" "(bootstrap-value i (get-config))" "(defn bootstrap-value [image configuration] \\n  (max\\n  (get-image-values image  (random-staring-coords image configuration))))" "(bootstrap-value i (get-config))" "(defn bootstrap-value [image configuration] \\n  (apply max\\n  (get-image-values image  (random-staring-coords image configuration))))" "(bootstrap-value i (get-config))" "(defn bootstrap-value [image configuration] \\n  (if \\n  (apply max\\n  (get-image-values image  (random-staring-coords image configuration))))" "(map-indexed inc [1 2 3])" "(map-indexed 'inc [1 2 3])" "(map-indexed 'inc [1 2 3 5])" "(def v (map-indexed 'inc [1 2 3 5]))" "v" "(class v)" "(doseq [[i animal] (map-indexed vector [\\"dog\\" \\"cat\\" \\"bird\\"])]\\r\\n  (println i animal))" "(ns tgaa.algo.core\\r\\n  \:require [tgaa.util.image\\r\\n            tgaa.algo.bootstrap])" "(import 'javax.imageio.ImageIO)" "ImageIO" "\\r\\n(defn get-image [configuration]\\r\\n  \\"Takes a map with \:imageLocation and returns assocated BufferedImage\\"\\r\\n  (try\\r\\n    (ImageIO. read (File.  \\r\\n       (\:imageLocation configuration)))\\r\\n    (catch Exception e \\r\\n      (do (println \\"Image not found. Check location is correct\\")\\r\\n        (throw (Exception.  e))))))" " (\\n   import [javax.imageio.ImageIO]\\r\\n           [java.io.File]\\r\\n           [java.awt.image.BufferedImage])" "\\r\\n(defn get-image [configuration]\\r\\n  \\"Takes a map with \:imageLocation and returns assocated BufferedImage\\"\\r\\n  (try\\r\\n    (ImageIO. read (File.  \\r\\n       (\:imageLocation configuration)))\\r\\n    (catch Exception e \\r\\n      (do (println \\"Image not found. Check location is correct\\")\\r\\n        (throw (Exception.  e))))))" " (\\n   import [javax.imageio.ImageIO]\\r\\n           [java.io.File]\\r\\n           [java.awt.image.BufferedImage])" "\\r\\n(defn get-image [configuration]\\r\\n  \\"Takes a map with \:imageLocation and returns assocated BufferedImage\\"\\r\\n  (try\\r\\n    (ImageIO. read (File.  \\r\\n       (\:imageLocation configuration)))\\r\\n    (catch Exception e \\r\\n      (do (println \\"Image not found. Check location is correct\\")\\r\\n        (throw (Exception.  e))))))" " (\\n   import '([javax.imageio.ImageIO]\\r\\n           [java.io.File]\\r\\n           [java.awt.image.BufferedImage]))" " (\\n   import [javax.imageio.ImageIO]\\r\\n           [java.io.File]\\r\\n           [java.awt.image.BufferedImage])" "\\r\\n(defn get-image [configuration]\\r\\n  \\"Takes a map with \:imageLocation and returns assocated BufferedImage\\"\\r\\n  (try\\r\\n    (ImageIO. read (File.  \\r\\n       (\:imageLocation configuration)))\\r\\n    (catch Exception e \\r\\n      (do (println \\"Image not found. Check location is correct\\")\\r\\n        (throw (Exception.  e))))))" " (\\n import \\r\\n           [java.io.File])" "\\r\\n(defn get-image [configuration]\\r\\n  \\"Takes a map with \:imageLocation and returns assocated BufferedImage\\"\\r\\n  (try\\r\\n    (ImageIO. read (File.  \\r\\n       (\:imageLocation configuration)))\\r\\n    (catch Exception e \\r\\n      (do (println \\"Image not found. Check location is correct\\")\\r\\n        (throw (Exception.  e))))))" " (\\n import \\r\\n           [java.io.File \:all])" " (\\n import \\r\\n           [java.io File ])" "(require 'tgaa.util.image)" "(defn bootstrap-value [image configuration] \\r\\n  (apply max\\r\\n         (image-values image  \\r\\n                       (random-staring-coords image configuration))))" "(process-image (get-config))" "(defn process-image [configuration] \\r\\n  (let [image ^BufferedImage (image-RGB-gray (get-image configuration))\\r\\n        workingImage ^BufferedImage (BufferedImage. (. image getWidth) (. image getHeight) (. image getType) )\\r\\n        bootstrapThresh (bootstrap-value image configuration)\\r\\n        \\r\\n        ]\\r\\n    bootstrapThresh))" "(process-image (get-config))" "(range 1 10)" "(+ 3 (range 1 10))" "(apply + 3 (range 1 10))" "(+ (repeat 10 3)\\n   (range 1 10))" "(repeat 10 3)" "(+ (repeat 10 3)\\n   (range 0 10))" "(apply + (repeat 10 3)\\n   (range 0 10))" "(map  \#(+ %1 %2) (repeat 10 3)\\n   (range 0 10))" "(map  \#(+ %1 %2) \\n      (repeat 10 3)\\n      (range 0 10))" "(map \#(%1 %2)\\n  (map  \#(+ %1 %2) \\n        (repeat 10 3)\\n        (range 0 10))\\n(map  \#(+ %1 %2) \\r\\n      (repeat 10 3)\\r\\n      (range 0 10)))" "(apply map \#(%1 %2)\\n  (map  \#(+ %1 %2) \\n        (repeat 10 3)\\n        (range 0 10))\\n  (map  \#(+ %1 %2) \\r\\n      (repeat 10 3)\\r\\n      (range 0 10)))" "  (map  \#(+ %1 %2) \\r\\n      (repeat 10 3)\\r\\n      (range 0 10))" "(apply map \#(%1 %2)\\n  (map  \#({ %1 %2}) \\n        (repeat 10 3)\\n        (range 0 10))\\n  (map  \#(+ %1 %2) \\r\\n      (repeat 10 3)\\r\\n      (range 0 10)))" "(apply map \#(%1 %2)\\n  (map  \#([ %1 %2]) \\n        (repeat 10 3)\\n        (range 0 10))\\n  (map  \#(+ %1 %2) \\r\\n      (repeat 10 3)\\r\\n      (range 0 10)))" "(apply map \#(%1 %2)\\n  (map  (fn [x y] (vector %1 %2)) \\n        (repeat 10 3)\\n        (range 0 10))\\n  (map  \#(+ %1 %2) \\r\\n      (repeat 10 3)\\r\\n      (range 0 10)))" "(apply map \#(%1 %2)\\n  (map  (fn [x y] (vector x y)) \\n        (repeat 10 3)\\n        (range 0 10))\\n  (map  \#(+ %1 %2) \\r\\n      (repeat 10 3)\\r\\n      (range 0 10)))" "(map \#(%1 %2)\\n  (map  (fn [x y] (vector x y)) \\n        (repeat 10 3)\\n        (range 0 10))\\n  (map  \#(+ %1 %2) \\r\\n      (repeat 10 3)\\r\\n      (range 0 10)))" "(map \#(%1 %2)\\n  (map  (fn [x y] (vector x y)) \\n        (repeat 10 3)\\n        (range 0 10))\\n  (map  \#(+ %1 %2) \\r\\n      (repeat 10 3)\\r\\n      (range 0 9)))" "(map \#(%1 %2)\\n  (map  (fn [x y] (vector x y)) \\n        (repeat 10 3)\\n        (range 0 9))\\n  (map  \#(+ %1 %2) \\r\\n      (repeat 10 3)\\r\\n      (range 0 9)))" "(map (fn [x y] (vector x y)) \\n  (map  \#(+ %1 %2) \\n        (repeat 10 3)\\n        (range 0 9))\\n  (map  \#(+ %1 %2) \\r\\n      (repeat 10 3)\\r\\n      (range 0 9)))" "(map \#(vector %1 %2) \\n  (map  \#(+ %1 %2) \\n        (repeat 10 3)\\n        (range 0 9))\\n  (map  \#(+ %1 %2) \\r\\n      (repeat 10 3)\\r\\n      (range 0 9)))" "(rand-int -1 1)" "(rand-2)" "(rand-int 2)" "(- 1 (rand-int 3))" "(map \#(vector %1 %2) \\n  (map  \#(+ %1 %2) \\n        (repeat 10 3)\\n        (range 0 9))\\n  (map  \#(+ %1 %2) \\r\\n      (repeat 10 3)\\r\\n      (range 0 9)))" "(map \#(vector %1 %2) \\n  (map  \#(+ %1 %2) \\n        (repeat 10 3)\\n        (rand-int (range 0 9) )\\n  (map  \#(+ %1 %2) \\r\\n      (repeat 10 3)\\r\\n      (range 0 9)))" "(rand-nth (range 0 9) (repeat 10 0) (range 0 -1))" "(rand-nth (range 0 9) (repeat 10 0))" "(rand-nth [(range 0 9) (repeat 10 0)])" "(map \#(vector %1 %2) \\n  (map  \#(+ %1 %2) \\n        (repeat 10 3)\\n        (rand-int (range 0 9))\\n  (map  \#(+ %1 %2) \\r\\n      (repeat 10 3)\\r\\n      (range 0 9))))" "(let [map-proc (rand-nth (fn [] (repeat 10 3)) \\n                         (fn [] (map \#(+ %1 %2) \\n                                     (range 0 9)\\n                                     (repeat 10 3)))\\n                         (fn [] (map \#(+ %1 %2) \\r\\n                                     (apply * -1  (range 0 9))\\r\\n                                     (repeat 10 3))))]\\n  map-proc)" "(let [map-proc (rand-nth [(fn [] (repeat 10 3)) \\n                         (fn [] (map \#(+ %1 %2) \\n                                     (range 0 9)\\n                                     (repeat 10 3)))\\n                         (fn [] (map \#(+ %1 %2) \\r\\n                                     (apply * -1  (range 0 9))\\r\\n                                     (repeat 10 3)))])]\\n  map-proc)" "(let [map-proc (take 2\\n                 (rand-nth [(fn [] (repeat 10 3)) \\n                           (fn [] (map \#(+ %1 %2) \\n                                       (range 0 9)\\n                                       (repeat 10 3)))\\n                           (fn [] (map \#(+ %1 %2) \\r\\n                                     (apply * -1  (range 0 9))\\r\\n                                     (repeat 10 3)))]))]\\n  map-proc)" "(let [map-proc (repeat 2\\n                 (rand-nth [(fn [] (repeat 10 3)) \\n                           (fn [] (map \#(+ %1 %2) \\n                                       (range 0 9)\\n                                       (repeat 10 3)))\\n                           (fn [] (map \#(+ %1 %2) \\r\\n                                     (apply * -1  (range 0 9))\\r\\n                                     (repeat 10 3)))]))]\\n  map-proc)" "(let [map-proc (repeat 2\\n                 (rand-nth [(fn [] (repeat 10 3)) \\n                           (fn [] (map \#(+ %1 %2) \\n                                       (range 0 9)\\n                                       (repeat 10 3)))\\n                           (fn [] (map \#(+ %1 %2) \\r\\n                                     (apply * -1  (range 0 9))\\r\\n                                     (repeat 10 3)))]))]\\n  (map \#(vector %1 %2) (nth map-proc 0) (nth map-proc 1)))" "(let [map-proc (repeat 2\\n                 (rand-nth [(fn [] (repeat 10 3)) \\n                           (fn [] (map \#(+ %1 %2) \\n                                       (range 0 9)\\n                                       (repeat 10 3)))\\n                           (fn [] (map \#(+ %1 %2) \\r\\n                                     (apply * -1  (range 0 9))\\r\\n                                     (repeat 10 3)))]))]\\n   (nth map-proc 0) )" "(let [map-proc (repeat 2\\n                 (rand-nth [(fn [] (repeat 10 3)) \\n                           (fn [] (map \#(+ %1 %2) \\n                                       (range 0 9)\\n                                       (repeat 10 3)))\\n                           (fn [] (map \#(+ %1 %2) \\r\\n                                     (apply * -1  (range 0 9))\\r\\n                                     (repeat 10 3)))]))]\\n  (map \#(vector %1 %2) (nth map-proc 0) (nth map-proc 1)))" "(let [map-proc (repeat 2\\n                 (rand-nth [(fn [] (repeat 10 3)) \\n                           (fn [] (map \#(+ %1 %2) \\n                                       (range 0 9)\\n                                       (repeat 10 3)))\\n                           (fn [] (map \#(+ %1 %2) \\r\\n                                     (apply * -1  (range 0 9))\\r\\n                                     (repeat 10 3)))]))]\\n  (apply map \#(vector %1 %2) (nth map-proc 0) (nth map-proc 1)))" "(def tt(let [map-proc (rand-nth [(fn [] (repeat 10 3)) \\n                                (fn [] (map \#(+ %1 %2) \\n                                            (range 0 9)\\n                                            (repeat 10 3)))\\n                                (fn [] (map \#(+ %1 %2) \\r\\n                                     (apply * -1  (range 0 9))\\r\\n                                     (repeat 10 3)))])]\\n         map-proc))" "(tt)" "tt" "(tt)" "(repeat 10 3)" "(map \#(+ %1 %2) \\r\\n                                            (range 0 9)\\r\\n                                            (repeat 10 3))" "(map \#(+ %1 %2) \\r\\n                                     (apply * -1  (range 0 9))\\r\\n                                     (repeat 10 3))" "(map \#(+ %1 %2) \\r\\n                                     ( * -1  (range 0 9))\\r\\n                                     (repeat 10 3))" "(apply * -1  (range 0 9))" "(\\n  * -1  (range 0 9))" "(* -1  (range 0 9))" "(* (range 0 9) -1)" "(def tt(let [map-proc (rand-nth [(fn [] (repeat 10 3)) \\n                                (fn [] (map \#(+ %1 %2) \\n                                            (range 0 9)\\n                                            (repeat 10 3)))\\n                                (fn [] (map \#(+ %1 %2) \\r\\n                                     (map \#(* -1 %1)  (range 0 9))\\r\\n                                     (repeat 10 3)))])]\\n         map-proc))" "(tt)" "(def tt(let [map-proc (rand-nth [(fn [] (repeat 10 3)) \\n                                (fn [] (map \#(+ %1 %2) \\n                                            (range 0 9)\\n                                            (repeat 10 3)))\\n                                (fn [] (map \#(+ %1 %2) \\r\\n                                     (map \#(* -1 %1)  (range 0 9))\\r\\n                                     (repeat 10 3)))])]\\n         map-proc))" "(tt)" "(def tt(let [map-proc (rand-nth [(fn [] (repeat 10 3)) \\n                                (fn [] (map \#(+ %1 %2) \\n                                            (range 0 9)\\n                                            (repeat 10 3)))\\n                                (fn [] (map \#(+ %1 %2) \\r\\n                                     (map \#(* -1 %1)  (range 0 9))\\r\\n                                     (repeat 10 3)))])]\\n         (interleave (nth map-proc 0) (nth map-proc 1) )))" "(def tt(let [map-proc (repeat 2 (rand-nth [(fn [] (repeat 10 3)) \\n                                       (fn [] (map \#(+ %1 %2) \\n                                                   (range 0 9)\\n                                                   (repeat 10 3)))\\n                                       (fn [] (map \#(+ %1 %2) \\r\\n                                     (map \#(* -1 %1)  (range 0 9))\\r\\n                                     (repeat 10 3)))]))]\\n         (interleave (nth map-proc 0) (nth map-proc 1) )))" "tt" "(tt)" "(def tt (let [map-proc (repeat 2 (rand-nth [(fn [] (repeat 10 3)) \\n                                        (fn [] (map \#(+ %1 %2) \\n                                                    (range 0 9)\\n                                                    (repeat 10 3)))\\n                                        (fn [] (map \#(+ %1 %2) \\r\\n                                     (map \#(* -1 %1)  (range 0 9))\\r\\n                                     (repeat 10 3)))]))]\\n          [(nth map-proc 0) (nth map-proc 1) ]))" "(tt)" "tt" "(nth tt 1)" "\#\\n (nth tt 1)" "\#(nth tt 1)" "(apply (nth tt 1))" "(apply (nth tt 0))" "(apply (nth tt 2\\n            ))" "(apply (nth tt 1))" "(nth tt 1)" "(nth tt 0)" "(def tt (let [map-proc (repeatedly 2 (rand-nth [(fn [] (repeat 10 3)) \\n                                        (fn [] (map \#(+ %1 %2) \\n                                                    (range 0 9)\\n                                                    (repeat 10 3)))\\n                                        (fn [] (map \#(+ %1 %2) \\r\\n                                     (map \#(* -1 %1)  (range 0 9))\\r\\n                                     (repeat 10 3)))]))]\\n          [(nth map-proc 0) (nth map-proc 1) ]))" "(nth tt 1)" "(nth tt 0)" "(def tt (let [map-proc (repeatedly 2 (rand-nth [(fn [] (repeat 10 3)) \\n                                        (fn [] (map \#(+ %1 %2) \\n                                                    (range 0 9)\\n                                                    (repeat 10 3)))\\n                                        (fn [] (map \#(+ %1 %2) \\r\\n                                     (map \#(* -1 %1)  (range 0 9))\\r\\n                                     (repeat 10 3)))]))]\\n          [(nth map-proc 0) (nth map-proc 1) ]))" "(nth tt 0)" "(nth tt 1)" "(def tt (let [map-proc (repeatedly 2 \#(rand-nth [(fn [] (repeat 10 3)) \\n                                        (fn [] (map \#(+ %1 %2) \\n                                                    (range 0 9)\\n                                                    (repeat 10 3)))\\n                                        (fn [] (map \#(+ %1 %2) \\r\\n                                     (map \#(* -1 %1)  (range 0 9))\\r\\n                                     (repeat 10 3)))]))]\\n          [(nth map-proc 0) (nth map-proc 1) ]))" "(def tt \\n  (let [map-proc (repeatedly 2 (fn [] (rand-nth [(fn [] (repeat 10 3)) \\n                                 (fn [] (map \#(+ %1 %2) \\n                                             (range 0 9)\\n                                             (repeat 10 3)))\\n                                 (fn [] (map \#(+ %1 %2) \\r\\n                                     (map \#(* -1 %1)  (range 0 9))\\r\\n                                     (repeat 10 3)))])))]\\n    [(nth map-proc 0) (nth map-proc 1) ]))" "(nth tt 1)" "(nth tt 0)" "(def tt \\n  (let [map-proc (repeatedly 2 (fn [] (rand-nth [(repeat 10 3) \\n                                 (map \#(+ %1 %2) \\n                                      (range 0 9)\\n                                      (repeat 10 3))\\n                                 (map \#(+ %1 %2) \\r\\n                                     (map \#(* -1 %1)  (range 0 9))\\r\\n                                     (repeat 10 3))])))]\\n    [(nth map-proc 0) (nth map-proc 1) ]))" "(nth tt 0)" "(nth tt 1)" "\\n  (let [map-proc (repeatedly 2 (fn [] (rand-nth [(repeat 10 3) \\n                                 (map \#(+ %1 %2) \\n                                      (range 0 9)\\n                                      (repeat 10 3))\\n                                 (map \#(+ %1 %2) \\r\\n                                     (map \#(* -1 %1)  (range 0 9))\\r\\n                                     (repeat 10 3))])))]\\n    (partition 2 (interleave (nth map-proc 0) (nth map-proc 1))))" "\\n(let [map-proc (repeatedly 2 (fn [] (rand-nth [(repeat 10 3) \\n                                               (map \#(+ %1 %2) \\n                                                    (range 0 9)\\n                                                    (repeat 10 3))\\n                                               (map \#(+ %1 %2) \\r\\n                                                    (map \#(* -1 %1)  (range 0 9))\\r\\n                                                    (repeat 10 3))])))]\\n  (partition 2 (interleave (nth map-proc 0) (nth map-proc 1))))" "\\n(let [map-proc (repeatedly 2 (fn [] (rand-nth [(repeat 10 100) \\n                                               (map \#(+ %1 %2) \\n                                                    (range 0 9)\\n                                                    (repeat 10 50))\\n                                               (map \#(+ %1 %2) \\r\\n                                                    (map \#(* -1 %1)  (range 0 9))\\r\\n                                                    (repeat 10 3))])))]\\n  (partition 2 (interleave (nth map-proc 0) (nth map-proc 1))))" "(def tt \\n  (let [map-proc (repeatedly 2 (fn [] (rand-nth [(repeat 10 50) \\n                                 (map \#(+ %1 %2) \\n                                      (range 0 9)\\n                                      (repeat 10 100))\\n                                 (map \#(+ %1 %2) \\r\\n                                     (map \#(* -1 %1)  (range 0 9))\\r\\n                                     (repeat 10 3))])))]\\n    [(nth map-proc 0) (nth map-proc 1) ]))" "\\n  (let [map-proc (repeatedly 2 (fn [] (rand-nth [(repeat 10 50) \\n                                 (map \#(+ %1 %2) \\n                                      (range 0 9)\\n                                      (repeat 10 100))\\n                                 (map \#(+ %1 %2) \\r\\n                                     (map \#(* -1 %1)  (range 0 9))\\r\\n                                     (repeat 10 3))])))]\\n    (partition 2 (interleave (nth map-proc 0) (nth map-proc 1))))" "\\n  (let [map-proc (repeatedly 2 (fn [] (rand-nth [(repeat 10 50) \\n                                 (map \#(+ %1 %2) \\n                                      (range 0 9)\\n                                      (repeat 10 50))\\n                                 (map \#(+ %1 %2) \\r\\n                                     (map \#(* -1 %1)  (range 0 9))\\r\\n                                     (repeat 10 100))])))]\\n    (partition 2 (interleave (nth map-proc 0) (nth map-proc 1))))" "\\n  (let [map-proc (repeatedly 2 (fn [] (rand-nth [(repeat 10 50) \\n                                 (map \#(+ %1 %2) \\n                                      (range 0 9)\\n                                      (repeat 10 50))\\n                                 (map \#(+ %1 %2) \\r\\n                                     (map \#(* -1 %1)  (range 0 9))\\r\\n                                     (repeat 10 50))])))]\\n    (partition 2 (interleave (nth map-proc 0) (nth map-proc 1))))" "\\n  (let [map-proc (repeatedly 2 (fn [] (rand-nth [(repeat 10 50) \\n                                 (map \#(+ %1 %2) \\n                                      (range 0 9)\\n                                      (repeat 10 50))\\n                                 (map \#(+ %1 %2) \\r\\n                                     (map \#(* -1 %1)  (range 0 9))\\r\\n                                     (repeat 10 100))])))]\\n    (partition 2 (interleave (nth map-proc 0) (nth map-proc 1))))" "\\n  (let [map-proc (repeatedly 2 (fn [] (rand-nth [(repeat 10 50) \\n                                 (map \#(+ %1 %2) \\n                                      (range 0 9)\\n                                      (repeat 10 50))\\n                                 (map \#(+ %1 %2) \\r\\n                                     (map \#(* -1 %1)  (range 0 9))\\r\\n                                     (repeat 10 50))])))]\\n    (partition 2 (interleave (nth map-proc 0) (nth map-proc 1))))" "\\n  (let [path-gen-list [(repeat 10 50) \\r\\n                                 (map \#(+ %1 %2) \\r\\n                                      (range 0 9)\\r\\n                                      (repeat 10 50))\\r\\n                                 (map \#(+ %1 %2) \\r\\n                                     (map \#(* -1 %1)  (range 0 9))\\r\\n                                     (repeat 10 50))]\\n         valid-comb [[0 1][0 2][1 0][2 0][1 1][2 2][1 2][2 1]]\\n         dir-sel (rand-nth valid-comb)\\n        ]\\n    (partition 2 (interleave (nth path-gen-list (first dir-sel)) (nth path-gen-list (second dir-sel)))))" "\\n  (let [path-gen-list (fn [length start] [(repeat length start) \\r\\n                                 (map \#(+ %1 %2) \\r\\n                                      (range 0 length)\\r\\n                                      (repeat length start))\\r\\n                                 (map \#(+ %1 %2) \\r\\n                                     (map \#(* -1 %1)  (range 0 length))\\r\\n                                     (repeat length start))])\\n         valid-comb [[0 1][0 2][1 0][2 0][1 1][2 2][1 2][2 1]]\\n         dir-sel (rand-nth valid-comb)\\n        ]\\n    (partition 2 (interleave (nth (path-gen-list 10 40) (first dir-sel)) (nth (path-gen-list 10 60) (second dir-sel)))))" "\\n(defn [x y length]  \\n(let [path-gen-list (fn [length start] [(repeat length start) \\r\\n                                 (map \#(+ %1 %2) \\r\\n                                      (range 0 length)\\r\\n                                      (repeat length start))\\r\\n                                 (map \#(+ %1 %2) \\r\\n                                     (map \#(* -1 %1)  (range 0 length))\\r\\n                                     (repeat length start))])\\n       valid-comb [[0 1][0 2][1 0][2 0][1 1][2 2][1 2][2 1]]\\n       dir-sel (rand-nth valid-comb)\\n      ]\\n  (partition 2 (interleave (nth (path-gen-list length x) (first dir-sel)) (nth (path-gen-list length y) (second dir-sel))))))" "\\n(defn get-path [x y length]  \\n(let [path-gen-list (fn [length start] [(repeat length start) \\r\\n                                 (map \#(+ %1 %2) \\r\\n                                      (range 0 length)\\r\\n                                      (repeat length start))\\r\\n                                 (map \#(+ %1 %2) \\r\\n                                     (map \#(* -1 %1)  (range 0 length))\\r\\n                                     (repeat length start))])\\n       valid-comb [[0 1][0 2][1 0][2 0][1 1][2 2][1 2][2 1]]\\n       dir-sel (rand-nth valid-comb)\\n      ]\\n  (partition 2 (interleave (nth (path-gen-list length x) (first dir-sel)) (nth (path-gen-list length y) (second dir-sel))))))" "(get-path 200 100)" "(get-path 200 100 20\\n          )" "\\r\\n(defn get-path \\r\\n  \\"Creates a random path 45 deg increments with starting point x y and length\\"\\r\\n  [x y length]  \\r\\n  (let [path-gen-list (fn [length start] [(repeat length start) \\r\\n                                          (map \#(+ %1 %2) \\r\\n                                               (range 0 length)\\r\\n                                               (repeat length start))\\r\\n                                          (map \#(+ %1 %2) \\r\\n                                               (map \#(* -1 %1)  (range 0 length))\\r\\n                                               (repeat length start))])\\r\\n        valid-comb [[0 1][0 2][1 0][2 0][1 1][2 2][1 2][2 1]]\\r\\n        dir-sel (rand-nth valid-comb)\\r\\n        ]\\r\\n    (partition 2 (interleave (nth (path-gen-list length x) (first dir-sel)) (nth (path-gen-list length y) (second dir-sel))))))" "(get-path 100 200 40)" "(def session (atom {}))" "(defn get-tail-paths [image config]\\n  (let [numPlacedBiased (int (* (\:trailNum session) (\:placementHeuristic config) (\:numAnts config)))]\\n    \\r\\n  numPlacedBiased))" "(reset\! session (assoc @session \:tailNum 2))" "(defn inc-trail[]\\n(reset\! session (assoc @session \:trialNum (\:trialNum @session))))" "(reset\! session (assoc @session \:trialNum 2))" "(defn inc-trail[]\\n(reset\! session (assoc @session \:trialNum (\:trialNum @session))))" "(inc-trail)" "(defn inc-trail[]\\n(reset\! session \\n        (assoc @session \:trialNum \\n               (inc \\n                 (\:trialNum @session)))))" "(inc-trail)" "(defn get-tail-paths [image config]\\n  (let [numPlacedBiased (int (* (\:trailNum session) (\:placementHeuristic config) (\:numAnts config)))]\\r\\n  numPlacedBiased))" "(def session (atom {\:trialNum 0}))\\r\\n\\r\\n(def config (get-config))" "(defn get-tail-paths [image config]\\n  (let [numPlacedBiased (int (* (\:trailNum session) (\:placementHeuristic config) (\:numAnts config)))]\\r\\n  numPlacedBiased))" "(get-tail-paths)" "(defn get-tail-paths [image]\\n  (let [numPlacedBiased (int (* (\:trailNum session) (\:placementHeuristic config) (\:numAnts config)))]\\r\\n  numPlacedBiased))" "(get-tail-paths nil)" "(\:placementHeuristic config)" "(def config (get-config))" "(\:placementHeuristic config)" "(def config (get-config))" "(\:placementHeuristic config)" "(get-tail-paths nil)" "(defn get-tail-paths [image]\\n  (let [numPlacedBiased (int (* (\:trailNum session) (\:placementHeuristic config) (\:numAnts config)))]\\r\\n  numPlacedBiased))" "(\:trailNum session)" "(defn get-tail-paths [image]\\n  (let [numPlacedBiased (int (* (\:trialNum session) (\:placementHeuristic config) (\:numAnts config)))]\\r\\n  numPlacedBiased))" "(\:trailNum session)" "session" "(inc-trail)" "session" "(defn get-tail-paths [image]\\n  (let [numPlacedBiased (int (* (\:trialNum session) (\:placementHeuristic config) (\:numAnts config)))]\\r\\n  numPlacedBiased))" "(\:trialNum session)" "session" "(defn get-tail-paths [image]\\n  (let [numPlacedBiased (int (* (\:trialNum @session) (\:placementHeuristic config) (\:numAnts config)))]\\r\\n  numPlacedBiased))" "(\:trialNum session)" "(\:trialNum @session)" "(defn get-tail-paths [image]\\n  (let [numPlacedBiased (int (* (\:trialNum @session) (\:placementHeuristic config) (\:numAnts config)))]\\r\\n  numPlacedBiased))" "(get-tail-paths nil)" "(defn get-tail-paths [image]\\r\\n  (let [numPlacedBiased (int (* (\:trialNum @session) (\:placementHeuristic config) (\:numAnts config))) \\n        randPaths (map (get-path %1 %2 (\:maxPathLength config)) (random-staring-coords image))]\\r\\n  randPaths))" "(get-method)" "(get-image)" "(get-tail-paths (get-image))" "(int (* (\:trialNum @session) (\:placementHeuristic config) (\:numAnts config)))" "(\:trialNum @session)" "(in-ns trailUtil)" "(in-ns tgaa.util.trailUtil)" "(in-ns 'tgaa.util.trailUtil)" "(get-path 10 10 10)" "config" "session" "(inc-trail)" "(get-trail-paths (tgaa.util.image/get-image))" "(tgaa.util.image/get-image)" "(get-trail-paths (tgaa.util.image/get-image))" "(int (* (\:trialNum @session) (\:placementHeuristic config) (\:numAnts config)))" "(map \#(get-path %1 %2 (\:maxPathLength config)) (random-staring-coords (tgaa.util.image/get-image)))" "(map \#(get-path (nth % 0) (nth % 1) (\:maxPathLength config)) (random-staring-coords (tgaa.util.image/get-image)))" "\\r\\n(defn get-trail-paths [image]\\r\\n     (let [numPlacedBiased (int \\n                             (* \\n                               (\:trialNum @session) \\n                               (\:placementHeuristic config) \\n                               (\:numAnts config))) \\r\\n           randPaths (map \#(get-path (nth % 0) \\n                                     (nth % 1)\\n                                     (\:maxPathLength config)) \\n                          (random-staring-coords \\n                            (tgaa.util.image/get-image)))]\\r\\n     randPaths))" "(get-trail-paths (tgaa.util.image/get-image))" "(tgaa.util.trailUtil/get-trail-paths (get-image))" "(\:canPaths session)" "session" "(reset\! session (assoc @session \:canPaths [[1 1][2 2]]))" "(\:canPaths session)" "(\:canPaths @session)" "\\r\\n(defn get-path \\r\\n  \\"Creates a random path 45 deg increments with starting point x y and length\\"\\r\\n  [x y length]  \\r\\n  (let [path-gen-list (fn [length start] [(repeat length start) \\r\\n                                          (map \#(+ %1 %2) \\r\\n                                               (range 0 length)\\r\\n                                               (repeat length start))\\r\\n                                          (map \#(+ %1 %2) \\r\\n                                               (map \#(* -1 %1)  (range 0 length))\\r\\n                                               (repeat length start))])\\r\\n        valid-comb [[0 1][0 2][1 0][2 0][1 1][2 2][1 2][2 1]]\\r\\n        dir-sel (rand-nth valid-comb)\\r\\n        ]\\r\\n    \\r\\n    (partition 2 (interleave (nth (path-gen-list length x) (first dir-sel)) (nth (path-gen-list length y) (second dir-sel))))))" "(+ 1 1)" "\\r\\n(defn get-path \\r\\n  \\"Creates a random path 45 deg increments with starting point x y and length\\"\\r\\n  [x y length]  \\r\\n  (let [path-gen-list (fn [length start] [(repeat length start) \\r\\n                                          (map \#(+ %1 %2) \\r\\n                                               (range 0 length)\\r\\n                                               (repeat length start))\\r\\n                                          (map \#(+ %1 %2) \\r\\n                                               (map \#(* -1 %1)  (range 0 length))\\r\\n                                               (repeat length start))])\\r\\n        valid-comb [[0 1][0 2][1 0][2 0][1 1][2 2][1 2][2 1]]\\r\\n        dir-sel (rand-nth valid-comb)\\r\\n        ]\\r\\n    \\r\\n    (partition 2 (interleave (nth (path-gen-list length x) (first dir-sel)) (nth (path-gen-list length y) (second dir-sel))))))" "(defn get-path \\r\\n  \\"Creates a random path 45 deg increments with starting point x y and length\\"\\r\\n  [x y length]  \\r\\n  (let [path-gen-list (fn [length start] [(repeat length start) \\r\\n                                          (map \#(+ %1 %2) \\r\\n                                               (range 0 length)\\r\\n                                               (repeat length start))\\r\\n                                          (map \#(+ %1 %2) \\r\\n                                               (map \#(* -1 %1)  (range 0 length))\\r\\n                                               (repeat length start))])\\r\\n        valid-comb [[0 1][0 2][1 0][2 0][1 1][2 2][1 2][2 1]]\\r\\n        dir-sel (rand-nth valid-comb)\\r\\n        ]\\r\\n    \\r\\n    (partition 2 (interleave (nth (path-gen-list length x) (first dir-sel)) (nth (path-gen-list length y) (second dir-sel))))))" "(defn get-path \\r\\n  \\"Creates a random path 45 deg increments with starting point x y and length\\"\\r\\n  [x y length image]  \\r\\n  (let [path-gen-list (fn [length start] [(repeat length start) \\r\\n                                          (map \#(+ %1 %2) \\r\\n                                               (range 0 length)\\r\\n                                               (repeat length start))\\r\\n                                          (map \#(+ %1 %2) \\r\\n                                               (map \#(* -1 %1)  (range 0 length))\\r\\n                                               (repeat length start))])\\r\\n        rand-direc [[0 1][0 2][1 0][2 0][1 1][2 2][1 2][2 1]]\\n        dir-\\r\\n        dir-sel (rand-nth valid-comb)\\n        path-dirty (partition 2 (interleave (nth (path-gen-list length x) (first dir-sel)) (nth (path-gen-list length y) (second dir-sel))))\\n        valid-path \\r\\n        ]\\r\\n    \\r\\n    ))" "(shuffle [[1 1] [2 2] [3 3]])" "\\r\\n(defn path-last-point-gen [length start]\\r\\n  \\"Get last points of gen axis of a path for performance\\"\\r\\n  [ \#(start)\\r\\n   (+ start length)\\r\\n   (- start length)])\\r\\n   \\r\\n\\r\\n(defn path-generator [length start]\\r\\n  \\"Generates list of functions for one axis of a path\\"\\r\\n  [(repeat length start) \\r\\n   (map \#(+ %1 %2) \\r\\n        (range 0 length)\\r\\n        (repeat length start))\\r\\n   (map \#(+ %1 %2) \\r\\n        (map \#(* -1 %1)  (range 0 length))\\r\\n        (repeat length start))])" "(path-generator 10 10)" "(path-last-point-gen 10 10)" "(defn path-last-point-gen [length start]\\r\\n  \\"Get last points of gen axis of a path for performance\\"\\r\\n  [ start\\r\\n   (+ start length)\\r\\n   (- start length)])" "(path-last-point-gen 10 10)" "(path-generator 10 10)" "(count (path-generator 10 10))" "(map count (path-generator 10 10))" "(defn path-last-point-gen [length start]\\r\\n  \\"Get last points of gen axis of a path for performance\\"\\r\\n  [ start\\r\\n   (+ start (- length 1))\\r\\n   (- start (+ length 1))])" "(path-last-point-gen 10 10)" "(path-generator 10 10)" "(defn path-last-point-gen [length start]\\r\\n  \\"Get last points of gen axis of a path for performance\\"\\r\\n  [ start\\r\\n   (+ start (- length 1))\\r\\n   (+ (- start  length ) 1)])" "(path-last-point-gen 10 10)" "(path-generator 10 10)" "(defn path-generator [dir]\\r\\n  \\"Generates list of functions for one axis of a path\\"\\r\\n  (fn [length start]\\r\\n    (cond \\r\\n      (\= 0 dir)\\r\\n      (repeat length start) \\r\\n      (\= 1 dir)\\r\\n      (map \#(+ %1 %2) \\r\\n           (range 0 length)\\r\\n           (repeat length start))\\r\\n      \:else\\r\\n      (map \#(+ %1 %2) \\r\\n           (map \#(* -1 %1)  (range 0 length))\\r\\n           (repeat length start)))))" "(path-generator 0)" "((path-generator 0) 10 10)" "((path-generator 1) 10 10)" "((path-generator 2\\n                 ) 10 10)" "(defn path-last-point-gen [dir]\\r\\n  \\"Get last points of gen axis of a path for performance\\"\\r\\n  (fn [length start]\\r\\n    (cond \\r\\n      (\= 0 dir)\\r\\n      start\\r\\n      (\= 1 dir)\\r\\n      (+ start (- length 1))\\r\\n      \:else\\r\\n      (+ (- start  length ) 1))))" "(path-last-point-gen 3)" "((path-last-point-gen 3) 10 10)" "((path-last-point-gen 2\\n                      ) 10 10)" "((path-last-point-gen 0) 10 10)" "((path-last-point-gen 1) 10 10)" "((path-last-point-gen 2) 10 10)" "(defn ant-path [x y dir-vec]\\r\\n  (partition 2 \\n             (interleave \\n               ((path-generator (first dir-sel)) length x ) \\n               ((path-generator (second dir-sel)) length y))))" "(defn ant-path [x y dir-sel]\\r\\n  (partition 2 \\n             (interleave \\n               ((path-generator (first dir-sel)) length x ) \\n               ((path-generator (second dir-sel)) length y))))" "(defn ant-path [x y length dir-sel]\\r\\n  (partition 2 \\n             (interleave \\n               ((path-generator (first dir-sel)) length x ) \\n               ((path-generator (second dir-sel)) length y))))" "(ant-path 300 200 20 [1 1])" "(defn ant-path [x y length dir-sel image]\\r\\n  \\"Creates an ant path. Path must be valid or exception is thrown\\"\\r\\n  (map \#(vector %1 %2 (image-values image %1 %2))\\r\\n               ((path-generator (first dir-sel)) length x ) \\r\\n               ((path-generator (second dir-sel)) length y)))" "(defn ant-valid-path \\r\\n  \\"Creates a random path 45 deg increments with starting point x y and length\\"\\r\\n  [x y length image]  \\r\\n  (map \#({ \:last [(path-last-point-gen length %1) (path-last-point-gen length %2)] \:dir-sel [%1 %2]})  (shuffle dir-sel)))" "(def dir-sel [[0 1][0 2][1 0][2 0][1 1][2 2][1 2][2 1]])" "(defn ant-valid-path \\r\\n  \\"Creates a random path 45 deg increments with starting point x y and length\\"\\r\\n  [x y length image]  \\r\\n  (map \#({ \:last [(path-last-point-gen length %1) (path-last-point-gen length %2)] \:dir-sel [%1 %2]})  (shuffle dir-sel)))" "(defn ant-valid-path \\r\\n  \\"Creates a random path 45 deg increments with starting point x y and length\\"\\r\\n  [x y length image]\\n  (filter  \#(and (>- ((\:last %)\\r\\n  (map \#({ \:last [(path-last-point-gen length %1) (path-last-point-gen length %2)] \:dir-sel [%1 %2]})  (shuffle dir-sel)))" "(-> 1 (\= 1))" "(defn ant-valid-path \\r\\n  \\"Creates a random path 45 deg increments with starting point x y and length\\"\\r\\n  [x y length image]\\n  (filter  \#(let [ x-l (nth (\:last %) 0)\\n                  y-l (nth (\:last %) 1)]\\n                  (and (>\= x-l 0) (< x-l (. imge getWidth)) (>- y-l 0) (< y-l (. image getHeight))))\\r\\n  (map \#({ \:last [(path-last-point-gen length %1) (path-last-point-gen length %2)] \:dir-sel [%1 %2]})  (shuffle dir-sel)))" "(defn ant-valid-path \\r\\n  \\"Creates a random path 45 deg increments with starting point x y and length\\"\\r\\n  [x y length image]\\n  (filter  \#(let [ x-l (nth (\:last %) 0)\\n                  y-l (nth (\:last %) 1)]\\n                  (and (>\= x-l 0) (< x-l (. imge getWidth)) (>- y-l 0) (< y-l (. image getHeight))))\\r\\n  (map \#({ \:last [(path-last-point-gen length %1) (path-last-point-gen length %2)] \:dir-sel [%1 %2]})  (shuffle dir-sel))))" "(defn ant-valid-path \\r\\n  \\"Creates a random path 45 deg increments with starting point x y and length\\"\\r\\n  [x y length image]\\n  (filter  \#(let [ x-l (nth (\:last %) 0)\\n                  y-l (nth (\:last %) 1)]\\n                  (and (>\= x-l 0) (< x-l (. image getWidth)) (>- y-l 0) (< y-l (. image getHeight))))\\r\\n  (map \#({ \:last [(path-last-point-gen length %1) (path-last-point-gen length %2)] \:dir-sel [%1 %2]})  (shuffle dir-sel))))" "(defn ant-valid-path \\r\\n  \\"Creates a random path 45 deg increments with starting point x y and length\\"\\r\\n  [x y length image]\\n  (filter  \#(let [ x-l (nth (\:last %) 0)\\n                  y-l (nth (\:last %) 1)]\\n                  (and (>\= x-l 0) (< x-l (. image getWidth)) (>\= y-l 0) (< y-l (. image getHeight))))\\r\\n  (map \#({ \:last [(path-last-point-gen length %1) (path-last-point-gen length %2)] \:dir-sel [%1 %2]})  (shuffle dir-sel))))" "(def i (get-image))" "(ant-valid-path 100 100 10 i)" "(defn ant-valid-path \\r\\n  \\"Creates a random path 45 deg increments with starting point x y and length\\"\\r\\n  [x y length image]\\n\\r\\n  (map \#({ \:last [(path-last-point-gen length %1) (path-last-point-gen length %2)] \:dir-sel [%1 %2]})  (shuffle dir-sel))))" "(defn ant-valid-path \\r\\n  \\"Creates a random path 45 deg increments with starting point x y and length\\"\\r\\n  [x y length image]\\n\\r\\n  (map \#({ \:last [(path-last-point-gen length %1) (path-last-point-gen length %2)] \:dir-sel [%1 %2]})  (shuffle dir-sel)))" "(ant-valid-path 100 100 10 i)" "(defn ant-valid-path \\r\\n  \\"Creates a random path 45 deg increments with starting point x y and length\\"\\r\\n  [x y length image]\\n  (filter  \#(let [ x-l (nth (\:last %) 0)\\n                  y-l (nth (\:last %) 1)]\\n                  (and (>\= x-l 0) (< x-l (. image getWidth)) (>\= y-l 0) (< y-l (. image getHeight))))\\r\\n  (map \#({ \:last [(path-last-point-gen length %1) (path-last-point-gen length %2)] \:dir-sel [%1 %2]})  (shuffle dir-sel))))" "\\r\\n(def dir-sel [[0 1][0 2][1 0][2 0][1 1][2 2][1 2][2 1]])\\r\\n\\r\\n(defn path-last-point-gen [dir]\\r\\n  \\"Get last points of gen axis of a path for performance\\"\\r\\n  (fn [length start]\\r\\n    (cond \\r\\n      (\= 0 dir)\\r\\n      start\\r\\n      (\= 1 dir)\\r\\n      (+ start (- length 1))\\r\\n      \:else\\r\\n      (+ (- start  length ) 1))))\\r\\n\\r\\n(defn path-generator [dir]\\r\\n  \\"Generates list of functions for one axis of a path\\"\\r\\n  (fn [length start]\\r\\n    (cond \\r\\n      (\= 0 dir)\\r\\n      (repeat length start) \\r\\n      (\= 1 dir)\\r\\n      (map \#(+ %1 %2) \\r\\n           (range 0 length)\\r\\n           (repeat length start))\\r\\n      \:else\\r\\n      (map \#(+ %1 %2) \\r\\n           (map \#(* -1 %1)  (range 0 length))\\r\\n           (repeat length start)))))" "\\r\\n(defn random-staring-coords \\r\\n  \\"Get random set of coordinates\\"\\r\\n  [^BufferedImage image]\\r\\n  (partition 2\\r\\n             (interleave \\r\\n               (repeatedly \\r\\n                      (\:numAnts config) \\r\\n                      \#(rand-int \\r\\n                         (. image getWidth)))\\r\\n        (repeatedly \\r\\n               (\:numAnts config) \\r\\n               \#(rand-int \\r\\n                  (. image getHeight))))))" "(defn ant-path [x y length dir-sel image]\\r\\n  \\"Creates an ant path. Path must be valid or exception is thrown\\"\\r\\n  (map \\r\\n    \#(vector %1 %2 (. image getRGB %1 %2))\\r\\n    ((path-generator (first dir-sel)) length x ) \\r\\n    ((path-generator (second dir-sel)) length y)))" "(ant-path 100 100 10 [1 1])" "(defn ant-path [x y length dir-sel image]\\r\\n  \\"Creates an ant path. Path must be valid or exception is thrown\\"\\r\\n  (map \\r\\n    \#(vector %1 %2 (. image getRGB %1 %2))\\r\\n    ((path-generator (first dir-sel)) length x ) \\r\\n    ((path-generator (second dir-sel)) length y)))" "(ant-path 100 100 10 [1 1])" "(ant-path 100 100 10 [1 1] i)" "(defn path-generator [dir]\\r\\n  \\"Generates list of functions for one axis of a path\\"\\r\\n  (fn [start]\\r\\n    (let [path-len (\:maxPathLength config)]\\r\\n      (cond \\r\\n        (\= 0 dir)\\r\\n        (repeat path-len start) \\r\\n        (\= 1 dir)\\r\\n        (map \#(+ %1 %2) \\r\\n             (range 0 path-len)\\r\\n             (repeat path-len) start)\\r\\n      \:else\\r\\n      (map \#(+ %1 %2) \\r\\n           (map \#(* -1 %1)  path-len)\\r\\n           (repeat path-len start))))))" "(def dir-sel [[0 1][0 2][1 0][2 0][1 1][2 2][1 2][2 1]])\\r\\n\\r\\n(defn path-last-point-gen [dir]\\r\\n  \\"Get last points of gen axis of a path for performance\\"\\r\\n  (fn [start]\\r\\n    (cond \\r\\n      (\= 0 dir)\\r\\n      start\\r\\n      (\= 1 dir)\\r\\n      (+ start (- (\:maxPathLength config) 1))\\r\\n      \:else\\r\\n      (+ (- start  (\:maxPathLength config) ) 1))))\\r\\n\\r\\n(defn path-generator [dir]\\r\\n  \\"Generates list of functions for one axis of a path\\"\\r\\n  (fn [start]\\r\\n    (let [path-len (\:maxPathLength config)]\\r\\n      (cond \\r\\n        (\= 0 dir)\\r\\n        (repeat path-len start) \\r\\n        (\= 1 dir)\\r\\n        (map \#(+ %1 %2) \\r\\n             (range 0 path-len)\\r\\n             (repeat path-len) start)\\r\\n      \:else\\r\\n      (map \#(+ %1 %2) \\r\\n           (map \#(* -1 %1)  path-len)\\r\\n           (repeat path-len start))))))\\r\\n  \\r\\n(defn random-staring-coords \\r\\n  \\"Get random set of coordinates\\"\\r\\n  [^BufferedImage image]\\r\\n  (partition 2\\r\\n             (interleave \\r\\n               (repeatedly \\r\\n                      (\:numAnts config) \\r\\n                      \#(rand-int \\r\\n                         (. image getWidth)))\\r\\n        (repeatedly \\r\\n               (\:numAnts config) \\r\\n               \#(rand-int \\r\\n                  (. image getHeight))))))\\r\\n\\r\\n(defn ant-path [x y dir-sel image]\\r\\n  \\"Creates an ant path. Path must be valid or exception is thrown\\"\\r\\n  (map \\r\\n    \#(vector %1 %2 (. image getRGB %1 %2))\\r\\n    ((path-generator (first dir-sel)) x ) \\r\\n    ((path-generator (second dir-sel)) y)))" "(ant-valid-path 100 100 10 i)" "(ant-valid-path 100 100 i)" "(ant-path 100 100 [1 1] i)" "(map \\r\\n    \#(vector %1 %2 (. i getRGB %1 %2))\\r\\n    ((path-generator 1) 100 ) \\r\\n    ((path-generator 0) 100))" "(map \\r\\n    (fn [x y] vector x y (. i getRGB x y))\\r\\n    ((path-generator 1) 100 ) \\r\\n    ((path-generator 0) 100))" "((path-generator 1) 100 )" "(path-generator 1)" "((path-generator 1) 5)" "(\:maxPathLength config)" "(let [path-len (\:maxPathLength config)]\\r\\n      (cond \\r\\n        (\= 0 dir)\\r\\n        (repeat path-len start) \\r\\n        (\= 1 dir)\\r\\n        (map \#(+ %1 %2) \\r\\n             (range 0 path-len)\\r\\n             (repeat path-len) start)\\r\\n      \:else\\r\\n      (map \#(+ %1 %2) \\r\\n           (map \#(* -1 %1)  path-len)\\r\\n           (repeat path-len start))))))" "(let [path-len (\:maxPathLength config)]\\r\\n      (cond \\r\\n        (\= 0 1)\\r\\n        (repeat path-len start) \\r\\n        (\= 1 1)\\r\\n        (map \#(+ %1 %2) \\r\\n             (range 0 path-len)\\r\\n             (repeat path-len) start)\\r\\n      \:else\\r\\n      (map \#(+ %1 %2) \\r\\n           (map \#(* -1 %1)  path-len)\\r\\n           (repeat path-len start))))" "(let [path-len (\:maxPathLength config)]\\r\\n      (cond \\r\\n        (\= 0 1)\\r\\n        (repeat path-len 10) \\r\\n        (\= 1 1)\\r\\n        (map \#(+ %1 %2) \\r\\n             (range 0 path-len)\\r\\n             (repeat path-len) 10)\\r\\n      \:else\\r\\n      (map \#(+ %1 %2) \\r\\n           (map \#(* -1 %1)  path-len)\\r\\n           (repeat path-len 10))))" "\\r\\n      (cond \\r\\n        (\= 0 1)\\r\\n        (repeat path-len 10) \\r\\n        (\= 1 1)\\r\\n        (map \#(+ %1 %2) \\r\\n             (range 0 4)\\r\\n             (repeat 4) 10)\\r\\n      \:else\\r\\n      (map \#(+ %1 %2) \\r\\n           (map \#(* -1 %1)  4)\\r\\n           (repeat 4 10)))" "\\r\\n      (cond \\r\\n        (\= 0 1)\\r\\n        (repeat 4 10) \\r\\n        (\= 1 1)\\r\\n        (map \#(+ %1 %2) \\r\\n             (range 0 4)\\r\\n             (repeat 4) 10)\\r\\n      \:else\\r\\n      (map \#(+ %1 %2) \\r\\n           (map \#(* -1 %1)  4)\\r\\n           (repeat 4 10)))" "\\r\\n      (cond \\r\\n        (\= 0 1)\\r\\n        (repeat 4 10) \\r\\n        (\= 1 1)\\r\\n        (map \#(+ %1 %2) \\r\\n             (range 0 4)\\r\\n             (repeat 4) 10)\\r\\n      \:else\\r\\n      (map \#(+ %1 %2) \\r\\n           (map \#(* -1 %1)\\r\\n           (repeat 4 10))))" "(map \#(* -1 %1)\\r\\n           (repeat 4 10))" "\\r\\n      (cond \\r\\n        (\= 0 1)\\r\\n        (repeat 4 10) \\r\\n        (\= 1 1)\\r\\n        (map \#(+ %1 %2) \\r\\n             (range 0 4)\\r\\n             (repeat 4))\\r\\n      \:else\\r\\n      (map \#(+ %1 %2) \\r\\n           (map \#(* -1 %1)\\r\\n           (repeat 4 10))))" "(range -10 10 )" "(defn path-generator [dir]\\r\\n  \\"Generates list of functions for one axis of a path\\"\\r\\n  (fn [start]\\r\\n    (let [path-len (\:maxPathLength config)]\\r\\n      (cond \\r\\n        (\= 0 dir)\\r\\n        (repeat path-len start) \\r\\n        (\= 1 dir)\\r\\n        (range start (+ start path-len))\\r\\n      \:else\\r\\n        (range start (- start path-len))))))" "(\\n  (path-generator 1) 10)" "(\\n  (path-generator 0) 10)" "(\\n  (path-generator 2) 10)" "(defn path-generator [dir]\\r\\n  \\"Generates list of functions for one axis of a path\\"\\r\\n  (fn [start]\\r\\n    (let [path-len (\:maxPathLength config)]\\r\\n      (cond \\r\\n        (\= 0 dir)\\r\\n        (repeat path-len start) \\r\\n        (\= 1 dir)\\r\\n        (range start (+ start path-len))\\r\\n        (\= 2 dir)\\r\\n        (range start (- start path-len))))))" "(\\n  (path-generator 0) 10)" "(\\n  (path-generator 1) 10)" "(\\n  (path-generator 2) 10)" "  \\"Generates list of functions for one axis of a path\\"\\r\\n  (fn [start]\\r\\n    (let [path-len (\:maxPathLength config)]\\r\\n      (cond \\r\\n        (\= 0 dir)\\r\\n        (repeat path-len start) \\r\\n        (\= 1 dir)\\r\\n        (range start (+ start path-len))\\r\\n        (\= 2 dir)\\r\\n        (range start (- start path-len))\\r\\n        \:else nil))))" "(defn path-generator [dir]\\r\\n  \\"Generates list of functions for one axis of a path\\"\\r\\n  (fn [start]\\r\\n    (let [path-len (\:maxPathLength config)]\\r\\n      (cond \\r\\n        (\= 0 dir)\\r\\n        (repeat path-len start) \\r\\n        (\= 1 dir)\\r\\n        (range start (+ start path-len))\\r\\n        (\= 2 dir)\\r\\n        (range start (- start path-len))\\r\\n        \:else nil))))" "(\\n  (path-generator 2) 10)" "((path-generator 2) 10)" "(path-generator 2)" "(defn path-generator [dir]\\r\\n  \\"Generates list of functions for one axis of a path\\"\\r\\n  (fn [start]\\r\\n    (let [path-len (\:maxPathLength config)]\\r\\n      (cond \\r\\n        (\= 0 dir)\\r\\n        (repeat path-len start) \\r\\n        (\= 1 dir)\\r\\n        (range start (+ start path-len))\\r\\n        (\= 2 dir)\\r\\n        (range (- start path-len) start)\\r\\n        \:else nil))))" "(path-generator 2)" "((path-generator 2) 10)" "(defn path-generator [dir]\\r\\n  \\"Generates list of functions for one axis of a path\\"\\r\\n  (fn [start]\\r\\n    (let [path-len (\:maxPathLength config)]\\r\\n      (cond \\r\\n        (\= 0 dir)\\r\\n        (repeat path-len start) \\r\\n        (\= 1 dir)\\r\\n        (range start (+ start path-len))\\r\\n        (\= 2 dir)\\r\\n        (inc (range (- start path-len) start))\\r\\n        \:else nil))))" "((path-generator 2) 10)" "(defn path-generator [dir]\\r\\n  \\"Generates list of functions for one axis of a path\\"\\r\\n  (fn [start]\\r\\n    (let [path-len (\:maxPathLength config)]\\r\\n      (cond \\r\\n        (\= 0 dir)\\r\\n        (repeat path-len start) \\r\\n        (\= 1 dir)\\r\\n        (range start (+ start path-len))\\r\\n        (\= 2 dir)\\r\\n        (range (- (+ start 1) path-len) start)\\r\\n        \:else nil))))" "((path-generator 2) 10)" "(count ((path-generator 2) 10))" "(defn path-generator [dir]\\r\\n  \\"Generates list of functions for one axis of a path\\"\\r\\n  (fn [start]\\r\\n    (let [path-len (\:maxPathLength config)]\\r\\n      (cond \\r\\n        (\= 0 dir)\\r\\n        (repeat path-len start) \\r\\n        (\= 1 dir)\\r\\n        (range start (+ start path-len))\\r\\n        (\= 2 dir)\\r\\n        (range (- (inc start) path-len) (inc start))\\r\\n        \:else nil))))" "(count ((path-generator 2) 10))" "((path-generator 2) 10)" "((path-generator 1) 10)" "(count ((path-generator 1) 10))" "(count ((path-generator 0) 10))" "(defn path-generator [dir]\\r\\n  \\"Generates list of functions for one axis of a path\\"\\r\\n  (fn [start]\\r\\n    (let [path-len (\:maxPathLength config)]\\r\\n      (cond \\r\\n        (\= 0 dir)\\r\\n        (repeat path-len start) \\r\\n        (\= 1 dir)\\r\\n        (range start (+ start path-len))\\r\\n        (\= 2 dir)\\r\\n        (range (- (inc start) path-len) (inc start))\\r\\n        \:else nil))))" "(defn ant-path [x y dir-sel image]\\r\\n  \\"Creates an ant path. Path must be valid or exception is thrown\\"\\r\\n  (map \\r\\n    \#(vector %1 %2 (. image getRGB %1 %2))\\r\\n    ((path-generator (first dir-sel)) x ) \\r\\n    ((path-generator (second dir-sel)) y)))" "(ant-path 100 100 [1 1] i)" "(ant-path 100 100 [1 2] i)" "(defn ant-valid-path \\r\\n  \\"Creates a random path 45 deg increments with starting point x y and length\\"\\r\\n  [x y length image]  \\r\\n  (map \#({\:last [(path-last-point-gen length %1) (path-last-point-gen length %2)] \:dir-sel [%1 %2]})  (shuffle dir-sel)))" "(ant-valid-path 100 100 i)" "(defn ant-valid-path \\r\\n  \\"Creates a random path 45 deg increments with starting point x y and length\\"\\r\\n  [x y image]  \\r\\n  (map \#({\:last [(path-last-point-gen (\:maxPathLength config) %1) (path-last-point-gen (\:maxPathLength config) %2)] \:dir-sel [%1 %2]})  (shuffle dir-sel)))" "(ant-valid-path 100 100 i)" "(defn ant-valid-path \\r\\n  \\"Creates a random path 45 deg increments with starting point x y and length\\"\\r\\n  [x y image]  \\r\\n  (map \#({\:last [((path-last-point-gen %1) x) ((path-last-point-gen %2) y)] \\r\\n          \:dir-sel [%1 %2]})  (shuffle dir-sel)))" "(ant-valid-path 100 100 i)" "(path-last-point-gen 1\\n                     )" "((path-last-point-gen 1) 10)" "(shuffle dir-sel)" "[((path-last-point-gen 1) 10) ((path-last-point-gen 2) 10)]" "(defn ant-valid-path \\r\\n  \\"Creates a random path 45 deg increments with starting point x y and length\\"\\r\\n  [x y image]  \\r\\n  (map \#({\:last [((path-last-point-gen (first %1)) x) ((path-last-point-gen (second %2)) y)] \\r\\n          \:dir-sel %})  (shuffle dir-sel)))" "(ant-valid-path 100 100 i)" "(defn ant-valid-path \\r\\n  \\"Creates a random path 45 deg increments with starting point x y and length\\"\\r\\n  [x y image]  \\r\\n  (map \#({\:last [((path-last-point-gen (first %)) x) ((path-last-point-gen (second %)) y)] \\r\\n          \:dir-sel %})  (shuffle dir-sel)))" "(ant-valid-path 100 100 i)" "(defn ant-valid-path \\r\\n  \\"Creates a random path 45 deg increments with starting point x y and length\\"\\r\\n  [x y image]  \\r\\n  (map \#({\:last [((path-last-point-gen (first %)) x) ((path-last-point-gen (second %)) y)] \\r\\n          \:dir-sel %})  (shuffle dir-sel)))" "  (map \#({\:last [((path-last-point-gen 1) 10) ((path-last-point-gen 2) 10)] \\r\\n          \:dir-sel [1 1]})  (shuffle dir-sel))" "  (map (fn [] {\:last [((path-last-point-gen 1) 10) ((path-last-point-gen 2) 10)] \\r\\n          \:dir-sel [1 1]})  (shuffle dir-sel))" "[((path-last-point-gen 1) 10) ((path-last-point-gen 2) 10)]" "  (map (fn [d] {\:last [((path-last-point-gen (first d)) 10) ((path-last-point-gen (second)) 10)] \\r\\n          \:dir-sel [1 1]})  (shuffle dir-sel))" "  (map (fn [d] {\:last [((path-last-point-gen (first d)) 10) ((path-last-point-gen (second d)) 10)] \\r\\n          \:dir-sel [1 1]})  (shuffle dir-sel))" "  (filter \#(let [lx (first (\:last %))\\n                 ly (second (\:last %))]\\n             (and (> lx 0) (> ly 0)))\\n  (map (fn [d] {\:last [((path-last-point-gen (first d)) 10) ((path-last-point-gen (second d)) 10)] \\r\\n          \:dir-sel [1 1]})  (shuffle dir-sel)))" "  (filter \#(let [lx (first (\:last %))\\n                 ly (second (\:last %))]\\n             (and (> lx 0) (> ly 0)))\\n  (map (fn [d] {\:last [((path-last-point-gen (first d)) 10) ((path-last-point-gen (second d)) 10)] \\r\\n          \:dir-sel %})  (shuffle dir-sel)))" "  (filter \#(let [lx (first (\:last %))\\n                 ly (second (\:last %))]\\n             (and (> lx 0) (> ly 0)))\\n  (map (fn [d] {\:last [((path-last-point-gen (first d)) 10) ((path-last-point-gen (second d)) 10)] \\r\\n          \:dir-sel % })  (shuffle dir-sel)))" "  (filter \#(let [lx (first (\:last %))\\n                 ly (second (\:last %))]\\n             (and (> lx 0) (> ly 0)))\\n  (map (fn [d] {\:last [((path-last-point-gen (first d)) 10) ((path-last-point-gen (second d)) 10)] \\r\\n          \:dir-sel d})  (shuffle dir-sel)))" " (let [ x 10\\n       y 10 ](filter \#(let [lx (first (\:last %))\\n                            ly (second (\:last %))]\\n                        (and (> lx 0) (> ly 0)))\\n             (map (fn [d] {\:last [((path-last-point-gen (first d)) x) ((path-last-point-gen (second d)) y)] \\r\\n          \:dir-sel d})  (shuffle dir-sel))))" " (let [ x 5\\n       y 5 ](filter \#(let [lx (first (\:last %))\\n                           ly (second (\:last %))]\\n                       (and (> lx 0) (> ly 0)))\\n            (map (fn [d] {\:last [((path-last-point-gen (first d)) x) ((path-last-point-gen (second d)) y)] \\r\\n          \:dir-sel d})  (shuffle dir-sel))))" " (let [ x 5\\n       y 5 ]\\n   (\:dir-sel (first (filter \#(let [lx (first (\:last %))\\n                               ly (second (\:last %))]\\n                           (and (> lx 0) (> ly 0)))\\n                (map (fn [d] {\:last [((path-last-point-gen (first d)) x) ((path-last-point-gen (second d)) y)] \\r\\n          \:dir-sel d})  (shuffle dir-sel))))))" " (let [ x 5\\n       y 5 \\n       image i]\\n   (\:dir-sel (first (filter \#(let [lx (first (\:last %))\\n                               ly (second (\:last %))]\\n                           (and (> lx 0) (> ly 0)) (< lx (. image getWidth)) (< ly (. image getHeight)))\\n                (map (fn [d] {\:last [((path-last-point-gen (first d)) x) ((path-last-point-gen (second d)) y)] \\r\\n          \:dir-sel d})  (shuffle dir-sel))))))" "(ant-path 10 10 (ant-valid-path 10 10 image) iage)" "(ant-path 10 10 (ant-valid-path 10 10 i) i)" "(ant-valid-path 10 10 i)" "\\r\\n(defn ant-valid-dir \\r\\n  \\"Creates a random path 45 deg increments with starting point x y and length\\"\\r\\n  [x y image] \\r\\n   (\:dir-sel (first \\r\\n               (filter \#(let [lx (first (\:last %))\\r\\n                              ly (second (\:last %))]\\r\\n                          (and (> lx 0) (> ly 0)) (< lx (. image getWidth)) (< ly (. image getHeight)))\\r\\n                       (map (fn [d] {\:last [((path-last-point-gen (first d)) x) ((path-last-point-gen (second d)) y)] \\r\\n                                          \:dir-sel d})  (shuffle dir-sel))))))" "(ant-path 10 10 (ant-valid-dir 10 10 i) i)" "(defn get-trail-paths [image]\\r\\n  \\"Gets ant paths for a trail based on session and config\\"\\r\\n     (let [numPlacedBiased (int \\r\\n                             (* \\r\\n                               (\:trialNum @session) \\r\\n                               (\:placementHeuristic config) \\r\\n                               (\:numAnts config))) \\r\\n           randPaths (map \#(get-path (nth % 0) \\r\\n                                     (nth % 1)\\r\\n                                      image) \\r\\n                          (random-staring-coords image))\\r\\n           ;biasPaths (if ((\:canPaths session)\\r\\n           ]\\r\\n     randPaths))" "(get-trail-paths i)" "(random-staring-coords i)" "(get-path 10 10 i)" "(ant-path 10 10 i)" "(defn ant-path [x y image]\\r\\n  \\"Creates an ant path. Path must be valid or exception is thrown\\"\\r\\n  (let [dir-sel (ant-valid-dir x y image)]\\r\\n    (map \\r\\n      \#(vector %1 %2 (. image getRGB %1 %2))\\r\\n    ((path-generator (first dir-sel)) x ) \\r\\n    ((path-generator (second dir-sel)) y))))" "(ant-path 10 10 i)" "(defn get-trail-paths [image]\\r\\n  \\"Gets ant paths for a trail based on session and config\\"\\r\\n     (let [numPlacedBiased (int \\r\\n                             (* \\r\\n                               (\:trialNum @session) \\r\\n                               (\:placementHeuristic config) \\r\\n                               (\:numAnts config))) \\r\\n           randPaths (map \#(ant-path (nth % 0) \\r\\n                                     (nth % 1)\\r\\n                                      image) \\r\\n                          (random-staring-coords image))\\r\\n           ;biasPaths (if ((\:canPaths session)\\r\\n           ]\\r\\n     randPaths))" "(get-trail-paths i)"]
eclipse.preferences.version=1
